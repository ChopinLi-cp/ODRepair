package com.alibaba.json.bvt.serializer;

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class TestGroup100Case0 {

    public static boolean debug = false;

    @Test
    public void test001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test001");
        com.alibaba.fastjson.parser.Feature feature1 = null;
        com.alibaba.fastjson.parser.Feature[] featureArray2 = new com.alibaba.fastjson.parser.Feature[] { feature1 };
        // The following exception was thrown during execution in test generation
        try {
            com.alibaba.fastjson.JSONObject jSONObject3 = com.alibaba.fastjson.JSON.parseObject("\"\"", featureArray2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(featureArray2);
    }

    @Test
    public void test002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test002");
        char[] charArray2 = new char[] { '4', '#' };
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray5 = com.alibaba.fastjson.util.IOUtils.decodeBase64(charArray2, (-1), (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray2);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray2), "4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray2), "4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray2), "[4, #]");
    }

    @Test
    public void test003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test003");
        int int1 = com.alibaba.fastjson.util.IOUtils.stringSize(1);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
    }

    @Test
    public void test004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test004");
        java.lang.String str0 = com.alibaba.fastjson.JSON.DEFAULT_TYPE_KEY;
        org.junit.Assert.assertEquals("'" + str0 + "' != '" + "@type" + "'", str0, "@type");
    }

    @Test
    public void test005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test005");
        java.io.Closeable closeable0 = null;
        com.alibaba.fastjson.util.IOUtils.close(closeable0);
    }

    @Test
    public void test006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test006");
        char[] charArray7 = new char[] { ' ', ' ', '#', '4', '#' };
        // The following exception was thrown during execution in test generation
        try {
            com.alibaba.fastjson.util.IOUtils.getChars((byte) 0, 10, charArray7);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 9");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "  #4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "  #4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[ ,  , #, 4, #]");
    }

    @Test
    public void test007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test007");
        boolean[] booleanArray0 = com.alibaba.fastjson.util.IOUtils.firstIdentifierFlags;
        org.junit.Assert.assertNotNull(booleanArray0);
    }

    @Test
    public void test008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test008");
        byte[] byteArray0 = new byte[] {};
        com.alibaba.fastjson.parser.Feature[] featureArray1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj2 = com.alibaba.fastjson.JSON.parse(byteArray0, featureArray1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray0), "[]");
    }

    @Test
    public void test009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test009");
        java.lang.reflect.Type type1 = null;
        com.alibaba.fastjson.parser.Feature[] featureArray3 = new com.alibaba.fastjson.parser.Feature[] {};
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Iterable<java.lang.Object> objIterable4 = com.alibaba.fastjson.JSON.parseObject(", minimumCapacity=", type1, (int) (byte) 0, featureArray3);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson.JSONException; message: syntax error, pos 1, line 1, column 2, minimumCapacity=");
        } catch (com.alibaba.fastjson.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(featureArray3);
    }

    @Test
    public void test010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test010");
        int int0 = com.alibaba.fastjson.JSON.DEFAULT_GENERATE_FEATURE;
        org.junit.Assert.assertTrue("'" + int0 + "' != '" + 3089 + "'", int0 == 3089);
    }

    @Test
    public void test011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test011");
        com.alibaba.fastjson.JSONObject jSONObject1 = new com.alibaba.fastjson.JSONObject(0);
        boolean boolean3 = jSONObject1.equals((java.lang.Object) (byte) 10);
        com.alibaba.fastjson.TypeReference typeReference4 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj5 = jSONObject1.toJavaObject(typeReference4);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson.JSONException; message: can not cast to : null");
        } catch (com.alibaba.fastjson.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test012");
        // The following exception was thrown during execution in test generation
        try {
            com.alibaba.fastjson.JSONObject jSONObject2 = new com.alibaba.fastjson.JSONObject((-1), false);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal initial capacity: -1");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test013");
        com.alibaba.fastjson.JSON.DEFAULT_PARSER_FEATURE = 0;
    }

    @Test
    public void test014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test014");
        java.lang.Object obj1 = com.alibaba.fastjson.JSON.toJSON((java.lang.Object) (-1L));
        org.junit.Assert.assertEquals("'" + obj1 + "' != '" + (-1L) + "'", obj1, (-1L));
    }

    @Test
    public void test015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test015");
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature0 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        org.junit.Assert.assertTrue("'" + serializerFeature0 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature0.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
    }

    @Test
    public void test016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test016");
        java.io.InputStream inputStream0 = null;
        java.lang.reflect.Type type1 = null;
        com.alibaba.fastjson.parser.Feature feature2 = null;
        com.alibaba.fastjson.parser.Feature[] featureArray3 = new com.alibaba.fastjson.parser.Feature[] { feature2 };
        // The following exception was thrown during execution in test generation
        try {
            java.util.Collection<java.lang.Object> objCollection4 = com.alibaba.fastjson.JSON.parseObject(inputStream0, type1, featureArray3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(featureArray3);
    }

    @Test
    public void test017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test017");
        java.io.OutputStream outputStream0 = null;
        com.alibaba.fastjson.serializer.SerializeFilter[] serializeFilterArray4 = new com.alibaba.fastjson.serializer.SerializeFilter[] {};
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature5 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature6 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature7 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature8 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature9 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature[] serializerFeatureArray10 = new com.alibaba.fastjson.serializer.SerializerFeature[] { serializerFeature5, serializerFeature6, serializerFeature7, serializerFeature8, serializerFeature9 };
        byte[] byteArray11 = com.alibaba.fastjson.JSON.toJSONBytes((java.lang.Object) "hi!", serializeFilterArray4, serializerFeatureArray10);
        // The following exception was thrown during execution in test generation
        try {
            int int12 = com.alibaba.fastjson.JSON.writeJSONString(outputStream0, (java.lang.Object) "fastjson.serializer_buffer_threshold", (int) (byte) 1, serializerFeatureArray10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(serializeFilterArray4);
        org.junit.Assert.assertTrue("'" + serializerFeature5 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature5.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature6 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature6.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature7 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature7.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + serializerFeature8 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature8.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature9 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature9.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertNotNull(serializerFeatureArray10);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[34, 104, 105, 33, 34]");
    }

    @Test
    public void test018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test018");
        com.alibaba.fastjson.parser.Feature feature1 = null;
        com.alibaba.fastjson.parser.Feature[] featureArray2 = new com.alibaba.fastjson.parser.Feature[] { feature1 };
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj3 = com.alibaba.fastjson.JSON.parse("\"-9223372036854775808\"", featureArray2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(featureArray2);
    }

    @Test
    public void test019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test019");
        com.alibaba.fastjson.JSON.DEFAULT_GENERATE_FEATURE = 10;
    }

    @Test
    public void test020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test020");
        com.alibaba.fastjson.JSONObject jSONObject1 = new com.alibaba.fastjson.JSONObject(0);
        boolean boolean3 = jSONObject1.equals((java.lang.Object) (byte) 10);
        java.lang.Float float5 = jSONObject1.getFloat("UTF-8");
        jSONObject1.clear();
        java.lang.reflect.Type type8 = null;
        java.util.Collection<java.lang.Object> objCollection9 = jSONObject1.getObject("-9223372036854775808", type8);
        java.lang.reflect.Method method11 = null;
        com.alibaba.fastjson.serializer.SerializerFeature[] serializerFeatureArray13 = new com.alibaba.fastjson.serializer.SerializerFeature[] {};
        byte[] byteArray14 = com.alibaba.fastjson.JSON.toJSONBytes((java.lang.Object) 10.0d, serializerFeatureArray13);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj15 = jSONObject1.invoke((java.lang.Object) (byte) 100, method11, (java.lang.Object[]) serializerFeatureArray13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(float5);
        org.junit.Assert.assertNull(objCollection9);
        org.junit.Assert.assertNotNull(serializerFeatureArray13);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[49, 48, 46, 48]");
    }

    @Test
    public void test021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test021");
        boolean boolean1 = com.alibaba.fastjson.JSON.isValidArray("Negative initial size:");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test022");
        int int0 = com.alibaba.fastjson.JSON.DEFAULT_PARSER_FEATURE;
        org.junit.Assert.assertTrue("'" + int0 + "' != '" + 0 + "'", int0 == 0);
    }

    @Test
    public void test023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test023");
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature0 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingName;
        org.junit.Assert.assertTrue("'" + serializerFeature0 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingName + "'", serializerFeature0.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingName));
    }

    @Test
    public void test024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test024");
        java.lang.reflect.Type type1 = null;
        com.alibaba.fastjson.parser.ParserConfig parserConfig2 = null;
        com.alibaba.fastjson.parser.Feature feature4 = null;
        com.alibaba.fastjson.parser.Feature[] featureArray5 = new com.alibaba.fastjson.parser.Feature[] { feature4 };
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Comparable<java.lang.String> strComparable6 = com.alibaba.fastjson.JSON.parseObject("writer not null", type1, parserConfig2, 3089, featureArray5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(featureArray5);
    }

    @Test
    public void test025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test025");
        java.lang.reflect.Type type1 = null;
        com.alibaba.fastjson.parser.Feature feature3 = null;
        com.alibaba.fastjson.parser.Feature[] featureArray4 = new com.alibaba.fastjson.parser.Feature[] { feature3 };
        // The following exception was thrown during execution in test generation
        try {
            com.alibaba.fastjson.JSONObject jSONObject5 = com.alibaba.fastjson.JSON.parseObject("-2147483648", type1, (int) ' ', featureArray4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(featureArray4);
    }

    @Test
    public void test026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test026");
        com.alibaba.fastjson.serializer.SerializeConfig serializeConfig1 = null;
        com.alibaba.fastjson.serializer.SerializeFilter[] serializeFilterArray3 = new com.alibaba.fastjson.serializer.SerializeFilter[] {};
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature4 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature5 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature6 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature7 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature8 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature[] serializerFeatureArray9 = new com.alibaba.fastjson.serializer.SerializerFeature[] { serializerFeature4, serializerFeature5, serializerFeature6, serializerFeature7, serializerFeature8 };
        byte[] byteArray10 = com.alibaba.fastjson.JSON.toJSONBytes((java.lang.Object) "hi!", serializeFilterArray3, serializerFeatureArray9);
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature13 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature[] serializerFeatureArray14 = new com.alibaba.fastjson.serializer.SerializerFeature[] { serializerFeature13 };
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray15 = com.alibaba.fastjson.JSON.toJSONBytes((java.lang.Object) "''", serializeConfig1, serializeFilterArray3, "hi!", (int) ' ', serializerFeatureArray14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(serializeFilterArray3);
        org.junit.Assert.assertTrue("'" + serializerFeature4 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature4.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature5 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature5.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature6 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature6.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + serializerFeature7 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature7.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature8 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature8.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertNotNull(serializerFeatureArray9);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[39, 104, 105, 33, 39]");
        org.junit.Assert.assertTrue("'" + serializerFeature13 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature13.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertNotNull(serializerFeatureArray14);
    }

    @Test
    public void test027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test027");
        java.lang.String str1 = com.alibaba.fastjson.util.RyuFloat.toString((float) (byte) 0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "0.0" + "'", str1, "0.0");
    }

    @Test
    public void test028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test028");
        com.alibaba.fastjson.serializer.SerializeConfig serializeConfig1 = null;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature2 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingName;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature3 = com.alibaba.fastjson.serializer.SerializerFeature.WriteNullListAsEmpty;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature4 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingName;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature5 = com.alibaba.fastjson.serializer.SerializerFeature.WriteNullListAsEmpty;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature6 = com.alibaba.fastjson.serializer.SerializerFeature.WriteNullListAsEmpty;
        com.alibaba.fastjson.serializer.SerializerFeature[] serializerFeatureArray7 = new com.alibaba.fastjson.serializer.SerializerFeature[] { serializerFeature2, serializerFeature3, serializerFeature4, serializerFeature5, serializerFeature6 };
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str8 = com.alibaba.fastjson.JSON.toJSONStringZ((java.lang.Object) "-2147483648", serializeConfig1, serializerFeatureArray7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + serializerFeature2 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingName + "'", serializerFeature2.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingName));
        org.junit.Assert.assertTrue("'" + serializerFeature3 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteNullListAsEmpty + "'", serializerFeature3.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteNullListAsEmpty));
        org.junit.Assert.assertTrue("'" + serializerFeature4 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingName + "'", serializerFeature4.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingName));
        org.junit.Assert.assertTrue("'" + serializerFeature5 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteNullListAsEmpty + "'", serializerFeature5.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteNullListAsEmpty));
        org.junit.Assert.assertTrue("'" + serializerFeature6 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteNullListAsEmpty + "'", serializerFeature6.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteNullListAsEmpty));
        org.junit.Assert.assertNotNull(serializerFeatureArray7);
    }

    @Test
    public void test029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test029");
        java.nio.charset.Charset charset0 = com.alibaba.fastjson.util.IOUtils.UTF8;
        com.alibaba.fastjson.serializer.SerializeConfig serializeConfig2 = null;
        com.alibaba.fastjson.serializer.SerializeFilter[] serializeFilterArray4 = new com.alibaba.fastjson.serializer.SerializeFilter[] {};
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature5 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature6 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature7 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature8 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature9 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature[] serializerFeatureArray10 = new com.alibaba.fastjson.serializer.SerializerFeature[] { serializerFeature5, serializerFeature6, serializerFeature7, serializerFeature8, serializerFeature9 };
        byte[] byteArray11 = com.alibaba.fastjson.JSON.toJSONBytes((java.lang.Object) "hi!", serializeFilterArray4, serializerFeatureArray10);
        com.alibaba.fastjson.serializer.SerializeFilter[] serializeFilterArray15 = new com.alibaba.fastjson.serializer.SerializeFilter[] {};
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature16 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature17 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature18 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature19 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature20 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature[] serializerFeatureArray21 = new com.alibaba.fastjson.serializer.SerializerFeature[] { serializerFeature16, serializerFeature17, serializerFeature18, serializerFeature19, serializerFeature20 };
        byte[] byteArray22 = com.alibaba.fastjson.JSON.toJSONBytes((java.lang.Object) "hi!", serializeFilterArray15, serializerFeatureArray21);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray23 = com.alibaba.fastjson.JSON.toJSONBytes(charset0, (java.lang.Object) (byte) 10, serializeConfig2, serializeFilterArray4, ":true", (int) (short) 100, serializerFeatureArray21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charset0);
        org.junit.Assert.assertNotNull(serializeFilterArray4);
        org.junit.Assert.assertTrue("'" + serializerFeature5 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature5.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature6 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature6.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature7 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature7.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + serializerFeature8 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature8.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature9 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature9.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertNotNull(serializerFeatureArray10);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[39, 104, 105, 33, 39]");
        org.junit.Assert.assertNotNull(serializeFilterArray15);
        org.junit.Assert.assertTrue("'" + serializerFeature16 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature16.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature17 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature17.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature18 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature18.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + serializerFeature19 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature19.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature20 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature20.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertNotNull(serializerFeatureArray21);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[39, 104, 105, 33, 39]");
    }

    @Test
    public void test030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test030");
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature0 = com.alibaba.fastjson.serializer.SerializerFeature.WriteNullListAsEmpty;
        com.alibaba.fastjson.serializer.SerializeConfig serializeConfig1 = null;
        com.alibaba.fastjson.serializer.SerializeFilter serializeFilter2 = null;
        com.alibaba.fastjson.serializer.SerializeFilter[] serializeFilterArray3 = new com.alibaba.fastjson.serializer.SerializeFilter[] { serializeFilter2 };
        com.alibaba.fastjson.serializer.SerializerFeature[] serializerFeatureArray6 = new com.alibaba.fastjson.serializer.SerializerFeature[] {};
        byte[] byteArray7 = com.alibaba.fastjson.JSON.toJSONBytes((java.lang.Object) 10.0d, serializerFeatureArray6);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray8 = com.alibaba.fastjson.JSON.toJSONBytes((java.lang.Object) serializerFeature0, serializeConfig1, serializeFilterArray3, (int) ' ', serializerFeatureArray6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + serializerFeature0 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteNullListAsEmpty + "'", serializerFeature0.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteNullListAsEmpty));
        org.junit.Assert.assertNotNull(serializeFilterArray3);
        org.junit.Assert.assertNotNull(serializerFeatureArray6);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[49, 48, 46, 48]");
    }

    @Test
    public void test031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test031");
        java.util.TimeZone timeZone0 = null;
        com.alibaba.fastjson.JSON.defaultTimeZone = timeZone0;
    }

    @Test
    public void test032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test032");
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature0 = com.alibaba.fastjson.serializer.SerializerFeature.WriteBigDecimalAsPlain;
        org.junit.Assert.assertTrue("'" + serializerFeature0 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteBigDecimalAsPlain + "'", serializerFeature0.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteBigDecimalAsPlain));
    }

    @Test
    public void test033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test033");
        boolean boolean1 = com.alibaba.fastjson.util.IOUtils.firstIdentifier('a');
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
    }

    @Test
    public void test034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test034");
        java.io.InputStream inputStream0 = null;
        java.nio.charset.Charset charset1 = com.alibaba.fastjson.util.IOUtils.UTF8;
        java.lang.reflect.Type type2 = null;
        com.alibaba.fastjson.parser.ParserConfig parserConfig3 = null;
        com.alibaba.fastjson.parser.Feature[] featureArray4 = new com.alibaba.fastjson.parser.Feature[] {};
        // The following exception was thrown during execution in test generation
        try {
            com.alibaba.fastjson.JSON jSON5 = com.alibaba.fastjson.JSON.parseObject(inputStream0, charset1, type2, parserConfig3, featureArray4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertNotNull(featureArray4);
    }

    @Test
    public void test035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test035");
        java.io.OutputStream outputStream0 = null;
        java.nio.charset.Charset charset1 = null;
        com.alibaba.fastjson.serializer.SerializeFilter[] serializeFilterArray3 = new com.alibaba.fastjson.serializer.SerializeFilter[] {};
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature4 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature5 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature6 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature7 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature8 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature[] serializerFeatureArray9 = new com.alibaba.fastjson.serializer.SerializerFeature[] { serializerFeature4, serializerFeature5, serializerFeature6, serializerFeature7, serializerFeature8 };
        byte[] byteArray10 = com.alibaba.fastjson.JSON.toJSONBytes((java.lang.Object) "hi!", serializeFilterArray3, serializerFeatureArray9);
        com.alibaba.fastjson.serializer.SerializeConfig serializeConfig11 = null;
        com.alibaba.fastjson.serializer.SerializeFilter[] serializeFilterArray12 = new com.alibaba.fastjson.serializer.SerializeFilter[] {};
        com.alibaba.fastjson.serializer.SerializerFeature[] serializerFeatureArray16 = new com.alibaba.fastjson.serializer.SerializerFeature[] {};
        byte[] byteArray17 = com.alibaba.fastjson.JSON.toJSONBytes((java.lang.Object) 10.0d, serializerFeatureArray16);
        // The following exception was thrown during execution in test generation
        try {
            int int18 = com.alibaba.fastjson.JSON.writeJSONString(outputStream0, charset1, (java.lang.Object) serializeFilterArray3, serializeConfig11, serializeFilterArray12, "fastjson.serializer_buffer_threshold", (int) (byte) 100, serializerFeatureArray16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(serializeFilterArray3);
        org.junit.Assert.assertTrue("'" + serializerFeature4 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature4.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature5 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature5.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature6 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature6.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + serializerFeature7 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature7.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature8 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature8.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertNotNull(serializerFeatureArray9);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[39, 104, 105, 33, 39]");
        org.junit.Assert.assertNotNull(serializeFilterArray12);
        org.junit.Assert.assertNotNull(serializerFeatureArray16);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[49, 48, 46, 48]");
    }

    @Test
    public void test036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test036");
        int int0 = com.alibaba.fastjson.parser.DefaultJSONParser.NeedToResolve;
        org.junit.Assert.assertTrue("'" + int0 + "' != '" + 1 + "'", int0 == 1);
    }

    @Test
    public void test037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test037");
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature0 = com.alibaba.fastjson.serializer.SerializerFeature.DisableCircularReferenceDetect;
        org.junit.Assert.assertTrue("'" + serializerFeature0 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.DisableCircularReferenceDetect + "'", serializerFeature0.equals(com.alibaba.fastjson.serializer.SerializerFeature.DisableCircularReferenceDetect));
    }

    @Test
    public void test038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test038");
        com.alibaba.fastjson.serializer.SerializeConfig serializeConfig1 = null;
        com.alibaba.fastjson.serializer.SerializeFilter serializeFilter2 = null;
        com.alibaba.fastjson.serializer.SerializerFeature[] serializerFeatureArray3 = new com.alibaba.fastjson.serializer.SerializerFeature[] {};
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str4 = com.alibaba.fastjson.JSON.toJSONString((java.lang.Object) (-1.0d), serializeConfig1, serializeFilter2, serializerFeatureArray3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(serializerFeatureArray3);
    }

    @Test
    public void test039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test039");
        java.io.OutputStream outputStream0 = null;
        java.nio.charset.Charset charset1 = com.alibaba.fastjson.util.IOUtils.UTF8;
        com.alibaba.fastjson.serializer.SerializeFilter[] serializeFilterArray4 = new com.alibaba.fastjson.serializer.SerializeFilter[] {};
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature5 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature6 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature7 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature8 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature9 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature[] serializerFeatureArray10 = new com.alibaba.fastjson.serializer.SerializerFeature[] { serializerFeature5, serializerFeature6, serializerFeature7, serializerFeature8, serializerFeature9 };
        byte[] byteArray11 = com.alibaba.fastjson.JSON.toJSONBytes((java.lang.Object) "hi!", serializeFilterArray4, serializerFeatureArray10);
        // The following exception was thrown during execution in test generation
        try {
            int int12 = com.alibaba.fastjson.JSON.writeJSONString(outputStream0, charset1, (java.lang.Object) 100.0f, serializerFeatureArray10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertNotNull(serializeFilterArray4);
        org.junit.Assert.assertTrue("'" + serializerFeature5 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature5.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature6 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature6.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature7 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature7.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + serializerFeature8 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature8.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature9 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature9.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertNotNull(serializerFeatureArray10);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[39, 104, 105, 33, 39]");
    }

    @Test
    public void test040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test040");
        java.lang.String str0 = com.alibaba.fastjson.JSON.VERSION;
        org.junit.Assert.assertEquals("'" + str0 + "' != '" + "1.2.76" + "'", str0, "1.2.76");
    }

    @Test
    public void test041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test041");
        char[] charArray3 = new char[] { '#', '#', ' ' };
        byte[] byteArray6 = com.alibaba.fastjson.util.IOUtils.decodeBase64(charArray3, 10, (int) (byte) 0);
        java.nio.charset.CharsetDecoder charsetDecoder9 = null;
        java.lang.reflect.Type type10 = null;
        com.alibaba.fastjson.parser.Feature feature11 = null;
        com.alibaba.fastjson.parser.Feature[] featureArray12 = new com.alibaba.fastjson.parser.Feature[] { feature11 };
        // The following exception was thrown during execution in test generation
        try {
            java.lang.RuntimeException runtimeException13 = com.alibaba.fastjson.JSON.parseObject(byteArray6, (int) (byte) 100, (int) (byte) 100, charsetDecoder9, type10, featureArray12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray3), "## ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray3), "## ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray3), "[#, #,  ]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(featureArray12);
    }

    @Test
    public void test042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test042");
        com.alibaba.fastjson.serializer.SerializeFilter[] serializeFilterArray1 = new com.alibaba.fastjson.serializer.SerializeFilter[] {};
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature2 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature3 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature4 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature5 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature6 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature[] serializerFeatureArray7 = new com.alibaba.fastjson.serializer.SerializerFeature[] { serializerFeature2, serializerFeature3, serializerFeature4, serializerFeature5, serializerFeature6 };
        byte[] byteArray8 = com.alibaba.fastjson.JSON.toJSONBytes((java.lang.Object) "hi!", serializeFilterArray1, serializerFeatureArray7);
        java.lang.reflect.Type type9 = null;
        com.alibaba.fastjson.parser.Feature[] featureArray10 = new com.alibaba.fastjson.parser.Feature[] {};
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Throwable throwable11 = com.alibaba.fastjson.JSON.parseObject(byteArray8, type9, featureArray10);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson.JSONException; message: Feature.AllowSingleQuotes is false");
        } catch (com.alibaba.fastjson.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(serializeFilterArray1);
        org.junit.Assert.assertTrue("'" + serializerFeature2 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature2.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature3 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature3.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature4 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature4.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + serializerFeature5 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature5.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature6 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature6.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertNotNull(serializerFeatureArray7);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[39, 104, 105, 33, 39]");
        org.junit.Assert.assertNotNull(featureArray10);
    }

    @Test
    public void test043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test043");
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature0 = com.alibaba.fastjson.serializer.SerializerFeature.WriteNullStringAsEmpty;
        org.junit.Assert.assertTrue("'" + serializerFeature0 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteNullStringAsEmpty + "'", serializerFeature0.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteNullStringAsEmpty));
    }

    @Test
    public void test044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test044");
        com.alibaba.fastjson.JSONObject jSONObject1 = new com.alibaba.fastjson.JSONObject(0);
        java.lang.reflect.Type type3 = null;
        java.lang.RuntimeException runtimeException4 = jSONObject1.getObject("true", type3);
        org.junit.Assert.assertNull(runtimeException4);
    }

    @Test
    public void test045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test045");
        com.alibaba.fastjson.serializer.SerializeConfig serializeConfig1 = null;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature3 = com.alibaba.fastjson.serializer.SerializerFeature.WriteNullStringAsEmpty;
        com.alibaba.fastjson.serializer.SerializerFeature[] serializerFeatureArray4 = new com.alibaba.fastjson.serializer.SerializerFeature[] { serializerFeature3 };
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray5 = com.alibaba.fastjson.JSON.toJSONBytes((java.lang.Object) 'a', serializeConfig1, (int) (short) 100, serializerFeatureArray4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + serializerFeature3 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteNullStringAsEmpty + "'", serializerFeature3.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteNullStringAsEmpty));
        org.junit.Assert.assertNotNull(serializerFeatureArray4);
    }

    @Test
    public void test046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test046");
        boolean boolean1 = com.alibaba.fastjson.JSON.isValidArray("'Negative initial size:'");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test047");
        java.io.OutputStream outputStream0 = null;
        com.alibaba.fastjson.serializer.SerializeFilter[] serializeFilterArray2 = new com.alibaba.fastjson.serializer.SerializeFilter[] {};
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature3 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature4 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature5 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature6 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature7 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature[] serializerFeatureArray8 = new com.alibaba.fastjson.serializer.SerializerFeature[] { serializerFeature3, serializerFeature4, serializerFeature5, serializerFeature6, serializerFeature7 };
        byte[] byteArray9 = com.alibaba.fastjson.JSON.toJSONBytes((java.lang.Object) "hi!", serializeFilterArray2, serializerFeatureArray8);
        java.nio.charset.Charset charset12 = com.alibaba.fastjson.util.IOUtils.UTF8;
        java.lang.reflect.Type type13 = null;
        byte[] byteArray20 = new byte[] { (byte) 10, (byte) -1, (byte) 100, (byte) 10, (byte) 10, (byte) 1 };
        java.lang.reflect.Type type21 = null;
        com.alibaba.fastjson.parser.Feature feature22 = null;
        com.alibaba.fastjson.parser.Feature[] featureArray23 = new com.alibaba.fastjson.parser.Feature[] { feature22 };
        java.lang.Comparable<java.lang.String> strComparable24 = com.alibaba.fastjson.JSON.parseObject(byteArray20, type21, featureArray23);
        java.nio.charset.Charset charset25 = com.alibaba.fastjson.JSON.parseObject(byteArray9, 3089, (int) (short) -1, charset12, type13, featureArray23);
        com.alibaba.fastjson.serializer.SerializeConfig serializeConfig27 = null;
        com.alibaba.fastjson.serializer.SerializeFilter[] serializeFilterArray29 = new com.alibaba.fastjson.serializer.SerializeFilter[] {};
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature30 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature31 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature32 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature33 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature34 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature[] serializerFeatureArray35 = new com.alibaba.fastjson.serializer.SerializerFeature[] { serializerFeature30, serializerFeature31, serializerFeature32, serializerFeature33, serializerFeature34 };
        byte[] byteArray36 = com.alibaba.fastjson.JSON.toJSONBytes((java.lang.Object) "hi!", serializeFilterArray29, serializerFeatureArray35);
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature39 = com.alibaba.fastjson.serializer.SerializerFeature.WriteMapNullValue;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature40 = com.alibaba.fastjson.serializer.SerializerFeature.WriteTabAsSpecial;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature41 = com.alibaba.fastjson.serializer.SerializerFeature.DisableCircularReferenceDetect;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature42 = com.alibaba.fastjson.serializer.SerializerFeature.SkipTransientField;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature43 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature44 = com.alibaba.fastjson.serializer.SerializerFeature.WriteBigDecimalAsPlain;
        com.alibaba.fastjson.serializer.SerializerFeature[] serializerFeatureArray45 = new com.alibaba.fastjson.serializer.SerializerFeature[] { serializerFeature40, serializerFeature41, serializerFeature42, serializerFeature43, serializerFeature44 };
        java.lang.String str46 = com.alibaba.fastjson.JSON.toJSONString((java.lang.Object) serializerFeature39, serializerFeatureArray45);
        // The following exception was thrown during execution in test generation
        try {
            int int47 = com.alibaba.fastjson.JSON.writeJSONString(outputStream0, charset25, (java.lang.Object) (-1L), serializeConfig27, serializeFilterArray29, "serialize exceeded MAX_OUTPUT_LENGTH=", (int) (short) 100, serializerFeatureArray45);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(serializeFilterArray2);
        org.junit.Assert.assertTrue("'" + serializerFeature3 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature3.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature4 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature4.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature5 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature5.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + serializerFeature6 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature6.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature7 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature7.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertNotNull(serializerFeatureArray8);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[39, 104, 105, 33, 39]");
        org.junit.Assert.assertNotNull(charset12);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[10, -1, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(featureArray23);
        org.junit.Assert.assertNull(strComparable24);
        org.junit.Assert.assertNull(charset25);
        org.junit.Assert.assertNotNull(serializeFilterArray29);
        org.junit.Assert.assertTrue("'" + serializerFeature30 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature30.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature31 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature31.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature32 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature32.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + serializerFeature33 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature33.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature34 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature34.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertNotNull(serializerFeatureArray35);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[39, 104, 105, 33, 39]");
        org.junit.Assert.assertTrue("'" + serializerFeature39 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteMapNullValue + "'", serializerFeature39.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteMapNullValue));
        org.junit.Assert.assertTrue("'" + serializerFeature40 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteTabAsSpecial + "'", serializerFeature40.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteTabAsSpecial));
        org.junit.Assert.assertTrue("'" + serializerFeature41 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.DisableCircularReferenceDetect + "'", serializerFeature41.equals(com.alibaba.fastjson.serializer.SerializerFeature.DisableCircularReferenceDetect));
        org.junit.Assert.assertTrue("'" + serializerFeature42 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.SkipTransientField + "'", serializerFeature42.equals(com.alibaba.fastjson.serializer.SerializerFeature.SkipTransientField));
        org.junit.Assert.assertTrue("'" + serializerFeature43 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature43.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + serializerFeature44 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteBigDecimalAsPlain + "'", serializerFeature44.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteBigDecimalAsPlain));
        org.junit.Assert.assertNotNull(serializerFeatureArray45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "'WriteMapNullValue'" + "'", str46, "'WriteMapNullValue'");
    }

    @Test
    public void test048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test048");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj2 = com.alibaba.fastjson.JSON.parse("Negative initial size:", (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson.JSONException; message: syntax error, pos 8, line 1, column 9Negative initial size:");
        } catch (com.alibaba.fastjson.JSONException e) {
            // Expected exception.
        }
    }

    @Test
    public void test049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test049");
        java.lang.Object obj1 = com.alibaba.fastjson.JSON.parse("");
        org.junit.Assert.assertNull(obj1);
    }

    @Test
    public void test050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test050");
        com.alibaba.fastjson.JSON.setDefaultTypeKey("'Negative initial size:'");
    }

    @Test
    public void test051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test051");
        int int0 = com.alibaba.fastjson.parser.DefaultJSONParser.NONE;
        org.junit.Assert.assertTrue("'" + int0 + "' != '" + 0 + "'", int0 == 0);
    }

    @Test
    public void test052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test052");
        com.alibaba.fastjson.parser.JSONLexer jSONLexer0 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.alibaba.fastjson.parser.DefaultJSONParser defaultJSONParser1 = new com.alibaba.fastjson.parser.DefaultJSONParser(jSONLexer0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test053");
        java.lang.String str0 = com.alibaba.fastjson.JSON.DEFFAULT_DATE_FORMAT;
        org.junit.Assert.assertEquals("'" + str0 + "' != '" + "yyyy-MM-dd HH:mm:ss" + "'", str0, "yyyy-MM-dd HH:mm:ss");
    }

    @Test
    public void test054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test054");
        com.alibaba.fastjson.serializer.SerializeConfig serializeConfig1 = null;
        com.alibaba.fastjson.serializer.SerializerFeature[] serializerFeatureArray3 = null;
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray4 = com.alibaba.fastjson.JSON.toJSONBytes((java.lang.Object) (byte) 1, serializeConfig1, (int) (byte) 0, serializerFeatureArray3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test055");
        java.nio.charset.Charset charset0 = com.alibaba.fastjson.util.IOUtils.UTF8;
        com.alibaba.fastjson.serializer.SerializeConfig serializeConfig2 = null;
        com.alibaba.fastjson.serializer.SerializeFilter[] serializeFilterArray4 = new com.alibaba.fastjson.serializer.SerializeFilter[] {};
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature5 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature6 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature7 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature8 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature9 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature[] serializerFeatureArray10 = new com.alibaba.fastjson.serializer.SerializerFeature[] { serializerFeature5, serializerFeature6, serializerFeature7, serializerFeature8, serializerFeature9 };
        byte[] byteArray11 = com.alibaba.fastjson.JSON.toJSONBytes((java.lang.Object) "hi!", serializeFilterArray4, serializerFeatureArray10);
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature14 = com.alibaba.fastjson.serializer.SerializerFeature.WriteTabAsSpecial;
        com.alibaba.fastjson.serializer.SerializeFilter[] serializeFilterArray16 = new com.alibaba.fastjson.serializer.SerializeFilter[] {};
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature17 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature18 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature19 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature20 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature21 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature[] serializerFeatureArray22 = new com.alibaba.fastjson.serializer.SerializerFeature[] { serializerFeature17, serializerFeature18, serializerFeature19, serializerFeature20, serializerFeature21 };
        byte[] byteArray23 = com.alibaba.fastjson.JSON.toJSONBytes((java.lang.Object) "hi!", serializeFilterArray16, serializerFeatureArray22);
        com.alibaba.fastjson.serializer.SerializeFilter[] serializeFilterArray25 = new com.alibaba.fastjson.serializer.SerializeFilter[] {};
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature26 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature27 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature28 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature29 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature30 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature[] serializerFeatureArray31 = new com.alibaba.fastjson.serializer.SerializerFeature[] { serializerFeature26, serializerFeature27, serializerFeature28, serializerFeature29, serializerFeature30 };
        byte[] byteArray32 = com.alibaba.fastjson.JSON.toJSONBytes((java.lang.Object) "hi!", serializeFilterArray25, serializerFeatureArray31);
        java.lang.String str33 = com.alibaba.fastjson.JSON.toJSONString((java.lang.Object) serializerFeature14, serializeFilterArray16, serializerFeatureArray31);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray34 = com.alibaba.fastjson.JSON.toJSONBytes(charset0, (java.lang.Object) "UTF-8", serializeConfig2, serializeFilterArray4, "0.0", (int) (short) -1, serializerFeatureArray31);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charset0);
        org.junit.Assert.assertNotNull(serializeFilterArray4);
        org.junit.Assert.assertTrue("'" + serializerFeature5 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature5.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature6 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature6.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature7 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature7.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + serializerFeature8 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature8.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature9 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature9.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertNotNull(serializerFeatureArray10);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[39, 104, 105, 33, 39]");
        org.junit.Assert.assertTrue("'" + serializerFeature14 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteTabAsSpecial + "'", serializerFeature14.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteTabAsSpecial));
        org.junit.Assert.assertNotNull(serializeFilterArray16);
        org.junit.Assert.assertTrue("'" + serializerFeature17 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature17.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature18 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature18.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature19 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature19.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + serializerFeature20 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature20.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature21 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature21.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertNotNull(serializerFeatureArray22);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[39, 104, 105, 33, 39]");
        org.junit.Assert.assertNotNull(serializeFilterArray25);
        org.junit.Assert.assertTrue("'" + serializerFeature26 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature26.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature27 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature27.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature28 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature28.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + serializerFeature29 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature29.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature30 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature30.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertNotNull(serializerFeatureArray31);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[39, 104, 105, 33, 39]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "'WriteTabAsSpecial'" + "'", str33, "'WriteTabAsSpecial'");
    }

    @Test
    public void test056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test056");
        com.alibaba.fastjson.serializer.SerializeFilter[] serializeFilterArray1 = new com.alibaba.fastjson.serializer.SerializeFilter[] {};
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature2 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature3 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature4 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature5 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature6 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature[] serializerFeatureArray7 = new com.alibaba.fastjson.serializer.SerializerFeature[] { serializerFeature2, serializerFeature3, serializerFeature4, serializerFeature5, serializerFeature6 };
        byte[] byteArray8 = com.alibaba.fastjson.JSON.toJSONBytes((java.lang.Object) "hi!", serializeFilterArray1, serializerFeatureArray7);
        com.alibaba.fastjson.parser.JSONLexer jSONLexer9 = null;
        com.alibaba.fastjson.parser.ParserConfig parserConfig10 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.alibaba.fastjson.parser.DefaultJSONParser defaultJSONParser11 = new com.alibaba.fastjson.parser.DefaultJSONParser((java.lang.Object) "hi!", jSONLexer9, parserConfig10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(serializeFilterArray1);
        org.junit.Assert.assertTrue("'" + serializerFeature2 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature2.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature3 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature3.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature4 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature4.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + serializerFeature5 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature5.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature6 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature6.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertNotNull(serializerFeatureArray7);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[39, 104, 105, 33, 39]");
    }

    @Test
    public void test057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test057");
        char[] charArray5 = new char[] { '#', '#', ' ' };
        byte[] byteArray8 = com.alibaba.fastjson.util.IOUtils.decodeBase64(charArray5, 10, (int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            com.alibaba.fastjson.util.IOUtils.getChars(0L, (int) (byte) -1, charArray5);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "## ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "## ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[#, #,  ]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
    }

    @Test
    public void test058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test058");
        com.alibaba.fastjson.JSONObject jSONObject1 = new com.alibaba.fastjson.JSONObject(0);
        boolean boolean3 = jSONObject1.equals((java.lang.Object) (byte) 10);
        java.lang.Integer int5 = jSONObject1.getInteger("hi!");
        boolean boolean7 = jSONObject1.getBooleanValue("-9223372036854775808");
        boolean boolean9 = jSONObject1.containsValue((java.lang.Object) (-1));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(int5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test059");
        boolean[] booleanArray0 = com.alibaba.fastjson.util.IOUtils.identifierFlags;
        org.junit.Assert.assertNotNull(booleanArray0);
    }

    @Test
    public void test060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test060");
        java.nio.charset.Charset charset0 = com.alibaba.fastjson.util.IOUtils.UTF8;
        com.alibaba.fastjson.serializer.SerializeConfig serializeConfig2 = null;
        com.alibaba.fastjson.serializer.SerializeFilter[] serializeFilterArray3 = new com.alibaba.fastjson.serializer.SerializeFilter[] {};
        com.alibaba.fastjson.JSONObject jSONObject7 = new com.alibaba.fastjson.JSONObject(0);
        boolean boolean9 = jSONObject7.equals((java.lang.Object) (byte) 10);
        java.util.Set<java.util.Map.Entry<java.lang.String, java.lang.Object>> strEntrySet10 = jSONObject7.entrySet();
        com.alibaba.fastjson.serializer.SerializeFilter[] serializeFilterArray13 = new com.alibaba.fastjson.serializer.SerializeFilter[] {};
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature14 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature15 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature16 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature17 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature18 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature[] serializerFeatureArray19 = new com.alibaba.fastjson.serializer.SerializerFeature[] { serializerFeature14, serializerFeature15, serializerFeature16, serializerFeature17, serializerFeature18 };
        byte[] byteArray20 = com.alibaba.fastjson.JSON.toJSONBytes((java.lang.Object) "hi!", serializeFilterArray13, serializerFeatureArray19);
        java.lang.String str21 = com.alibaba.fastjson.JSON.toJSONStringWithDateFormat((java.lang.Object) jSONObject7, "null", serializerFeatureArray19);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray22 = com.alibaba.fastjson.JSON.toJSONBytesWithFastJsonConfig(charset0, (java.lang.Object) '4', serializeConfig2, serializeFilterArray3, "''", 0, serializerFeatureArray19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charset0);
        org.junit.Assert.assertNotNull(serializeFilterArray3);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(strEntrySet10);
        org.junit.Assert.assertNotNull(serializeFilterArray13);
        org.junit.Assert.assertTrue("'" + serializerFeature14 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature14.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature15 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature15.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature16 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature16.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + serializerFeature17 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature17.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature18 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature18.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertNotNull(serializerFeatureArray19);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[39, 104, 105, 33, 39]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "{}" + "'", str21, "{}");
    }

    @Test
    public void test061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test061");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type type1 = null;
        com.alibaba.fastjson.JSON.addMixInAnnotations(type0, type1);
    }

    @Test
    public void test062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test062");
        com.alibaba.fastjson.JSONObject jSONObject1 = com.alibaba.fastjson.JSON.parseObject("");
        org.junit.Assert.assertNull(jSONObject1);
    }

    @Test
    public void test063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test063");
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature0 = com.alibaba.fastjson.serializer.SerializerFeature.WriteNonStringKeyAsString;
        org.junit.Assert.assertTrue("'" + serializerFeature0 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteNonStringKeyAsString + "'", serializerFeature0.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteNonStringKeyAsString));
    }

    @Test
    public void test064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test064");
        java.io.OutputStream outputStream0 = null;
        java.nio.charset.Charset charset1 = com.alibaba.fastjson.util.IOUtils.UTF8;
        com.alibaba.fastjson.JSONObject jSONObject3 = new com.alibaba.fastjson.JSONObject(0);
        boolean boolean5 = jSONObject3.equals((java.lang.Object) (byte) 10);
        java.util.Set<java.util.Map.Entry<java.lang.String, java.lang.Object>> strEntrySet6 = jSONObject3.entrySet();
        com.alibaba.fastjson.serializer.SerializeFilter[] serializeFilterArray9 = new com.alibaba.fastjson.serializer.SerializeFilter[] {};
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature10 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature11 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature12 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature13 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature14 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature[] serializerFeatureArray15 = new com.alibaba.fastjson.serializer.SerializerFeature[] { serializerFeature10, serializerFeature11, serializerFeature12, serializerFeature13, serializerFeature14 };
        byte[] byteArray16 = com.alibaba.fastjson.JSON.toJSONBytes((java.lang.Object) "hi!", serializeFilterArray9, serializerFeatureArray15);
        java.lang.String str17 = com.alibaba.fastjson.JSON.toJSONStringWithDateFormat((java.lang.Object) jSONObject3, "null", serializerFeatureArray15);
        com.alibaba.fastjson.serializer.SerializeFilter[] serializeFilterArray19 = new com.alibaba.fastjson.serializer.SerializeFilter[] {};
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature20 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature21 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature22 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature23 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature24 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature[] serializerFeatureArray25 = new com.alibaba.fastjson.serializer.SerializerFeature[] { serializerFeature20, serializerFeature21, serializerFeature22, serializerFeature23, serializerFeature24 };
        byte[] byteArray26 = com.alibaba.fastjson.JSON.toJSONBytes((java.lang.Object) "hi!", serializeFilterArray19, serializerFeatureArray25);
        java.nio.charset.Charset charset29 = com.alibaba.fastjson.util.IOUtils.UTF8;
        java.lang.reflect.Type type30 = null;
        byte[] byteArray37 = new byte[] { (byte) 10, (byte) -1, (byte) 100, (byte) 10, (byte) 10, (byte) 1 };
        java.lang.reflect.Type type38 = null;
        com.alibaba.fastjson.parser.Feature feature39 = null;
        com.alibaba.fastjson.parser.Feature[] featureArray40 = new com.alibaba.fastjson.parser.Feature[] { feature39 };
        java.lang.Comparable<java.lang.String> strComparable41 = com.alibaba.fastjson.JSON.parseObject(byteArray37, type38, featureArray40);
        java.nio.charset.Charset charset42 = com.alibaba.fastjson.JSON.parseObject(byteArray26, 3089, (int) (short) -1, charset29, type30, featureArray40);
        com.alibaba.fastjson.serializer.SerializerFeature[] serializerFeatureArray44 = new com.alibaba.fastjson.serializer.SerializerFeature[] {};
        byte[] byteArray45 = com.alibaba.fastjson.JSON.toJSONBytes((java.lang.Object) 10.0d, serializerFeatureArray44);
        byte[] byteArray46 = com.alibaba.fastjson.JSON.toJSONBytes((java.lang.Object) featureArray40, serializerFeatureArray44);
        // The following exception was thrown during execution in test generation
        try {
            int int47 = com.alibaba.fastjson.JSON.writeJSONString(outputStream0, charset1, (java.lang.Object) str17, serializerFeatureArray44);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(strEntrySet6);
        org.junit.Assert.assertNotNull(serializeFilterArray9);
        org.junit.Assert.assertTrue("'" + serializerFeature10 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature10.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature11 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature11.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature12 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature12.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + serializerFeature13 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature13.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature14 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature14.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertNotNull(serializerFeatureArray15);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[39, 104, 105, 33, 39]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "{}" + "'", str17, "{}");
        org.junit.Assert.assertNotNull(serializeFilterArray19);
        org.junit.Assert.assertTrue("'" + serializerFeature20 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature20.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature21 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature21.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature22 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature22.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + serializerFeature23 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature23.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature24 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature24.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertNotNull(serializerFeatureArray25);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[39, 104, 105, 33, 39]");
        org.junit.Assert.assertNotNull(charset29);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[10, -1, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(featureArray40);
        org.junit.Assert.assertNull(strComparable41);
        org.junit.Assert.assertNull(charset42);
        org.junit.Assert.assertNotNull(serializerFeatureArray44);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[49, 48, 46, 48]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[91, 110, 117, 108, 108, 93]");
    }

    @Test
    public void test065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test065");
        java.lang.String str0 = com.alibaba.fastjson.util.IOUtils.FASTJSON_COMPATIBLEWITHFIELDNAME;
        org.junit.Assert.assertEquals("'" + str0 + "' != '" + "fastjson.compatibleWithFieldName" + "'", str0, "fastjson.compatibleWithFieldName");
    }

    @Test
    public void test066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test066");
        java.lang.reflect.Type type0 = null;
        com.alibaba.fastjson.JSON.removeMixInAnnotations(type0);
    }

    @Test
    public void test067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test067");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj2 = com.alibaba.fastjson.JSON.parse(":false", (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson.JSONException; message: syntax error, pos 1, line 1, column 2:false");
        } catch (com.alibaba.fastjson.JSONException e) {
            // Expected exception.
        }
    }

    @Test
    public void test068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test068");
        java.lang.String str0 = com.alibaba.fastjson.util.IOUtils.FASTJSON_COMPATIBLEWITHJAVABEAN;
        org.junit.Assert.assertEquals("'" + str0 + "' != '" + "fastjson.compatibleWithJavaBean" + "'", str0, "fastjson.compatibleWithJavaBean");
    }

    @Test
    public void test069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test069");
        java.lang.String str1 = com.alibaba.fastjson.util.IOUtils.getStringProperty("[]");
        org.junit.Assert.assertNull(str1);
    }

    @Test
    public void test070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test070");
        com.alibaba.fastjson.parser.ParserConfig parserConfig1 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.alibaba.fastjson.JSONArray jSONArray2 = com.alibaba.fastjson.JSON.parseArray("@type", parserConfig1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test071");
        com.alibaba.fastjson.serializer.SerializeConfig serializeConfig1 = null;
        com.alibaba.fastjson.serializer.SerializeFilter serializeFilter2 = null;
        com.alibaba.fastjson.serializer.SerializeFilter[] serializeFilterArray4 = new com.alibaba.fastjson.serializer.SerializeFilter[] {};
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature5 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature6 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature7 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature8 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature9 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature[] serializerFeatureArray10 = new com.alibaba.fastjson.serializer.SerializerFeature[] { serializerFeature5, serializerFeature6, serializerFeature7, serializerFeature8, serializerFeature9 };
        byte[] byteArray11 = com.alibaba.fastjson.JSON.toJSONBytes((java.lang.Object) "hi!", serializeFilterArray4, serializerFeatureArray10);
        java.nio.charset.Charset charset14 = com.alibaba.fastjson.util.IOUtils.UTF8;
        java.lang.reflect.Type type15 = null;
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) -1, (byte) 100, (byte) 10, (byte) 10, (byte) 1 };
        java.lang.reflect.Type type23 = null;
        com.alibaba.fastjson.parser.Feature feature24 = null;
        com.alibaba.fastjson.parser.Feature[] featureArray25 = new com.alibaba.fastjson.parser.Feature[] { feature24 };
        java.lang.Comparable<java.lang.String> strComparable26 = com.alibaba.fastjson.JSON.parseObject(byteArray22, type23, featureArray25);
        java.nio.charset.Charset charset27 = com.alibaba.fastjson.JSON.parseObject(byteArray11, 3089, (int) (short) -1, charset14, type15, featureArray25);
        com.alibaba.fastjson.serializer.SerializerFeature[] serializerFeatureArray29 = new com.alibaba.fastjson.serializer.SerializerFeature[] {};
        byte[] byteArray30 = com.alibaba.fastjson.JSON.toJSONBytes((java.lang.Object) 10.0d, serializerFeatureArray29);
        byte[] byteArray31 = com.alibaba.fastjson.JSON.toJSONBytes((java.lang.Object) featureArray25, serializerFeatureArray29);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str32 = com.alibaba.fastjson.JSON.toJSONString((java.lang.Object) "''", serializeConfig1, serializeFilter2, serializerFeatureArray29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(serializeFilterArray4);
        org.junit.Assert.assertTrue("'" + serializerFeature5 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature5.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature6 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature6.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature7 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature7.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + serializerFeature8 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature8.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature9 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature9.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertNotNull(serializerFeatureArray10);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[39, 104, 105, 33, 39]");
        org.junit.Assert.assertNotNull(charset14);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[10, -1, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(featureArray25);
        org.junit.Assert.assertNull(strComparable26);
        org.junit.Assert.assertNull(charset27);
        org.junit.Assert.assertNotNull(serializerFeatureArray29);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[49, 48, 46, 48]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[91, 110, 117, 108, 108, 93]");
    }

    @Test
    public void test072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test072");
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature0 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserCompatible;
        org.junit.Assert.assertTrue("'" + serializerFeature0 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserCompatible + "'", serializerFeature0.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserCompatible));
    }

    @Test
    public void test073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test073");
        boolean boolean1 = com.alibaba.fastjson.JSON.isValidObject("'WriteMapNullValue'");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test074");
        com.alibaba.fastjson.serializer.SerializeConfig serializeConfig1 = null;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature2 = com.alibaba.fastjson.serializer.SerializerFeature.WriteTabAsSpecial;
        com.alibaba.fastjson.serializer.SerializeFilter[] serializeFilterArray4 = new com.alibaba.fastjson.serializer.SerializeFilter[] {};
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature5 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature6 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature7 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature8 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature9 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature[] serializerFeatureArray10 = new com.alibaba.fastjson.serializer.SerializerFeature[] { serializerFeature5, serializerFeature6, serializerFeature7, serializerFeature8, serializerFeature9 };
        byte[] byteArray11 = com.alibaba.fastjson.JSON.toJSONBytes((java.lang.Object) "hi!", serializeFilterArray4, serializerFeatureArray10);
        com.alibaba.fastjson.serializer.SerializeFilter[] serializeFilterArray13 = new com.alibaba.fastjson.serializer.SerializeFilter[] {};
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature14 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature15 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature16 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature17 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature18 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature[] serializerFeatureArray19 = new com.alibaba.fastjson.serializer.SerializerFeature[] { serializerFeature14, serializerFeature15, serializerFeature16, serializerFeature17, serializerFeature18 };
        byte[] byteArray20 = com.alibaba.fastjson.JSON.toJSONBytes((java.lang.Object) "hi!", serializeFilterArray13, serializerFeatureArray19);
        java.lang.String str21 = com.alibaba.fastjson.JSON.toJSONString((java.lang.Object) serializerFeature2, serializeFilterArray4, serializerFeatureArray19);
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature23 = com.alibaba.fastjson.serializer.SerializerFeature.WriteTabAsSpecial;
        com.alibaba.fastjson.serializer.SerializeFilter[] serializeFilterArray25 = new com.alibaba.fastjson.serializer.SerializeFilter[] {};
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature26 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature27 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature28 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature29 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature30 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature[] serializerFeatureArray31 = new com.alibaba.fastjson.serializer.SerializerFeature[] { serializerFeature26, serializerFeature27, serializerFeature28, serializerFeature29, serializerFeature30 };
        byte[] byteArray32 = com.alibaba.fastjson.JSON.toJSONBytes((java.lang.Object) "hi!", serializeFilterArray25, serializerFeatureArray31);
        com.alibaba.fastjson.serializer.SerializeFilter[] serializeFilterArray34 = new com.alibaba.fastjson.serializer.SerializeFilter[] {};
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature35 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature36 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature37 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature38 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature39 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature[] serializerFeatureArray40 = new com.alibaba.fastjson.serializer.SerializerFeature[] { serializerFeature35, serializerFeature36, serializerFeature37, serializerFeature38, serializerFeature39 };
        byte[] byteArray41 = com.alibaba.fastjson.JSON.toJSONBytes((java.lang.Object) "hi!", serializeFilterArray34, serializerFeatureArray40);
        java.lang.String str42 = com.alibaba.fastjson.JSON.toJSONString((java.lang.Object) serializerFeature23, serializeFilterArray25, serializerFeatureArray40);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray43 = com.alibaba.fastjson.JSON.toJSONBytes((java.lang.Object) "@type", serializeConfig1, serializeFilterArray4, (int) (byte) 0, serializerFeatureArray40);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + serializerFeature2 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteTabAsSpecial + "'", serializerFeature2.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteTabAsSpecial));
        org.junit.Assert.assertNotNull(serializeFilterArray4);
        org.junit.Assert.assertTrue("'" + serializerFeature5 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature5.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature6 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature6.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature7 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature7.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + serializerFeature8 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature8.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature9 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature9.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertNotNull(serializerFeatureArray10);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[39, 104, 105, 33, 39]");
        org.junit.Assert.assertNotNull(serializeFilterArray13);
        org.junit.Assert.assertTrue("'" + serializerFeature14 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature14.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature15 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature15.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature16 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature16.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + serializerFeature17 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature17.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature18 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature18.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertNotNull(serializerFeatureArray19);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[39, 104, 105, 33, 39]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "'WriteTabAsSpecial'" + "'", str21, "'WriteTabAsSpecial'");
        org.junit.Assert.assertTrue("'" + serializerFeature23 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteTabAsSpecial + "'", serializerFeature23.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteTabAsSpecial));
        org.junit.Assert.assertNotNull(serializeFilterArray25);
        org.junit.Assert.assertTrue("'" + serializerFeature26 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature26.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature27 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature27.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature28 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature28.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + serializerFeature29 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature29.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature30 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature30.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertNotNull(serializerFeatureArray31);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[39, 104, 105, 33, 39]");
        org.junit.Assert.assertNotNull(serializeFilterArray34);
        org.junit.Assert.assertTrue("'" + serializerFeature35 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature35.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature36 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature36.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature37 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature37.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + serializerFeature38 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature38.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature39 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature39.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertNotNull(serializerFeatureArray40);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[39, 104, 105, 33, 39]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "'WriteTabAsSpecial'" + "'", str42, "'WriteTabAsSpecial'");
    }

    @Test
    public void test075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test075");
        java.io.Writer writer0 = null;
        com.alibaba.fastjson.serializer.SerializeWriter serializeWriter2 = new com.alibaba.fastjson.serializer.SerializeWriter(writer0, 10);
        serializeWriter2.write((int) (byte) -1);
        com.alibaba.fastjson.serializer.SerializeWriter serializeWriter6 = serializeWriter2.append('a');
        serializeWriter6.expandCapacity(100);
        org.junit.Assert.assertNotNull(serializeWriter6);
    }

    @Test
    public void test076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test076");
        boolean boolean1 = com.alibaba.fastjson.JSON.isValidArray("''");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test077");
        // The following exception was thrown during execution in test generation
        try {
            com.alibaba.fastjson.JSONObject jSONObject1 = com.alibaba.fastjson.JSON.parseObject("true");
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson.JSONException; message: can not cast to JSONObject.");
        } catch (com.alibaba.fastjson.JSONException e) {
            // Expected exception.
        }
    }

    @Test
    public void test078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test078");
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature0 = com.alibaba.fastjson.serializer.SerializerFeature.WriteNonStringValueAsString;
        org.junit.Assert.assertTrue("'" + serializerFeature0 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteNonStringValueAsString + "'", serializerFeature0.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteNonStringValueAsString));
    }

    @Test
    public void test079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test079");
        java.io.Writer writer0 = null;
        com.alibaba.fastjson.serializer.SerializeWriter serializeWriter2 = new com.alibaba.fastjson.serializer.SerializeWriter(writer0, 10);
        serializeWriter2.writeStringWithDoubleQuote("'WriteTabAsSpecial'", '4');
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature6 = com.alibaba.fastjson.serializer.SerializerFeature.WriteTabAsSpecial;
        com.alibaba.fastjson.serializer.SerializeFilter[] serializeFilterArray8 = new com.alibaba.fastjson.serializer.SerializeFilter[] {};
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature9 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature10 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature11 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature12 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature13 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature[] serializerFeatureArray14 = new com.alibaba.fastjson.serializer.SerializerFeature[] { serializerFeature9, serializerFeature10, serializerFeature11, serializerFeature12, serializerFeature13 };
        byte[] byteArray15 = com.alibaba.fastjson.JSON.toJSONBytes((java.lang.Object) "hi!", serializeFilterArray8, serializerFeatureArray14);
        com.alibaba.fastjson.serializer.SerializeFilter[] serializeFilterArray17 = new com.alibaba.fastjson.serializer.SerializeFilter[] {};
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature18 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature19 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature20 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature21 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature22 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature[] serializerFeatureArray23 = new com.alibaba.fastjson.serializer.SerializerFeature[] { serializerFeature18, serializerFeature19, serializerFeature20, serializerFeature21, serializerFeature22 };
        byte[] byteArray24 = com.alibaba.fastjson.JSON.toJSONBytes((java.lang.Object) "hi!", serializeFilterArray17, serializerFeatureArray23);
        java.lang.String str25 = com.alibaba.fastjson.JSON.toJSONString((java.lang.Object) serializerFeature6, serializeFilterArray8, serializerFeatureArray23);
        com.alibaba.fastjson.serializer.SerializeWriter serializeWriter26 = new com.alibaba.fastjson.serializer.SerializeWriter((java.io.Writer) serializeWriter2, serializerFeatureArray23);
        com.alibaba.fastjson.serializer.SerializeWriter serializeWriter27 = new com.alibaba.fastjson.serializer.SerializeWriter(serializerFeatureArray23);
        org.junit.Assert.assertTrue("'" + serializerFeature6 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteTabAsSpecial + "'", serializerFeature6.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteTabAsSpecial));
        org.junit.Assert.assertNotNull(serializeFilterArray8);
        org.junit.Assert.assertTrue("'" + serializerFeature9 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature9.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature10 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature10.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature11 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature11.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + serializerFeature12 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature12.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature13 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature13.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertNotNull(serializerFeatureArray14);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[39, 104, 105, 33, 39]");
        org.junit.Assert.assertNotNull(serializeFilterArray17);
        org.junit.Assert.assertTrue("'" + serializerFeature18 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature18.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature19 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature19.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature20 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature20.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + serializerFeature21 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature21.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature22 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature22.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertNotNull(serializerFeatureArray23);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[39, 104, 105, 33, 39]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "'WriteTabAsSpecial'" + "'", str25, "'WriteTabAsSpecial'");
    }

    @Test
    public void test080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test080");
        boolean boolean1 = com.alibaba.fastjson.JSON.isValidArray("UTF-8");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test081");
        java.io.OutputStream outputStream0 = null;
        com.alibaba.fastjson.serializer.SerializeFilter[] serializeFilterArray2 = new com.alibaba.fastjson.serializer.SerializeFilter[] {};
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature3 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature4 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature5 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature6 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature7 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature[] serializerFeatureArray8 = new com.alibaba.fastjson.serializer.SerializerFeature[] { serializerFeature3, serializerFeature4, serializerFeature5, serializerFeature6, serializerFeature7 };
        byte[] byteArray9 = com.alibaba.fastjson.JSON.toJSONBytes((java.lang.Object) "hi!", serializeFilterArray2, serializerFeatureArray8);
        java.nio.charset.Charset charset12 = com.alibaba.fastjson.util.IOUtils.UTF8;
        java.lang.reflect.Type type13 = null;
        byte[] byteArray20 = new byte[] { (byte) 10, (byte) -1, (byte) 100, (byte) 10, (byte) 10, (byte) 1 };
        java.lang.reflect.Type type21 = null;
        com.alibaba.fastjson.parser.Feature feature22 = null;
        com.alibaba.fastjson.parser.Feature[] featureArray23 = new com.alibaba.fastjson.parser.Feature[] { feature22 };
        java.lang.Comparable<java.lang.String> strComparable24 = com.alibaba.fastjson.JSON.parseObject(byteArray20, type21, featureArray23);
        java.nio.charset.Charset charset25 = com.alibaba.fastjson.JSON.parseObject(byteArray9, 3089, (int) (short) -1, charset12, type13, featureArray23);
        com.alibaba.fastjson.JSONObject jSONObject28 = new com.alibaba.fastjson.JSONObject(0);
        boolean boolean30 = jSONObject28.equals((java.lang.Object) (byte) 10);
        java.util.Set<java.util.Map.Entry<java.lang.String, java.lang.Object>> strEntrySet31 = jSONObject28.entrySet();
        com.alibaba.fastjson.serializer.SerializeFilter[] serializeFilterArray34 = new com.alibaba.fastjson.serializer.SerializeFilter[] {};
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature35 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature36 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature37 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature38 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature39 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature[] serializerFeatureArray40 = new com.alibaba.fastjson.serializer.SerializerFeature[] { serializerFeature35, serializerFeature36, serializerFeature37, serializerFeature38, serializerFeature39 };
        byte[] byteArray41 = com.alibaba.fastjson.JSON.toJSONBytes((java.lang.Object) "hi!", serializeFilterArray34, serializerFeatureArray40);
        java.lang.String str42 = com.alibaba.fastjson.JSON.toJSONStringWithDateFormat((java.lang.Object) jSONObject28, "null", serializerFeatureArray40);
        // The following exception was thrown during execution in test generation
        try {
            int int43 = com.alibaba.fastjson.JSON.writeJSONString(outputStream0, charset12, (java.lang.Object) (short) 10, serializerFeatureArray40);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(serializeFilterArray2);
        org.junit.Assert.assertTrue("'" + serializerFeature3 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature3.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature4 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature4.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature5 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature5.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + serializerFeature6 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature6.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature7 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature7.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertNotNull(serializerFeatureArray8);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[39, 104, 105, 33, 39]");
        org.junit.Assert.assertNotNull(charset12);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[10, -1, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(featureArray23);
        org.junit.Assert.assertNull(strComparable24);
        org.junit.Assert.assertNull(charset25);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(strEntrySet31);
        org.junit.Assert.assertNotNull(serializeFilterArray34);
        org.junit.Assert.assertTrue("'" + serializerFeature35 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature35.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature36 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature36.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature37 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature37.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + serializerFeature38 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature38.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature39 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature39.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertNotNull(serializerFeatureArray40);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[39, 104, 105, 33, 39]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "{}" + "'", str42, "{}");
    }

    @Test
    public void test082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test082");
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature0 = com.alibaba.fastjson.serializer.SerializerFeature.WriteTabAsSpecial;
        com.alibaba.fastjson.serializer.SerializeFilter[] serializeFilterArray2 = new com.alibaba.fastjson.serializer.SerializeFilter[] {};
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature3 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature4 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature5 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature6 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature7 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature[] serializerFeatureArray8 = new com.alibaba.fastjson.serializer.SerializerFeature[] { serializerFeature3, serializerFeature4, serializerFeature5, serializerFeature6, serializerFeature7 };
        byte[] byteArray9 = com.alibaba.fastjson.JSON.toJSONBytes((java.lang.Object) "hi!", serializeFilterArray2, serializerFeatureArray8);
        com.alibaba.fastjson.serializer.SerializeFilter[] serializeFilterArray11 = new com.alibaba.fastjson.serializer.SerializeFilter[] {};
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature12 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature13 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature14 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature15 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature16 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature[] serializerFeatureArray17 = new com.alibaba.fastjson.serializer.SerializerFeature[] { serializerFeature12, serializerFeature13, serializerFeature14, serializerFeature15, serializerFeature16 };
        byte[] byteArray18 = com.alibaba.fastjson.JSON.toJSONBytes((java.lang.Object) "hi!", serializeFilterArray11, serializerFeatureArray17);
        java.lang.String str19 = com.alibaba.fastjson.JSON.toJSONString((java.lang.Object) serializerFeature0, serializeFilterArray2, serializerFeatureArray17);
        com.alibaba.fastjson.serializer.SerializeConfig serializeConfig20 = null;
        com.alibaba.fastjson.serializer.SerializeFilter[] serializeFilterArray22 = new com.alibaba.fastjson.serializer.SerializeFilter[] {};
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature23 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature24 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature25 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature26 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature27 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature[] serializerFeatureArray28 = new com.alibaba.fastjson.serializer.SerializerFeature[] { serializerFeature23, serializerFeature24, serializerFeature25, serializerFeature26, serializerFeature27 };
        byte[] byteArray29 = com.alibaba.fastjson.JSON.toJSONBytes((java.lang.Object) "hi!", serializeFilterArray22, serializerFeatureArray28);
        com.alibaba.fastjson.serializer.SerializeFilter[] serializeFilterArray32 = new com.alibaba.fastjson.serializer.SerializeFilter[] {};
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature33 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature34 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature35 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature36 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature37 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature[] serializerFeatureArray38 = new com.alibaba.fastjson.serializer.SerializerFeature[] { serializerFeature33, serializerFeature34, serializerFeature35, serializerFeature36, serializerFeature37 };
        byte[] byteArray39 = com.alibaba.fastjson.JSON.toJSONBytes((java.lang.Object) "hi!", serializeFilterArray32, serializerFeatureArray38);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray40 = com.alibaba.fastjson.JSON.toJSONBytes((java.lang.Object) serializerFeatureArray17, serializeConfig20, serializeFilterArray22, (int) '#', serializerFeatureArray38);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + serializerFeature0 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteTabAsSpecial + "'", serializerFeature0.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteTabAsSpecial));
        org.junit.Assert.assertNotNull(serializeFilterArray2);
        org.junit.Assert.assertTrue("'" + serializerFeature3 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature3.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature4 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature4.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature5 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature5.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + serializerFeature6 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature6.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature7 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature7.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertNotNull(serializerFeatureArray8);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[39, 104, 105, 33, 39]");
        org.junit.Assert.assertNotNull(serializeFilterArray11);
        org.junit.Assert.assertTrue("'" + serializerFeature12 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature12.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature13 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature13.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature14 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature14.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + serializerFeature15 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature15.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature16 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature16.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertNotNull(serializerFeatureArray17);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[39, 104, 105, 33, 39]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "'WriteTabAsSpecial'" + "'", str19, "'WriteTabAsSpecial'");
        org.junit.Assert.assertNotNull(serializeFilterArray22);
        org.junit.Assert.assertTrue("'" + serializerFeature23 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature23.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature24 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature24.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature25 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature25.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + serializerFeature26 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature26.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature27 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature27.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertNotNull(serializerFeatureArray28);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[39, 104, 105, 33, 39]");
        org.junit.Assert.assertNotNull(serializeFilterArray32);
        org.junit.Assert.assertTrue("'" + serializerFeature33 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature33.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature34 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature34.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature35 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature35.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + serializerFeature36 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature36.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature37 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature37.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertNotNull(serializerFeatureArray38);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[39, 104, 105, 33, 39]");
    }

    @Test
    public void test083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test083");
        java.io.Writer writer2 = null;
        com.alibaba.fastjson.serializer.SerializeWriter serializeWriter4 = new com.alibaba.fastjson.serializer.SerializeWriter(writer2, 10);
        serializeWriter4.write((int) (byte) -1);
        serializeWriter4.expandCapacity((int) (short) 10);
        char[] charArray12 = new char[] { '#', '#', ' ' };
        byte[] byteArray15 = com.alibaba.fastjson.util.IOUtils.decodeBase64(charArray12, 10, (int) (byte) 0);
        serializeWriter4.write(charArray12);
        // The following exception was thrown during execution in test generation
        try {
            com.alibaba.fastjson.util.IOUtils.getChars((long) (byte) 0, (int) '#', charArray12);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 34");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray12);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray12), "## ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray12), "## ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray12), "[#, #,  ]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
    }

    @Test
    public void test084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test084");
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 100, (byte) 1, (byte) 100 };
        java.lang.reflect.Type type5 = null;
        com.alibaba.fastjson.serializer.SerializeFilter[] serializeFilterArray7 = new com.alibaba.fastjson.serializer.SerializeFilter[] {};
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature8 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature9 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature10 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature11 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature12 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature[] serializerFeatureArray13 = new com.alibaba.fastjson.serializer.SerializerFeature[] { serializerFeature8, serializerFeature9, serializerFeature10, serializerFeature11, serializerFeature12 };
        byte[] byteArray14 = com.alibaba.fastjson.JSON.toJSONBytes((java.lang.Object) "hi!", serializeFilterArray7, serializerFeatureArray13);
        java.nio.charset.Charset charset17 = com.alibaba.fastjson.util.IOUtils.UTF8;
        java.lang.reflect.Type type18 = null;
        byte[] byteArray25 = new byte[] { (byte) 10, (byte) -1, (byte) 100, (byte) 10, (byte) 10, (byte) 1 };
        java.lang.reflect.Type type26 = null;
        com.alibaba.fastjson.parser.Feature feature27 = null;
        com.alibaba.fastjson.parser.Feature[] featureArray28 = new com.alibaba.fastjson.parser.Feature[] { feature27 };
        java.lang.Comparable<java.lang.String> strComparable29 = com.alibaba.fastjson.JSON.parseObject(byteArray25, type26, featureArray28);
        java.nio.charset.Charset charset30 = com.alibaba.fastjson.JSON.parseObject(byteArray14, 3089, (int) (short) -1, charset17, type18, featureArray28);
        // The following exception was thrown during execution in test generation
        try {
            com.alibaba.fastjson.JSON jSON31 = com.alibaba.fastjson.JSON.parseObject(byteArray4, type5, featureArray28);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 100, 1, 100]");
        org.junit.Assert.assertNotNull(serializeFilterArray7);
        org.junit.Assert.assertTrue("'" + serializerFeature8 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature8.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature9 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature9.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature10 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature10.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + serializerFeature11 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature11.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature12 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature12.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertNotNull(serializerFeatureArray13);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[39, 104, 105, 33, 39]");
        org.junit.Assert.assertNotNull(charset17);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[10, -1, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(featureArray28);
        org.junit.Assert.assertNull(strComparable29);
        org.junit.Assert.assertNull(charset30);
    }

    @Test
    public void test085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test085");
        java.io.Reader reader0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str1 = com.alibaba.fastjson.util.IOUtils.readAll(reader0);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson.JSONException; message: read string from reader error");
        } catch (com.alibaba.fastjson.JSONException e) {
            // Expected exception.
        }
    }

    @Test
    public void test086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test086");
        com.alibaba.fastjson.JSONObject jSONObject1 = new com.alibaba.fastjson.JSONObject(0);
        java.util.Collection<java.lang.Object> objCollection2 = jSONObject1.values();
        com.alibaba.fastjson.TypeReference typeReference3 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.alibaba.fastjson.serializer.SerializerFeature[] serializerFeatureArray4 = jSONObject1.toJavaObject(typeReference3);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson.JSONException; message: can not cast to : null");
        } catch (com.alibaba.fastjson.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objCollection2);
    }

    @Test
    public void test087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test087");
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature0 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.parser.JSONLexer jSONLexer1 = null;
        com.alibaba.fastjson.parser.ParserConfig parserConfig2 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.alibaba.fastjson.parser.DefaultJSONParser defaultJSONParser3 = new com.alibaba.fastjson.parser.DefaultJSONParser((java.lang.Object) serializerFeature0, jSONLexer1, parserConfig2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + serializerFeature0 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature0.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
    }

    @Test
    public void test088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test088");
        java.lang.reflect.Type type1 = null;
        com.alibaba.fastjson.parser.ParserConfig parserConfig2 = null;
        com.alibaba.fastjson.parser.Feature[] featureArray3 = new com.alibaba.fastjson.parser.Feature[] {};
        // The following exception was thrown during execution in test generation
        try {
            java.lang.RuntimeException runtimeException4 = com.alibaba.fastjson.JSON.parseObject("\"\"", type1, parserConfig2, featureArray3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(featureArray3);
    }

    @Test
    public void test089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test089");
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature0 = com.alibaba.fastjson.serializer.SerializerFeature.SkipTransientField;
        com.alibaba.fastjson.serializer.SerializeConfig serializeConfig1 = null;
        com.alibaba.fastjson.serializer.SerializeFilter[] serializeFilterArray3 = new com.alibaba.fastjson.serializer.SerializeFilter[] {};
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature4 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature5 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature6 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature7 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature8 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature[] serializerFeatureArray9 = new com.alibaba.fastjson.serializer.SerializerFeature[] { serializerFeature4, serializerFeature5, serializerFeature6, serializerFeature7, serializerFeature8 };
        byte[] byteArray10 = com.alibaba.fastjson.JSON.toJSONBytes((java.lang.Object) "hi!", serializeFilterArray3, serializerFeatureArray9);
        java.lang.Object obj11 = null;
        com.alibaba.fastjson.serializer.SerializeConfig serializeConfig12 = null;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature14 = com.alibaba.fastjson.serializer.SerializerFeature.WriteTabAsSpecial;
        com.alibaba.fastjson.serializer.SerializeFilter[] serializeFilterArray16 = new com.alibaba.fastjson.serializer.SerializeFilter[] {};
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature17 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature18 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature19 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature20 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature21 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature[] serializerFeatureArray22 = new com.alibaba.fastjson.serializer.SerializerFeature[] { serializerFeature17, serializerFeature18, serializerFeature19, serializerFeature20, serializerFeature21 };
        byte[] byteArray23 = com.alibaba.fastjson.JSON.toJSONBytes((java.lang.Object) "hi!", serializeFilterArray16, serializerFeatureArray22);
        com.alibaba.fastjson.serializer.SerializeFilter[] serializeFilterArray25 = new com.alibaba.fastjson.serializer.SerializeFilter[] {};
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature26 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature27 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature28 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature29 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature30 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature[] serializerFeatureArray31 = new com.alibaba.fastjson.serializer.SerializerFeature[] { serializerFeature26, serializerFeature27, serializerFeature28, serializerFeature29, serializerFeature30 };
        byte[] byteArray32 = com.alibaba.fastjson.JSON.toJSONBytes((java.lang.Object) "hi!", serializeFilterArray25, serializerFeatureArray31);
        java.lang.String str33 = com.alibaba.fastjson.JSON.toJSONString((java.lang.Object) serializerFeature14, serializeFilterArray16, serializerFeatureArray31);
        byte[] byteArray34 = com.alibaba.fastjson.JSON.toJSONBytes(obj11, serializeConfig12, (int) (byte) -1, serializerFeatureArray31);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str35 = com.alibaba.fastjson.JSON.toJSONString((java.lang.Object) serializerFeature0, serializeConfig1, serializeFilterArray3, serializerFeatureArray31);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + serializerFeature0 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.SkipTransientField + "'", serializerFeature0.equals(com.alibaba.fastjson.serializer.SerializerFeature.SkipTransientField));
        org.junit.Assert.assertNotNull(serializeFilterArray3);
        org.junit.Assert.assertTrue("'" + serializerFeature4 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature4.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature5 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature5.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature6 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature6.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + serializerFeature7 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature7.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature8 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature8.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertNotNull(serializerFeatureArray9);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[39, 104, 105, 33, 39]");
        org.junit.Assert.assertTrue("'" + serializerFeature14 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteTabAsSpecial + "'", serializerFeature14.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteTabAsSpecial));
        org.junit.Assert.assertNotNull(serializeFilterArray16);
        org.junit.Assert.assertTrue("'" + serializerFeature17 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature17.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature18 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature18.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature19 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature19.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + serializerFeature20 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature20.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature21 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature21.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertNotNull(serializerFeatureArray22);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[39, 104, 105, 33, 39]");
        org.junit.Assert.assertNotNull(serializeFilterArray25);
        org.junit.Assert.assertTrue("'" + serializerFeature26 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature26.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature27 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature27.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature28 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature28.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + serializerFeature29 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature29.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature30 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature30.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertNotNull(serializerFeatureArray31);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[39, 104, 105, 33, 39]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "'WriteTabAsSpecial'" + "'", str33, "'WriteTabAsSpecial'");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[110, 117, 108, 108]");
    }

    @Test
    public void test090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test090");
        java.io.Writer writer0 = null;
        com.alibaba.fastjson.serializer.SerializeWriter serializeWriter2 = new com.alibaba.fastjson.serializer.SerializeWriter(writer0, 10);
        serializeWriter2.write((int) (byte) -1);
        serializeWriter2.expandCapacity((int) (short) 10);
        char[] charArray10 = new char[] { '#', '#', ' ' };
        byte[] byteArray13 = com.alibaba.fastjson.util.IOUtils.decodeBase64(charArray10, 10, (int) (byte) 0);
        serializeWriter2.write(charArray10);
        com.alibaba.fastjson.serializer.SerializeConfig serializeConfig15 = null;
        com.alibaba.fastjson.serializer.SerializeFilter[] serializeFilterArray17 = new com.alibaba.fastjson.serializer.SerializeFilter[] {};
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature18 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature19 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature20 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature21 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature22 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature[] serializerFeatureArray23 = new com.alibaba.fastjson.serializer.SerializerFeature[] { serializerFeature18, serializerFeature19, serializerFeature20, serializerFeature21, serializerFeature22 };
        byte[] byteArray24 = com.alibaba.fastjson.JSON.toJSONBytes((java.lang.Object) "hi!", serializeFilterArray17, serializerFeatureArray23);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray25 = com.alibaba.fastjson.JSON.toJSONBytes((java.lang.Object) charArray10, serializeConfig15, serializerFeatureArray23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "## ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "## ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[#, #,  ]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertNotNull(serializeFilterArray17);
        org.junit.Assert.assertTrue("'" + serializerFeature18 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature18.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature19 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature19.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature20 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature20.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + serializerFeature21 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature21.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature22 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature22.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertNotNull(serializerFeatureArray23);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[39, 104, 105, 33, 39]");
    }

    @Test
    public void test091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test091");
        com.alibaba.fastjson.parser.DefaultJSONParser defaultJSONParser1 = new com.alibaba.fastjson.parser.DefaultJSONParser(":true");
        // The following exception was thrown during execution in test generation
        try {
            defaultJSONParser1.parseObject((java.lang.Object) (byte) 1);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson.JSONException; message: syntax error, expect {, actual :");
        } catch (com.alibaba.fastjson.JSONException e) {
            // Expected exception.
        }
    }

    @Test
    public void test092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test092");
        com.alibaba.fastjson.parser.Feature feature1 = null;
        com.alibaba.fastjson.parser.Feature[] featureArray2 = new com.alibaba.fastjson.parser.Feature[] { feature1 };
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj3 = com.alibaba.fastjson.JSON.parse("0.0", featureArray2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(featureArray2);
    }

    @Test
    public void test093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test093");
        int int0 = com.alibaba.fastjson.parser.DefaultJSONParser.TypeNameRedirect;
        org.junit.Assert.assertTrue("'" + int0 + "' != '" + 2 + "'", int0 == 2);
    }

    @Test
    public void test094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test094");
        java.io.OutputStream outputStream0 = null;
        com.alibaba.fastjson.serializer.SerializeFilter[] serializeFilterArray2 = new com.alibaba.fastjson.serializer.SerializeFilter[] {};
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature3 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature4 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature5 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature6 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature7 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature[] serializerFeatureArray8 = new com.alibaba.fastjson.serializer.SerializerFeature[] { serializerFeature3, serializerFeature4, serializerFeature5, serializerFeature6, serializerFeature7 };
        byte[] byteArray9 = com.alibaba.fastjson.JSON.toJSONBytes((java.lang.Object) "hi!", serializeFilterArray2, serializerFeatureArray8);
        java.nio.charset.Charset charset12 = com.alibaba.fastjson.util.IOUtils.UTF8;
        java.lang.reflect.Type type13 = null;
        byte[] byteArray20 = new byte[] { (byte) 10, (byte) -1, (byte) 100, (byte) 10, (byte) 10, (byte) 1 };
        java.lang.reflect.Type type21 = null;
        com.alibaba.fastjson.parser.Feature feature22 = null;
        com.alibaba.fastjson.parser.Feature[] featureArray23 = new com.alibaba.fastjson.parser.Feature[] { feature22 };
        java.lang.Comparable<java.lang.String> strComparable24 = com.alibaba.fastjson.JSON.parseObject(byteArray20, type21, featureArray23);
        java.nio.charset.Charset charset25 = com.alibaba.fastjson.JSON.parseObject(byteArray9, 3089, (int) (short) -1, charset12, type13, featureArray23);
        java.io.Writer writer26 = null;
        com.alibaba.fastjson.serializer.SerializeWriter serializeWriter28 = new com.alibaba.fastjson.serializer.SerializeWriter(writer26, 10);
        serializeWriter28.write((int) (byte) -1);
        com.alibaba.fastjson.serializer.SerializeWriter serializeWriter32 = serializeWriter28.append('a');
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature33 = com.alibaba.fastjson.serializer.SerializerFeature.WriteTabAsSpecial;
        com.alibaba.fastjson.serializer.SerializeFilter[] serializeFilterArray35 = new com.alibaba.fastjson.serializer.SerializeFilter[] {};
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature36 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature37 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature38 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature39 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature40 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature[] serializerFeatureArray41 = new com.alibaba.fastjson.serializer.SerializerFeature[] { serializerFeature36, serializerFeature37, serializerFeature38, serializerFeature39, serializerFeature40 };
        byte[] byteArray42 = com.alibaba.fastjson.JSON.toJSONBytes((java.lang.Object) "hi!", serializeFilterArray35, serializerFeatureArray41);
        com.alibaba.fastjson.serializer.SerializeFilter[] serializeFilterArray44 = new com.alibaba.fastjson.serializer.SerializeFilter[] {};
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature45 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature46 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature47 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature48 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature49 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature[] serializerFeatureArray50 = new com.alibaba.fastjson.serializer.SerializerFeature[] { serializerFeature45, serializerFeature46, serializerFeature47, serializerFeature48, serializerFeature49 };
        byte[] byteArray51 = com.alibaba.fastjson.JSON.toJSONBytes((java.lang.Object) "hi!", serializeFilterArray44, serializerFeatureArray50);
        java.lang.String str52 = com.alibaba.fastjson.JSON.toJSONString((java.lang.Object) serializerFeature33, serializeFilterArray35, serializerFeatureArray50);
        // The following exception was thrown during execution in test generation
        try {
            int int53 = com.alibaba.fastjson.JSON.writeJSONString(outputStream0, charset12, (java.lang.Object) serializeWriter32, serializerFeatureArray50);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(serializeFilterArray2);
        org.junit.Assert.assertTrue("'" + serializerFeature3 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature3.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature4 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature4.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature5 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature5.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + serializerFeature6 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature6.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature7 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature7.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertNotNull(serializerFeatureArray8);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[39, 104, 105, 33, 39]");
        org.junit.Assert.assertNotNull(charset12);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[10, -1, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(featureArray23);
        org.junit.Assert.assertNull(strComparable24);
        org.junit.Assert.assertNull(charset25);
        org.junit.Assert.assertNotNull(serializeWriter32);
        org.junit.Assert.assertTrue("'" + serializerFeature33 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteTabAsSpecial + "'", serializerFeature33.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteTabAsSpecial));
        org.junit.Assert.assertNotNull(serializeFilterArray35);
        org.junit.Assert.assertTrue("'" + serializerFeature36 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature36.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature37 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature37.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature38 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature38.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + serializerFeature39 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature39.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature40 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature40.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertNotNull(serializerFeatureArray41);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[39, 104, 105, 33, 39]");
        org.junit.Assert.assertNotNull(serializeFilterArray44);
        org.junit.Assert.assertTrue("'" + serializerFeature45 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature45.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature46 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature46.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature47 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature47.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + serializerFeature48 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature48.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature49 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature49.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertNotNull(serializerFeatureArray50);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[39, 104, 105, 33, 39]");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "'WriteTabAsSpecial'" + "'", str52, "'WriteTabAsSpecial'");
    }

    @Test
    public void test095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test095");
        java.io.Writer writer0 = null;
        com.alibaba.fastjson.serializer.SerializeWriter serializeWriter2 = new com.alibaba.fastjson.serializer.SerializeWriter(writer0, 10);
        serializeWriter2.writeStringWithDoubleQuote("'WriteTabAsSpecial'", '4');
        serializeWriter2.write(true);
        java.io.OutputStream outputStream8 = null;
        com.alibaba.fastjson.serializer.SerializeFilter[] serializeFilterArray10 = new com.alibaba.fastjson.serializer.SerializeFilter[] {};
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature11 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature12 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature13 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature14 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature15 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature[] serializerFeatureArray16 = new com.alibaba.fastjson.serializer.SerializerFeature[] { serializerFeature11, serializerFeature12, serializerFeature13, serializerFeature14, serializerFeature15 };
        byte[] byteArray17 = com.alibaba.fastjson.JSON.toJSONBytes((java.lang.Object) "hi!", serializeFilterArray10, serializerFeatureArray16);
        java.nio.charset.Charset charset20 = com.alibaba.fastjson.util.IOUtils.UTF8;
        java.lang.reflect.Type type21 = null;
        byte[] byteArray28 = new byte[] { (byte) 10, (byte) -1, (byte) 100, (byte) 10, (byte) 10, (byte) 1 };
        java.lang.reflect.Type type29 = null;
        com.alibaba.fastjson.parser.Feature feature30 = null;
        com.alibaba.fastjson.parser.Feature[] featureArray31 = new com.alibaba.fastjson.parser.Feature[] { feature30 };
        java.lang.Comparable<java.lang.String> strComparable32 = com.alibaba.fastjson.JSON.parseObject(byteArray28, type29, featureArray31);
        java.nio.charset.Charset charset33 = com.alibaba.fastjson.JSON.parseObject(byteArray17, 3089, (int) (short) -1, charset20, type21, featureArray31);
        // The following exception was thrown during execution in test generation
        try {
            int int34 = serializeWriter2.writeToEx(outputStream8, charset33);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(serializeFilterArray10);
        org.junit.Assert.assertTrue("'" + serializerFeature11 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature11.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature12 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature12.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature13 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature13.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + serializerFeature14 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature14.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature15 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature15.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertNotNull(serializerFeatureArray16);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[39, 104, 105, 33, 39]");
        org.junit.Assert.assertNotNull(charset20);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[10, -1, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(featureArray31);
        org.junit.Assert.assertNull(strComparable32);
        org.junit.Assert.assertNull(charset33);
    }

    @Test
    public void test096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test096");
        com.alibaba.fastjson.parser.ParserConfig parserConfig1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj3 = com.alibaba.fastjson.JSON.parse(":true", parserConfig1, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test097");
        com.alibaba.fastjson.parser.ParserConfig parserConfig1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj3 = com.alibaba.fastjson.JSON.parse("'WriteMapNullValue'", parserConfig1, 3089);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test098");
        com.alibaba.fastjson.JSONObject jSONObject1 = new com.alibaba.fastjson.JSONObject(0);
        boolean boolean3 = jSONObject1.equals((java.lang.Object) (byte) 10);
        java.lang.Integer int5 = jSONObject1.getInteger("hi!");
        boolean boolean7 = jSONObject1.getBooleanValue(":false");
        byte[] byteArray9 = jSONObject1.getBytes("fastjson.serializer_buffer_threshold");
        com.alibaba.fastjson.TypeReference typeReference10 = null;
        // The following exception was thrown during execution in test generation
        try {
            char[] charArray11 = jSONObject1.toJavaObject(typeReference10);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson.JSONException; message: can not cast to : null");
        } catch (com.alibaba.fastjson.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(int5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(byteArray9);
    }

    @Test
    public void test099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test099");
        java.io.Writer writer0 = null;
        com.alibaba.fastjson.serializer.SerializeWriter serializeWriter2 = new com.alibaba.fastjson.serializer.SerializeWriter(writer0, 10);
        serializeWriter2.write((int) (byte) -1);
        serializeWriter2.expandCapacity((int) (short) 10);
        serializeWriter2.writeFieldValue('a', "'WriteTabAsSpecial'", (float) 1);
    }

    @Test
    public void test100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test100");
        char[] charArray3 = new char[] { '#', '#', ' ' };
        byte[] byteArray6 = com.alibaba.fastjson.util.IOUtils.decodeBase64(charArray3, 10, (int) (byte) 0);
        java.nio.charset.CharsetDecoder charsetDecoder9 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj11 = com.alibaba.fastjson.JSON.parse(byteArray6, 0, (int) (byte) 100, charsetDecoder9, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray3), "## ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray3), "## ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray3), "[#, #,  ]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
    }

    @Test
    public void test101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test101");
        com.alibaba.fastjson.parser.DefaultJSONParser defaultJSONParser1 = new com.alibaba.fastjson.parser.DefaultJSONParser(":true");
        com.alibaba.fastjson.parser.SymbolTable symbolTable2 = defaultJSONParser1.symbolTable;
        java.lang.reflect.Type type3 = null;
        java.lang.reflect.Type[] typeArray4 = new java.lang.reflect.Type[] { type3 };
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object[] objArray5 = defaultJSONParser1.parseArray(typeArray4);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson.JSONException; message: syntax error : :");
        } catch (com.alibaba.fastjson.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(symbolTable2);
        org.junit.Assert.assertNotNull(typeArray4);
    }

    @Test
    public void test102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test102");
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] {};
        com.alibaba.fastjson.parser.ParserConfig parserConfig2 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.Object> objList3 = com.alibaba.fastjson.JSON.parseArray("writer not null", typeArray1, parserConfig2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(typeArray1);
    }

    @Test
    public void test103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test103");
        java.lang.reflect.Type type1 = null;
        com.alibaba.fastjson.parser.ParserConfig parserConfig2 = null;
        byte[] byteArray9 = new byte[] { (byte) 10, (byte) -1, (byte) 100, (byte) 10, (byte) 10, (byte) 1 };
        java.lang.reflect.Type type10 = null;
        com.alibaba.fastjson.parser.Feature feature11 = null;
        com.alibaba.fastjson.parser.Feature[] featureArray12 = new com.alibaba.fastjson.parser.Feature[] { feature11 };
        java.lang.Comparable<java.lang.String> strComparable13 = com.alibaba.fastjson.JSON.parseObject(byteArray9, type10, featureArray12);
        // The following exception was thrown during execution in test generation
        try {
            java.io.Serializable serializable14 = com.alibaba.fastjson.JSON.parseObject("\"-9223372036854775808\"", type1, parserConfig2, featureArray12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[10, -1, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(featureArray12);
        org.junit.Assert.assertNull(strComparable13);
    }

    @Test
    public void test104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test104");
        com.alibaba.fastjson.JSONObject jSONObject1 = new com.alibaba.fastjson.JSONObject(0);
        boolean boolean3 = jSONObject1.equals((java.lang.Object) (byte) 10);
        java.lang.Integer int5 = jSONObject1.getInteger("hi!");
        java.math.BigDecimal bigDecimal7 = jSONObject1.getBigDecimal("true");
        com.alibaba.fastjson.JSONObject jSONObject10 = new com.alibaba.fastjson.JSONObject(0);
        boolean boolean12 = jSONObject10.equals((java.lang.Object) (byte) 10);
        java.lang.Float float14 = jSONObject10.getFloat("UTF-8");
        com.alibaba.fastjson.JSONObject jSONObject15 = new com.alibaba.fastjson.JSONObject((java.util.Map<java.lang.String, java.lang.Object>) jSONObject10);
        java.lang.Double double17 = jSONObject10.getDouble("\"\"");
        java.sql.Timestamp timestamp19 = jSONObject10.getTimestamp("Negative initial size:");
        java.util.Set<java.lang.String> strSet20 = jSONObject10.keySet();
        java.lang.Object obj21 = jSONObject1.putIfAbsent("[]", (java.lang.Object) jSONObject10);
        java.lang.reflect.Type type22 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Comparable<java.lang.String> strComparable23 = jSONObject10.toJavaObject(type22);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson.JSONException; message: can not cast to : null");
        } catch (com.alibaba.fastjson.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(int5);
        org.junit.Assert.assertNull(bigDecimal7);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(float14);
        org.junit.Assert.assertNull(double17);
        org.junit.Assert.assertNull(timestamp19);
        org.junit.Assert.assertNotNull(strSet20);
        org.junit.Assert.assertNull(obj21);
    }

    @Test
    public void test105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test105");
        com.alibaba.fastjson.parser.DefaultJSONParser defaultJSONParser1 = new com.alibaba.fastjson.parser.DefaultJSONParser(":true");
        // The following exception was thrown during execution in test generation
        try {
            defaultJSONParser1.parseObject((java.lang.Object) 0L);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson.JSONException; message: syntax error, expect {, actual :");
        } catch (com.alibaba.fastjson.JSONException e) {
            // Expected exception.
        }
    }

    @Test
    public void test106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test106");
        java.lang.reflect.Type type1 = null;
        com.alibaba.fastjson.parser.ParserConfig parserConfig2 = null;
        com.alibaba.fastjson.parser.deserializer.ParseProcess parseProcess3 = null;
        com.alibaba.fastjson.serializer.SerializeFilter[] serializeFilterArray6 = new com.alibaba.fastjson.serializer.SerializeFilter[] {};
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature7 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature8 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature9 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature10 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature11 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature[] serializerFeatureArray12 = new com.alibaba.fastjson.serializer.SerializerFeature[] { serializerFeature7, serializerFeature8, serializerFeature9, serializerFeature10, serializerFeature11 };
        byte[] byteArray13 = com.alibaba.fastjson.JSON.toJSONBytes((java.lang.Object) "hi!", serializeFilterArray6, serializerFeatureArray12);
        java.nio.charset.Charset charset16 = com.alibaba.fastjson.util.IOUtils.UTF8;
        java.lang.reflect.Type type17 = null;
        byte[] byteArray24 = new byte[] { (byte) 10, (byte) -1, (byte) 100, (byte) 10, (byte) 10, (byte) 1 };
        java.lang.reflect.Type type25 = null;
        com.alibaba.fastjson.parser.Feature feature26 = null;
        com.alibaba.fastjson.parser.Feature[] featureArray27 = new com.alibaba.fastjson.parser.Feature[] { feature26 };
        java.lang.Comparable<java.lang.String> strComparable28 = com.alibaba.fastjson.JSON.parseObject(byteArray24, type25, featureArray27);
        java.nio.charset.Charset charset29 = com.alibaba.fastjson.JSON.parseObject(byteArray13, 3089, (int) (short) -1, charset16, type17, featureArray27);
        com.alibaba.fastjson.serializer.SerializerFeature[] serializerFeatureArray31 = new com.alibaba.fastjson.serializer.SerializerFeature[] {};
        byte[] byteArray32 = com.alibaba.fastjson.JSON.toJSONBytes((java.lang.Object) 10.0d, serializerFeatureArray31);
        byte[] byteArray33 = com.alibaba.fastjson.JSON.toJSONBytes((java.lang.Object) featureArray27, serializerFeatureArray31);
        // The following exception was thrown during execution in test generation
        try {
            com.alibaba.fastjson.serializer.SerializerFeature[] serializerFeatureArray34 = com.alibaba.fastjson.JSON.parseObject("1.2.76", type1, parserConfig2, parseProcess3, 1, featureArray27);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(serializeFilterArray6);
        org.junit.Assert.assertTrue("'" + serializerFeature7 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature7.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature8 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature8.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature9 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature9.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + serializerFeature10 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature10.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature11 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature11.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertNotNull(serializerFeatureArray12);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[39, 104, 105, 33, 39]");
        org.junit.Assert.assertNotNull(charset16);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[10, -1, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(featureArray27);
        org.junit.Assert.assertNull(strComparable28);
        org.junit.Assert.assertNull(charset29);
        org.junit.Assert.assertNotNull(serializerFeatureArray31);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[49, 48, 46, 48]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[91, 110, 117, 108, 108, 93]");
    }

    @Test
    public void test107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test107");
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature0 = com.alibaba.fastjson.serializer.SerializerFeature.UseISO8601DateFormat;
        org.junit.Assert.assertTrue("'" + serializerFeature0 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.UseISO8601DateFormat + "'", serializerFeature0.equals(com.alibaba.fastjson.serializer.SerializerFeature.UseISO8601DateFormat));
    }

    @Test
    public void test108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test108");
        byte[] byteArray1 = com.alibaba.fastjson.util.IOUtils.decodeBase64("must >");
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-102, -21, 45]");
    }

    @Test
    public void test109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test109");
        java.io.Writer writer0 = null;
        com.alibaba.fastjson.serializer.SerializeWriter serializeWriter2 = new com.alibaba.fastjson.serializer.SerializeWriter(writer0, 10);
        serializeWriter2.write((int) (byte) -1);
        serializeWriter2.expandCapacity((int) (short) 10);
        char[] charArray10 = new char[] { '#', '#', ' ' };
        byte[] byteArray13 = com.alibaba.fastjson.util.IOUtils.decodeBase64(charArray10, 10, (int) (byte) 0);
        serializeWriter2.write(charArray10);
        java.io.OutputStream outputStream15 = null;
        // The following exception was thrown during execution in test generation
        try {
            serializeWriter2.writeTo(outputStream15, "");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "## ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "## ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[#, #,  ]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
    }

    @Test
    public void test110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test110");
        boolean boolean1 = com.alibaba.fastjson.JSON.isValidObject("serialize exceeded MAX_OUTPUT_LENGTH=");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test111");
        com.alibaba.fastjson.parser.DefaultJSONParser defaultJSONParser1 = new com.alibaba.fastjson.parser.DefaultJSONParser(":true");
        com.alibaba.fastjson.parser.SymbolTable symbolTable2 = defaultJSONParser1.symbolTable;
        defaultJSONParser1.resolveStatus = (byte) -1;
        java.text.DateFormat dateFormat5 = defaultJSONParser1.getDateFormat();
        com.alibaba.fastjson.serializer.SerializeConfig serializeConfig6 = null;
        com.alibaba.fastjson.JSONObject jSONObject8 = new com.alibaba.fastjson.JSONObject(0);
        boolean boolean10 = jSONObject8.equals((java.lang.Object) (byte) 10);
        java.lang.Float float12 = jSONObject8.getFloat("UTF-8");
        com.alibaba.fastjson.JSONObject jSONObject13 = new com.alibaba.fastjson.JSONObject((java.util.Map<java.lang.String, java.lang.Object>) jSONObject8);
        java.lang.Double double15 = jSONObject8.getDouble("\"\"");
        java.sql.Timestamp timestamp17 = jSONObject8.getTimestamp("Negative initial size:");
        java.util.Set<java.lang.String> strSet18 = jSONObject8.keySet();
        java.lang.Double double20 = jSONObject8.getDouble(":false");
        com.alibaba.fastjson.JSONObject jSONObject23 = new com.alibaba.fastjson.JSONObject(0);
        boolean boolean25 = jSONObject23.equals((java.lang.Object) (byte) 10);
        java.lang.Float float27 = jSONObject23.getFloat("UTF-8");
        com.alibaba.fastjson.parser.ParserConfig parserConfig28 = null;
        java.lang.Object obj29 = com.alibaba.fastjson.JSON.toJSON((java.lang.Object) jSONObject23, parserConfig28);
        com.alibaba.fastjson.JSONObject jSONObject31 = jSONObject23.fluentRemove((java.lang.Object) 1.0d);
        java.lang.Object obj32 = jSONObject8.putIfAbsent("fastjson.serializer_buffer_threshold", (java.lang.Object) jSONObject23);
        java.io.Writer writer33 = null;
        com.alibaba.fastjson.serializer.SerializeWriter serializeWriter35 = new com.alibaba.fastjson.serializer.SerializeWriter(writer33, 10);
        serializeWriter35.writeStringWithDoubleQuote("'WriteTabAsSpecial'", '4');
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature39 = com.alibaba.fastjson.serializer.SerializerFeature.WriteTabAsSpecial;
        com.alibaba.fastjson.serializer.SerializeFilter[] serializeFilterArray41 = new com.alibaba.fastjson.serializer.SerializeFilter[] {};
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature42 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature43 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature44 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature45 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature46 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature[] serializerFeatureArray47 = new com.alibaba.fastjson.serializer.SerializerFeature[] { serializerFeature42, serializerFeature43, serializerFeature44, serializerFeature45, serializerFeature46 };
        byte[] byteArray48 = com.alibaba.fastjson.JSON.toJSONBytes((java.lang.Object) "hi!", serializeFilterArray41, serializerFeatureArray47);
        com.alibaba.fastjson.serializer.SerializeFilter[] serializeFilterArray50 = new com.alibaba.fastjson.serializer.SerializeFilter[] {};
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature51 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature52 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature53 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature54 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature55 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature[] serializerFeatureArray56 = new com.alibaba.fastjson.serializer.SerializerFeature[] { serializerFeature51, serializerFeature52, serializerFeature53, serializerFeature54, serializerFeature55 };
        byte[] byteArray57 = com.alibaba.fastjson.JSON.toJSONBytes((java.lang.Object) "hi!", serializeFilterArray50, serializerFeatureArray56);
        java.lang.String str58 = com.alibaba.fastjson.JSON.toJSONString((java.lang.Object) serializerFeature39, serializeFilterArray41, serializerFeatureArray56);
        com.alibaba.fastjson.serializer.SerializeWriter serializeWriter59 = new com.alibaba.fastjson.serializer.SerializeWriter((java.io.Writer) serializeWriter35, serializerFeatureArray56);
        java.lang.String str60 = jSONObject8.toString(serializerFeatureArray56);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str61 = com.alibaba.fastjson.JSON.toJSONString((java.lang.Object) dateFormat5, serializeConfig6, serializerFeatureArray56);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(symbolTable2);
        org.junit.Assert.assertNotNull(dateFormat5);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(float12);
        org.junit.Assert.assertNull(double15);
        org.junit.Assert.assertNull(timestamp17);
        org.junit.Assert.assertNotNull(strSet18);
        org.junit.Assert.assertNull(double20);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(float27);
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertEquals(obj29.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj29), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj29), "{}");
        org.junit.Assert.assertNotNull(jSONObject31);
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertTrue("'" + serializerFeature39 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteTabAsSpecial + "'", serializerFeature39.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteTabAsSpecial));
        org.junit.Assert.assertNotNull(serializeFilterArray41);
        org.junit.Assert.assertTrue("'" + serializerFeature42 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature42.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature43 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature43.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature44 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature44.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + serializerFeature45 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature45.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature46 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature46.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertNotNull(serializerFeatureArray47);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[39, 104, 105, 33, 39]");
        org.junit.Assert.assertNotNull(serializeFilterArray50);
        org.junit.Assert.assertTrue("'" + serializerFeature51 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature51.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature52 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature52.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature53 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature53.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + serializerFeature54 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature54.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature55 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature55.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertNotNull(serializerFeatureArray56);
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[39, 104, 105, 33, 39]");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "'WriteTabAsSpecial'" + "'", str58, "'WriteTabAsSpecial'");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "{fastjson.serializer_buffer_threshold:{}}" + "'", str60, "{fastjson.serializer_buffer_threshold:{}}");
    }

    @Test
    public void test112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test112");
        byte[] byteArray7 = new byte[] { (byte) 10, (byte) -1, (byte) 100, (byte) 10, (byte) 10, (byte) 1 };
        java.lang.reflect.Type type8 = null;
        com.alibaba.fastjson.parser.Feature feature9 = null;
        com.alibaba.fastjson.parser.Feature[] featureArray10 = new com.alibaba.fastjson.parser.Feature[] { feature9 };
        java.lang.Comparable<java.lang.String> strComparable11 = com.alibaba.fastjson.JSON.parseObject(byteArray7, type8, featureArray10);
        // The following exception was thrown during execution in test generation
        try {
            com.alibaba.fastjson.JSONObject jSONObject12 = com.alibaba.fastjson.JSON.parseObject("", featureArray10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[10, -1, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(featureArray10);
        org.junit.Assert.assertNull(strComparable11);
    }

    @Test
    public void test113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test113");
        com.alibaba.fastjson.parser.DefaultJSONParser defaultJSONParser1 = new com.alibaba.fastjson.parser.DefaultJSONParser(":true");
        com.alibaba.fastjson.parser.SymbolTable symbolTable2 = defaultJSONParser1.symbolTable;
        defaultJSONParser1.resolveStatus = (byte) -1;
        java.text.DateFormat dateFormat5 = defaultJSONParser1.getDateFormat();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj6 = defaultJSONParser1.parse();
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson.JSONException; message: syntax error, pos 1, line 1, column 2:true");
        } catch (com.alibaba.fastjson.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(symbolTable2);
        org.junit.Assert.assertNotNull(dateFormat5);
    }

    @Test
    public void test114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test114");
        com.alibaba.fastjson.parser.DefaultJSONParser defaultJSONParser1 = new com.alibaba.fastjson.parser.DefaultJSONParser(":true");
        com.alibaba.fastjson.parser.SymbolTable symbolTable2 = defaultJSONParser1.symbolTable;
        defaultJSONParser1.resolveStatus = (byte) -1;
        defaultJSONParser1.setDateFormat("{fastjson.serializer_buffer_threshold:{}}");
        org.junit.Assert.assertNotNull(symbolTable2);
    }

    @Test
    public void test115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test115");
        com.alibaba.fastjson.JSONObject jSONObject1 = new com.alibaba.fastjson.JSONObject(0);
        boolean boolean3 = jSONObject1.equals((java.lang.Object) (byte) 10);
        java.lang.Integer int5 = jSONObject1.getInteger("hi!");
        boolean boolean7 = jSONObject1.getBooleanValue(":false");
        byte[] byteArray9 = jSONObject1.getBytes("fastjson.serializer_buffer_threshold");
        java.util.Date date11 = jSONObject1.getDate(", minimumCapacity=");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(int5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(byteArray9);
        org.junit.Assert.assertNull(date11);
    }

    @Test
    public void test116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test116");
        java.io.Writer writer2 = null;
        com.alibaba.fastjson.serializer.SerializeWriter serializeWriter4 = new com.alibaba.fastjson.serializer.SerializeWriter(writer2, 10);
        serializeWriter4.write((int) (byte) -1);
        serializeWriter4.expandCapacity((int) (short) 10);
        char[] charArray12 = new char[] { '#', '#', ' ' };
        byte[] byteArray15 = com.alibaba.fastjson.util.IOUtils.decodeBase64(charArray12, 10, (int) (byte) 0);
        serializeWriter4.write(charArray12);
        // The following exception was thrown during execution in test generation
        try {
            com.alibaba.fastjson.util.IOUtils.getChars((byte) 10, (int) (short) 0, charArray12);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray12);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray12), "## ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray12), "## ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray12), "[#, #,  ]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
    }

    @Test
    public void test117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test117");
        com.alibaba.fastjson.JSONObject jSONObject1 = new com.alibaba.fastjson.JSONObject(0);
        boolean boolean3 = jSONObject1.equals((java.lang.Object) (byte) 10);
        java.lang.Float float5 = jSONObject1.getFloat("UTF-8");
        com.alibaba.fastjson.parser.ParserConfig parserConfig6 = null;
        java.lang.Object obj7 = com.alibaba.fastjson.JSON.toJSON((java.lang.Object) jSONObject1, parserConfig6);
        com.alibaba.fastjson.JSONObject jSONObject9 = new com.alibaba.fastjson.JSONObject(0);
        boolean boolean11 = jSONObject9.equals((java.lang.Object) (byte) 10);
        java.lang.Float float13 = jSONObject9.getFloat("UTF-8");
        com.alibaba.fastjson.parser.ParserConfig parserConfig14 = null;
        java.lang.Object obj15 = com.alibaba.fastjson.JSON.toJSON((java.lang.Object) jSONObject9, parserConfig14);
        com.alibaba.fastjson.JSONObject jSONObject17 = jSONObject9.fluentRemove((java.lang.Object) 1.0d);
        boolean boolean19 = jSONObject17.containsKey((java.lang.Object) 2);
        boolean boolean20 = jSONObject1.containsKey((java.lang.Object) 2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(float5);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "{}");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(float13);
        org.junit.Assert.assertNotNull(obj15);
        org.junit.Assert.assertEquals(obj15.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj15), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj15), "{}");
        org.junit.Assert.assertNotNull(jSONObject17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test118");
        com.alibaba.fastjson.parser.ParseContext parseContext0 = null;
        com.alibaba.fastjson.parser.DefaultJSONParser.ResolveTask resolveTask2 = new com.alibaba.fastjson.parser.DefaultJSONParser.ResolveTask(parseContext0, "null");
        com.alibaba.fastjson.parser.ParseContext parseContext3 = null;
        resolveTask2.ownerContext = parseContext3;
    }

    @Test
    public void test119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test119");
        int[] intArray0 = com.alibaba.fastjson.util.IOUtils.IA;
        org.junit.Assert.assertNotNull(intArray0);
    }

    @Test
    public void test120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test120");
        com.alibaba.fastjson.parser.ParserConfig parserConfig1 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.alibaba.fastjson.JSONArray jSONArray2 = com.alibaba.fastjson.JSON.parseArray("true", parserConfig1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test121");
        java.io.Writer writer0 = null;
        com.alibaba.fastjson.serializer.SerializeWriter serializeWriter2 = new com.alibaba.fastjson.serializer.SerializeWriter(writer0, 10);
        serializeWriter2.write((int) (byte) -1);
        serializeWriter2.expandCapacity((int) (short) 10);
        char[] charArray10 = new char[] { '#', '#', ' ' };
        byte[] byteArray13 = com.alibaba.fastjson.util.IOUtils.decodeBase64(charArray10, 10, (int) (byte) 0);
        serializeWriter2.write(charArray10);
        serializeWriter2.writeFloat(0.0f, false);
        serializeWriter2.writeFieldValue('4', "fastjson.compatibleWithFieldName", (long) 10);
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "## ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "## ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[#, #,  ]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
    }

    @Test
    public void test122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test122");
        java.lang.reflect.Type type1 = null;
        com.alibaba.fastjson.parser.ParserConfig parserConfig2 = null;
        byte[] byteArray10 = new byte[] { (byte) 10, (byte) -1, (byte) 100, (byte) 10, (byte) 10, (byte) 1 };
        java.lang.reflect.Type type11 = null;
        com.alibaba.fastjson.parser.Feature feature12 = null;
        com.alibaba.fastjson.parser.Feature[] featureArray13 = new com.alibaba.fastjson.parser.Feature[] { feature12 };
        java.lang.Comparable<java.lang.String> strComparable14 = com.alibaba.fastjson.JSON.parseObject(byteArray10, type11, featureArray13);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.String> strList15 = com.alibaba.fastjson.JSON.parseObject("fastjson.compatibleWithFieldName", type1, parserConfig2, 3089, featureArray13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[10, -1, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(featureArray13);
        org.junit.Assert.assertNull(strComparable14);
    }

    @Test
    public void test123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test123");
        char[] charArray1 = new char[] {};
        // The following exception was thrown during execution in test generation
        try {
            int int3 = com.alibaba.fastjson.util.RyuFloat.toString((float) 1L, charArray1, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray1);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray1), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray1), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray1), "[]");
    }

    @Test
    public void test124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test124");
        com.alibaba.fastjson.JSONObject jSONObject1 = new com.alibaba.fastjson.JSONObject(0);
        boolean boolean3 = jSONObject1.equals((java.lang.Object) (byte) 10);
        java.io.Writer writer4 = null;
        com.alibaba.fastjson.serializer.SerializeWriter serializeWriter6 = new com.alibaba.fastjson.serializer.SerializeWriter(writer4, 10);
        serializeWriter6.writeStringWithDoubleQuote("'WriteTabAsSpecial'", '4');
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature10 = com.alibaba.fastjson.serializer.SerializerFeature.WriteTabAsSpecial;
        com.alibaba.fastjson.serializer.SerializeFilter[] serializeFilterArray12 = new com.alibaba.fastjson.serializer.SerializeFilter[] {};
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature13 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature14 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature15 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature16 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature17 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature[] serializerFeatureArray18 = new com.alibaba.fastjson.serializer.SerializerFeature[] { serializerFeature13, serializerFeature14, serializerFeature15, serializerFeature16, serializerFeature17 };
        byte[] byteArray19 = com.alibaba.fastjson.JSON.toJSONBytes((java.lang.Object) "hi!", serializeFilterArray12, serializerFeatureArray18);
        com.alibaba.fastjson.serializer.SerializeFilter[] serializeFilterArray21 = new com.alibaba.fastjson.serializer.SerializeFilter[] {};
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature22 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature23 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature24 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature25 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature26 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature[] serializerFeatureArray27 = new com.alibaba.fastjson.serializer.SerializerFeature[] { serializerFeature22, serializerFeature23, serializerFeature24, serializerFeature25, serializerFeature26 };
        byte[] byteArray28 = com.alibaba.fastjson.JSON.toJSONBytes((java.lang.Object) "hi!", serializeFilterArray21, serializerFeatureArray27);
        java.lang.String str29 = com.alibaba.fastjson.JSON.toJSONString((java.lang.Object) serializerFeature10, serializeFilterArray12, serializerFeatureArray27);
        com.alibaba.fastjson.serializer.SerializeWriter serializeWriter30 = new com.alibaba.fastjson.serializer.SerializeWriter((java.io.Writer) serializeWriter6, serializerFeatureArray27);
        jSONObject1.writeJSONString((java.lang.Appendable) serializeWriter6);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + serializerFeature10 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteTabAsSpecial + "'", serializerFeature10.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteTabAsSpecial));
        org.junit.Assert.assertNotNull(serializeFilterArray12);
        org.junit.Assert.assertTrue("'" + serializerFeature13 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature13.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature14 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature14.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature15 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature15.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + serializerFeature16 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature16.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature17 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature17.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertNotNull(serializerFeatureArray18);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[39, 104, 105, 33, 39]");
        org.junit.Assert.assertNotNull(serializeFilterArray21);
        org.junit.Assert.assertTrue("'" + serializerFeature22 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature22.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature23 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature23.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature24 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature24.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + serializerFeature25 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature25.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature26 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature26.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertNotNull(serializerFeatureArray27);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[39, 104, 105, 33, 39]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "'WriteTabAsSpecial'" + "'", str29, "'WriteTabAsSpecial'");
    }

    @Test
    public void test125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test125");
        com.alibaba.fastjson.parser.DefaultJSONParser defaultJSONParser1 = new com.alibaba.fastjson.parser.DefaultJSONParser(":true");
        com.alibaba.fastjson.parser.deserializer.FieldTypeResolver fieldTypeResolver2 = defaultJSONParser1.getFieldTypeResolver();
        // The following exception was thrown during execution in test generation
        try {
            com.alibaba.fastjson.JSONObject jSONObject3 = defaultJSONParser1.parseObject();
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson.JSONException; message: syntax error, expect {, actual :, pos 1, line 1, column 2:true");
        } catch (com.alibaba.fastjson.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(fieldTypeResolver2);
    }

    @Test
    public void test126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test126");
        com.alibaba.fastjson.JSONObject jSONObject1 = new com.alibaba.fastjson.JSONObject(0);
        boolean boolean3 = jSONObject1.equals((java.lang.Object) (byte) 10);
        java.lang.Integer int5 = jSONObject1.getInteger("hi!");
        com.alibaba.fastjson.parser.DefaultJSONParser defaultJSONParser8 = new com.alibaba.fastjson.parser.DefaultJSONParser(":true");
        com.alibaba.fastjson.parser.SymbolTable symbolTable9 = defaultJSONParser8.symbolTable;
        defaultJSONParser8.resolveStatus = (byte) -1;
        java.text.DateFormat dateFormat12 = defaultJSONParser8.getDateFormat();
        com.alibaba.fastjson.parser.DefaultJSONParser defaultJSONParser14 = new com.alibaba.fastjson.parser.DefaultJSONParser(":true");
        java.util.List<com.alibaba.fastjson.parser.deserializer.ExtraTypeProvider> extraTypeProviderList15 = defaultJSONParser14.getExtraTypeProviders();
        defaultJSONParser8.checkListResolve((java.util.Collection) extraTypeProviderList15);
        java.lang.Object obj17 = defaultJSONParser8.input;
        java.lang.Object obj18 = jSONObject1.put("writer not null", (java.lang.Object) defaultJSONParser8);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(int5);
        org.junit.Assert.assertNotNull(symbolTable9);
        org.junit.Assert.assertNotNull(dateFormat12);
        org.junit.Assert.assertNotNull(extraTypeProviderList15);
        org.junit.Assert.assertEquals("'" + obj17 + "' != '" + ":true" + "'", obj17, ":true");
        org.junit.Assert.assertNull(obj18);
    }

    @Test
    public void test127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test127");
        com.alibaba.fastjson.parser.DefaultJSONParser defaultJSONParser1 = new com.alibaba.fastjson.parser.DefaultJSONParser(":true");
        com.alibaba.fastjson.parser.SymbolTable symbolTable2 = defaultJSONParser1.symbolTable;
        defaultJSONParser1.resolveStatus = (byte) -1;
        com.alibaba.fastjson.JSONObject jSONObject6 = new com.alibaba.fastjson.JSONObject(0);
        boolean boolean8 = jSONObject6.equals((java.lang.Object) (byte) 10);
        java.lang.Integer int10 = jSONObject6.getInteger("hi!");
        java.math.BigDecimal bigDecimal12 = jSONObject6.getBigDecimal("true");
        com.alibaba.fastjson.JSONObject jSONObject15 = new com.alibaba.fastjson.JSONObject(0);
        boolean boolean17 = jSONObject15.equals((java.lang.Object) (byte) 10);
        java.lang.Float float19 = jSONObject15.getFloat("UTF-8");
        com.alibaba.fastjson.JSONObject jSONObject20 = new com.alibaba.fastjson.JSONObject((java.util.Map<java.lang.String, java.lang.Object>) jSONObject15);
        java.lang.Double double22 = jSONObject15.getDouble("\"\"");
        java.sql.Timestamp timestamp24 = jSONObject15.getTimestamp("Negative initial size:");
        java.util.Set<java.lang.String> strSet25 = jSONObject15.keySet();
        java.lang.Object obj26 = jSONObject6.putIfAbsent("[]", (java.lang.Object) jSONObject15);
        java.lang.String str28 = jSONObject6.getString("0.0");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj29 = defaultJSONParser1.parseObject((java.util.Map) jSONObject6);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson.JSONException; message: syntax error, expect {, actual :, pos 1, line 1, column 2:true");
        } catch (com.alibaba.fastjson.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(symbolTable2);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(int10);
        org.junit.Assert.assertNull(bigDecimal12);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(float19);
        org.junit.Assert.assertNull(double22);
        org.junit.Assert.assertNull(timestamp24);
        org.junit.Assert.assertNotNull(strSet25);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertNull(str28);
    }

    @Test
    public void test128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test128");
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature0 = com.alibaba.fastjson.serializer.SerializerFeature.BeanToArray;
        com.alibaba.fastjson.serializer.SerializeConfig serializeConfig1 = null;
        java.lang.Object obj2 = com.alibaba.fastjson.JSON.toJSON((java.lang.Object) serializerFeature0, serializeConfig1);
        org.junit.Assert.assertTrue("'" + serializerFeature0 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BeanToArray + "'", serializerFeature0.equals(com.alibaba.fastjson.serializer.SerializerFeature.BeanToArray));
        org.junit.Assert.assertEquals("'" + obj2 + "' != '" + "BeanToArray" + "'", obj2, "BeanToArray");
    }

    @Test
    public void test129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test129");
        com.alibaba.fastjson.parser.DefaultJSONParser defaultJSONParser1 = new com.alibaba.fastjson.parser.DefaultJSONParser(":true");
        com.alibaba.fastjson.parser.SymbolTable symbolTable2 = defaultJSONParser1.getSymbolTable();
        com.alibaba.fastjson.parser.DefaultJSONParser defaultJSONParser4 = new com.alibaba.fastjson.parser.DefaultJSONParser(":true");
        com.alibaba.fastjson.parser.SymbolTable symbolTable5 = defaultJSONParser4.symbolTable;
        defaultJSONParser4.resolveStatus = (byte) -1;
        java.text.DateFormat dateFormat8 = defaultJSONParser4.getDateFormat();
        defaultJSONParser1.setDateFormat(dateFormat8);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj11 = defaultJSONParser1.parse((java.lang.Object) "0.0");
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson.JSONException; message: syntax error, pos 1, line 1, column 2:true");
        } catch (com.alibaba.fastjson.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(symbolTable2);
        org.junit.Assert.assertNotNull(symbolTable5);
        org.junit.Assert.assertNotNull(dateFormat8);
    }

    @Test
    public void test130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test130");
        com.alibaba.fastjson.parser.DefaultJSONParser defaultJSONParser1 = new com.alibaba.fastjson.parser.DefaultJSONParser(":true");
        com.alibaba.fastjson.parser.SymbolTable symbolTable2 = defaultJSONParser1.symbolTable;
        java.lang.String str3 = defaultJSONParser1.getDateFomartPattern();
        com.alibaba.fastjson.parser.DefaultJSONParser defaultJSONParser5 = new com.alibaba.fastjson.parser.DefaultJSONParser(":true");
        com.alibaba.fastjson.parser.SymbolTable symbolTable6 = defaultJSONParser5.symbolTable;
        defaultJSONParser5.resolveStatus = (byte) -1;
        java.text.DateFormat dateFormat9 = defaultJSONParser5.getDateFormat();
        com.alibaba.fastjson.parser.DefaultJSONParser defaultJSONParser11 = new com.alibaba.fastjson.parser.DefaultJSONParser(":true");
        java.util.List<com.alibaba.fastjson.parser.deserializer.ExtraTypeProvider> extraTypeProviderList12 = defaultJSONParser11.getExtraTypeProviders();
        defaultJSONParser5.checkListResolve((java.util.Collection) extraTypeProviderList12);
        java.lang.Object obj14 = defaultJSONParser5.input;
        // The following exception was thrown during execution in test generation
        try {
            defaultJSONParser1.parseObject((java.lang.Object) defaultJSONParser5);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson.JSONException; message: syntax error, expect {, actual :");
        } catch (com.alibaba.fastjson.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(symbolTable2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "yyyy-MM-dd HH:mm:ss" + "'", str3, "yyyy-MM-dd HH:mm:ss");
        org.junit.Assert.assertNotNull(symbolTable6);
        org.junit.Assert.assertNotNull(dateFormat9);
        org.junit.Assert.assertNotNull(extraTypeProviderList12);
        org.junit.Assert.assertEquals("'" + obj14 + "' != '" + ":true" + "'", obj14, ":true");
    }

    @Test
    public void test131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test131");
        java.io.Writer writer0 = null;
        com.alibaba.fastjson.serializer.SerializeWriter serializeWriter2 = new com.alibaba.fastjson.serializer.SerializeWriter(writer0, 10);
        serializeWriter2.write((int) (byte) -1);
        serializeWriter2.expandCapacity((int) (short) 10);
        java.lang.Object obj7 = null;
        com.alibaba.fastjson.serializer.SerializeConfig serializeConfig8 = null;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature10 = com.alibaba.fastjson.serializer.SerializerFeature.WriteTabAsSpecial;
        com.alibaba.fastjson.serializer.SerializeFilter[] serializeFilterArray12 = new com.alibaba.fastjson.serializer.SerializeFilter[] {};
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature13 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature14 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature15 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature16 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature17 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature[] serializerFeatureArray18 = new com.alibaba.fastjson.serializer.SerializerFeature[] { serializerFeature13, serializerFeature14, serializerFeature15, serializerFeature16, serializerFeature17 };
        byte[] byteArray19 = com.alibaba.fastjson.JSON.toJSONBytes((java.lang.Object) "hi!", serializeFilterArray12, serializerFeatureArray18);
        com.alibaba.fastjson.serializer.SerializeFilter[] serializeFilterArray21 = new com.alibaba.fastjson.serializer.SerializeFilter[] {};
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature22 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature23 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature24 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature25 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature26 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature[] serializerFeatureArray27 = new com.alibaba.fastjson.serializer.SerializerFeature[] { serializerFeature22, serializerFeature23, serializerFeature24, serializerFeature25, serializerFeature26 };
        byte[] byteArray28 = com.alibaba.fastjson.JSON.toJSONBytes((java.lang.Object) "hi!", serializeFilterArray21, serializerFeatureArray27);
        java.lang.String str29 = com.alibaba.fastjson.JSON.toJSONString((java.lang.Object) serializerFeature10, serializeFilterArray12, serializerFeatureArray27);
        byte[] byteArray30 = com.alibaba.fastjson.JSON.toJSONBytes(obj7, serializeConfig8, (int) (byte) -1, serializerFeatureArray27);
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature31 = com.alibaba.fastjson.serializer.SerializerFeature.WriteTabAsSpecial;
        com.alibaba.fastjson.serializer.SerializeFilter[] serializeFilterArray33 = new com.alibaba.fastjson.serializer.SerializeFilter[] {};
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature34 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature35 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature36 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature37 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature38 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature[] serializerFeatureArray39 = new com.alibaba.fastjson.serializer.SerializerFeature[] { serializerFeature34, serializerFeature35, serializerFeature36, serializerFeature37, serializerFeature38 };
        byte[] byteArray40 = com.alibaba.fastjson.JSON.toJSONBytes((java.lang.Object) "hi!", serializeFilterArray33, serializerFeatureArray39);
        com.alibaba.fastjson.serializer.SerializeFilter[] serializeFilterArray42 = new com.alibaba.fastjson.serializer.SerializeFilter[] {};
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature43 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature44 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature45 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature46 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature47 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature[] serializerFeatureArray48 = new com.alibaba.fastjson.serializer.SerializerFeature[] { serializerFeature43, serializerFeature44, serializerFeature45, serializerFeature46, serializerFeature47 };
        byte[] byteArray49 = com.alibaba.fastjson.JSON.toJSONBytes((java.lang.Object) "hi!", serializeFilterArray42, serializerFeatureArray48);
        java.lang.String str50 = com.alibaba.fastjson.JSON.toJSONString((java.lang.Object) serializerFeature31, serializeFilterArray33, serializerFeatureArray48);
        java.lang.String str51 = com.alibaba.fastjson.JSON.toJSONString((java.lang.Object) byteArray30, serializerFeatureArray48);
        byte[] byteArray52 = com.alibaba.fastjson.JSON.toJSONBytes((java.lang.Object) (short) 10, serializerFeatureArray48);
        java.nio.charset.CharsetDecoder charsetDecoder55 = null;
        java.lang.reflect.Type type56 = null;
        com.alibaba.fastjson.serializer.SerializeFilter[] serializeFilterArray58 = new com.alibaba.fastjson.serializer.SerializeFilter[] {};
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature59 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature60 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature61 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature62 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature63 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature[] serializerFeatureArray64 = new com.alibaba.fastjson.serializer.SerializerFeature[] { serializerFeature59, serializerFeature60, serializerFeature61, serializerFeature62, serializerFeature63 };
        byte[] byteArray65 = com.alibaba.fastjson.JSON.toJSONBytes((java.lang.Object) "hi!", serializeFilterArray58, serializerFeatureArray64);
        java.nio.charset.Charset charset68 = com.alibaba.fastjson.util.IOUtils.UTF8;
        java.lang.reflect.Type type69 = null;
        byte[] byteArray76 = new byte[] { (byte) 10, (byte) -1, (byte) 100, (byte) 10, (byte) 10, (byte) 1 };
        java.lang.reflect.Type type77 = null;
        com.alibaba.fastjson.parser.Feature feature78 = null;
        com.alibaba.fastjson.parser.Feature[] featureArray79 = new com.alibaba.fastjson.parser.Feature[] { feature78 };
        java.lang.Comparable<java.lang.String> strComparable80 = com.alibaba.fastjson.JSON.parseObject(byteArray76, type77, featureArray79);
        java.nio.charset.Charset charset81 = com.alibaba.fastjson.JSON.parseObject(byteArray65, 3089, (int) (short) -1, charset68, type69, featureArray79);
        com.alibaba.fastjson.serializer.SerializerFeature[] serializerFeatureArray83 = new com.alibaba.fastjson.serializer.SerializerFeature[] {};
        byte[] byteArray84 = com.alibaba.fastjson.JSON.toJSONBytes((java.lang.Object) 10.0d, serializerFeatureArray83);
        byte[] byteArray85 = com.alibaba.fastjson.JSON.toJSONBytes((java.lang.Object) featureArray79, serializerFeatureArray83);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Map<java.lang.String, java.lang.Object> strMap86 = com.alibaba.fastjson.JSON.parseObject(byteArray52, (int) (byte) -1, 2, charsetDecoder55, type56, featureArray79);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + serializerFeature10 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteTabAsSpecial + "'", serializerFeature10.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteTabAsSpecial));
        org.junit.Assert.assertNotNull(serializeFilterArray12);
        org.junit.Assert.assertTrue("'" + serializerFeature13 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature13.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature14 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature14.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature15 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature15.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + serializerFeature16 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature16.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature17 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature17.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertNotNull(serializerFeatureArray18);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[39, 104, 105, 33, 39]");
        org.junit.Assert.assertNotNull(serializeFilterArray21);
        org.junit.Assert.assertTrue("'" + serializerFeature22 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature22.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature23 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature23.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature24 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature24.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + serializerFeature25 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature25.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature26 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature26.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertNotNull(serializerFeatureArray27);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[39, 104, 105, 33, 39]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "'WriteTabAsSpecial'" + "'", str29, "'WriteTabAsSpecial'");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[110, 117, 108, 108]");
        org.junit.Assert.assertTrue("'" + serializerFeature31 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteTabAsSpecial + "'", serializerFeature31.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteTabAsSpecial));
        org.junit.Assert.assertNotNull(serializeFilterArray33);
        org.junit.Assert.assertTrue("'" + serializerFeature34 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature34.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature35 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature35.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature36 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature36.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + serializerFeature37 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature37.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature38 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature38.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertNotNull(serializerFeatureArray39);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[39, 104, 105, 33, 39]");
        org.junit.Assert.assertNotNull(serializeFilterArray42);
        org.junit.Assert.assertTrue("'" + serializerFeature43 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature43.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature44 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature44.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature45 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature45.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + serializerFeature46 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature46.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature47 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature47.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertNotNull(serializerFeatureArray48);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[39, 104, 105, 33, 39]");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "'WriteTabAsSpecial'" + "'", str50, "'WriteTabAsSpecial'");
// flaky:         org.junit.Assert.assertEquals("'" + str51 + "' != '" + "'bnVsb\000=='" + "'", str51, "'bnVsb\000=='");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[49, 48]");
        org.junit.Assert.assertNotNull(serializeFilterArray58);
        org.junit.Assert.assertTrue("'" + serializerFeature59 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature59.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature60 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature60.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature61 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature61.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + serializerFeature62 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature62.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature63 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature63.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertNotNull(serializerFeatureArray64);
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[39, 104, 105, 33, 39]");
        org.junit.Assert.assertNotNull(charset68);
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[10, -1, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(featureArray79);
        org.junit.Assert.assertNull(strComparable80);
        org.junit.Assert.assertNull(charset81);
        org.junit.Assert.assertNotNull(serializerFeatureArray83);
        org.junit.Assert.assertNotNull(byteArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray84), "[49, 48, 46, 48]");
        org.junit.Assert.assertNotNull(byteArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray85), "[91, 110, 117, 108, 108, 93]");
    }

    @Test
    public void test132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test132");
        java.io.Writer writer0 = null;
        com.alibaba.fastjson.serializer.SerializeWriter serializeWriter2 = new com.alibaba.fastjson.serializer.SerializeWriter(writer0, 10);
        serializeWriter2.write((int) (byte) -1);
        com.alibaba.fastjson.serializer.SerializeWriter serializeWriter6 = serializeWriter2.append('a');
        java.lang.String str7 = serializeWriter2.toString();
        org.junit.Assert.assertNotNull(serializeWriter6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\uffffa" + "'", str7, "\uffffa");
    }

    @Test
    public void test133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test133");
        com.alibaba.fastjson.parser.ParserConfig parserConfig1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj3 = com.alibaba.fastjson.JSON.parse("'WriteTabAsSpecial'", parserConfig1, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test134");
        com.alibaba.fastjson.JSONException jSONException1 = new com.alibaba.fastjson.JSONException("hi!");
        java.lang.String str2 = jSONException1.toString();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "com.alibaba.fastjson.JSONException: hi!" + "'", str2, "com.alibaba.fastjson.JSONException: hi!");
    }

    @Test
    public void test135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test135");
        java.io.Writer writer0 = null;
        com.alibaba.fastjson.serializer.SerializeWriter serializeWriter2 = new com.alibaba.fastjson.serializer.SerializeWriter(writer0, 10);
        serializeWriter2.write((int) (byte) -1);
        java.lang.String[] strArray35 = new java.lang.String[] { ":true", "1.2.76", "serialize exceeded MAX_OUTPUT_LENGTH=", "-2147483648", ", minimumCapacity=", "\"-9223372036854775808\"", "@type", "\"\"", "null:", "null:", "1.2.76", "Negative initial size:", ":true", "-9223372036854775808", "fastjson.serializer_buffer_threshold", "fastjson.compatibleWithFieldName", "'WriteMapNullValue'", "1.2.76", "UTF-8", "fastjson.compatibleWithJavaBean", "1.2.76", "Negative initial size:", "1.2.76", "\"-9223372036854775808\"", "''", "@type", "fastjson.serializer_buffer_threshold", "0.0", "1.2.76", ":false" };
        java.util.ArrayList<java.lang.String> strList36 = new java.util.ArrayList<java.lang.String>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList36, strArray35);
        serializeWriter2.write((java.util.List<java.lang.String>) strList36);
        serializeWriter2.writeLongAndChar((long) 'a', '#');
        com.alibaba.fastjson.serializer.SerializeFilter[] serializeFilterArray46 = new com.alibaba.fastjson.serializer.SerializeFilter[] {};
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature47 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature48 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature49 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature50 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature51 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature[] serializerFeatureArray52 = new com.alibaba.fastjson.serializer.SerializerFeature[] { serializerFeature47, serializerFeature48, serializerFeature49, serializerFeature50, serializerFeature51 };
        byte[] byteArray53 = com.alibaba.fastjson.JSON.toJSONBytes((java.lang.Object) "hi!", serializeFilterArray46, serializerFeatureArray52);
        java.lang.String str54 = com.alibaba.fastjson.JSON.toJSONStringWithDateFormat((java.lang.Object) "Negative initial size:", ", minimumCapacity=", serializerFeatureArray52);
        com.alibaba.fastjson.serializer.SerializeWriter serializeWriter55 = new com.alibaba.fastjson.serializer.SerializeWriter((java.io.Writer) serializeWriter2, (int) (short) 10, serializerFeatureArray52);
        serializeWriter2.writeString("");
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(serializeFilterArray46);
        org.junit.Assert.assertTrue("'" + serializerFeature47 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature47.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature48 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature48.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature49 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature49.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + serializerFeature50 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature50.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature51 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature51.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertNotNull(serializerFeatureArray52);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[39, 104, 105, 33, 39]");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "'Negative initial size:'" + "'", str54, "'Negative initial size:'");
    }

    @Test
    public void test136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test136");
        com.alibaba.fastjson.JSONObject jSONObject1 = new com.alibaba.fastjson.JSONObject(0);
        boolean boolean3 = jSONObject1.equals((java.lang.Object) (byte) 10);
        java.lang.Integer int5 = jSONObject1.getInteger("hi!");
        java.lang.String str7 = jSONObject1.getString("0.0");
        jSONObject1.clear();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(int5);
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test137");
        java.io.OutputStream outputStream0 = null;
        java.nio.charset.Charset charset1 = com.alibaba.fastjson.util.IOUtils.UTF8;
        com.alibaba.fastjson.JSONObject jSONObject3 = new com.alibaba.fastjson.JSONObject(0);
        boolean boolean5 = jSONObject3.equals((java.lang.Object) (byte) 10);
        java.util.Set<java.util.Map.Entry<java.lang.String, java.lang.Object>> strEntrySet6 = jSONObject3.entrySet();
        short short8 = jSONObject3.getShortValue("false");
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature9 = com.alibaba.fastjson.serializer.SerializerFeature.WriteMapNullValue;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature10 = com.alibaba.fastjson.serializer.SerializerFeature.WriteTabAsSpecial;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature11 = com.alibaba.fastjson.serializer.SerializerFeature.DisableCircularReferenceDetect;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature12 = com.alibaba.fastjson.serializer.SerializerFeature.SkipTransientField;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature13 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature14 = com.alibaba.fastjson.serializer.SerializerFeature.WriteBigDecimalAsPlain;
        com.alibaba.fastjson.serializer.SerializerFeature[] serializerFeatureArray15 = new com.alibaba.fastjson.serializer.SerializerFeature[] { serializerFeature10, serializerFeature11, serializerFeature12, serializerFeature13, serializerFeature14 };
        java.lang.String str16 = com.alibaba.fastjson.JSON.toJSONString((java.lang.Object) serializerFeature9, serializerFeatureArray15);
        // The following exception was thrown during execution in test generation
        try {
            int int17 = com.alibaba.fastjson.JSON.writeJSONString(outputStream0, charset1, (java.lang.Object) short8, serializerFeatureArray15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(strEntrySet6);
        org.junit.Assert.assertTrue("'" + short8 + "' != '" + (short) 0 + "'", short8 == (short) 0);
        org.junit.Assert.assertTrue("'" + serializerFeature9 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteMapNullValue + "'", serializerFeature9.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteMapNullValue));
        org.junit.Assert.assertTrue("'" + serializerFeature10 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteTabAsSpecial + "'", serializerFeature10.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteTabAsSpecial));
        org.junit.Assert.assertTrue("'" + serializerFeature11 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.DisableCircularReferenceDetect + "'", serializerFeature11.equals(com.alibaba.fastjson.serializer.SerializerFeature.DisableCircularReferenceDetect));
        org.junit.Assert.assertTrue("'" + serializerFeature12 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.SkipTransientField + "'", serializerFeature12.equals(com.alibaba.fastjson.serializer.SerializerFeature.SkipTransientField));
        org.junit.Assert.assertTrue("'" + serializerFeature13 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature13.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + serializerFeature14 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteBigDecimalAsPlain + "'", serializerFeature14.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteBigDecimalAsPlain));
        org.junit.Assert.assertNotNull(serializerFeatureArray15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "'WriteMapNullValue'" + "'", str16, "'WriteMapNullValue'");
    }

    @Test
    public void test138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test138");
        com.alibaba.fastjson.serializer.SerializeWriter serializeWriter0 = new com.alibaba.fastjson.serializer.SerializeWriter();
        // The following exception was thrown during execution in test generation
        try {
            serializeWriter0.write("com.alibaba.fastjson.JSONException: hi!", (int) (short) 0, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: 100");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test139");
        com.alibaba.fastjson.JSONException jSONException2 = new com.alibaba.fastjson.JSONException("hi!");
        com.alibaba.fastjson.JSONException jSONException3 = new com.alibaba.fastjson.JSONException("", (java.lang.Throwable) jSONException2);
        java.lang.Throwable throwable4 = null;
        // The following exception was thrown during execution in test generation
        try {
            jSONException3.addSuppressed(throwable4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot suppress a null exception.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test140");
        com.alibaba.fastjson.JSONObject jSONObject1 = new com.alibaba.fastjson.JSONObject((int) 'a');
    }

    @Test
    public void test141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test141");
        com.alibaba.fastjson.parser.DefaultJSONParser defaultJSONParser1 = new com.alibaba.fastjson.parser.DefaultJSONParser(":true");
        com.alibaba.fastjson.parser.SymbolTable symbolTable2 = defaultJSONParser1.getSymbolTable();
        com.alibaba.fastjson.parser.ParserConfig parserConfig3 = null;
        defaultJSONParser1.setConfig(parserConfig3);
        java.lang.reflect.Type type5 = null;
        java.lang.reflect.Type[] typeArray6 = new java.lang.reflect.Type[] { type5 };
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object[] objArray7 = defaultJSONParser1.parseArray(typeArray6);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson.JSONException; message: syntax error : :");
        } catch (com.alibaba.fastjson.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(symbolTable2);
        org.junit.Assert.assertNotNull(typeArray6);
    }

    @Test
    public void test142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test142");
        com.alibaba.fastjson.JSONObject jSONObject1 = new com.alibaba.fastjson.JSONObject(0);
        boolean boolean3 = jSONObject1.equals((java.lang.Object) (byte) 10);
        java.util.Set<java.util.Map.Entry<java.lang.String, java.lang.Object>> strEntrySet4 = jSONObject1.entrySet();
        com.alibaba.fastjson.serializer.SerializeFilter[] serializeFilterArray7 = new com.alibaba.fastjson.serializer.SerializeFilter[] {};
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature8 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature9 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature10 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature11 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature12 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature[] serializerFeatureArray13 = new com.alibaba.fastjson.serializer.SerializerFeature[] { serializerFeature8, serializerFeature9, serializerFeature10, serializerFeature11, serializerFeature12 };
        byte[] byteArray14 = com.alibaba.fastjson.JSON.toJSONBytes((java.lang.Object) "hi!", serializeFilterArray7, serializerFeatureArray13);
        java.lang.String str15 = com.alibaba.fastjson.JSON.toJSONStringWithDateFormat((java.lang.Object) jSONObject1, "null", serializerFeatureArray13);
        byte[] byteArray17 = jSONObject1.getBytes("\"\"");
        java.lang.Long long19 = jSONObject1.getLong("");
        com.alibaba.fastjson.serializer.SerializeConfig serializeConfig20 = null;
        java.io.Writer writer21 = null;
        com.alibaba.fastjson.serializer.SerializeWriter serializeWriter23 = new com.alibaba.fastjson.serializer.SerializeWriter(writer21, 10);
        serializeWriter23.write((int) (byte) -1);
        serializeWriter23.expandCapacity((int) (short) 10);
        java.lang.Object obj28 = null;
        com.alibaba.fastjson.serializer.SerializeConfig serializeConfig29 = null;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature31 = com.alibaba.fastjson.serializer.SerializerFeature.WriteTabAsSpecial;
        com.alibaba.fastjson.serializer.SerializeFilter[] serializeFilterArray33 = new com.alibaba.fastjson.serializer.SerializeFilter[] {};
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature34 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature35 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature36 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature37 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature38 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature[] serializerFeatureArray39 = new com.alibaba.fastjson.serializer.SerializerFeature[] { serializerFeature34, serializerFeature35, serializerFeature36, serializerFeature37, serializerFeature38 };
        byte[] byteArray40 = com.alibaba.fastjson.JSON.toJSONBytes((java.lang.Object) "hi!", serializeFilterArray33, serializerFeatureArray39);
        com.alibaba.fastjson.serializer.SerializeFilter[] serializeFilterArray42 = new com.alibaba.fastjson.serializer.SerializeFilter[] {};
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature43 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature44 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature45 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature46 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature47 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature[] serializerFeatureArray48 = new com.alibaba.fastjson.serializer.SerializerFeature[] { serializerFeature43, serializerFeature44, serializerFeature45, serializerFeature46, serializerFeature47 };
        byte[] byteArray49 = com.alibaba.fastjson.JSON.toJSONBytes((java.lang.Object) "hi!", serializeFilterArray42, serializerFeatureArray48);
        java.lang.String str50 = com.alibaba.fastjson.JSON.toJSONString((java.lang.Object) serializerFeature31, serializeFilterArray33, serializerFeatureArray48);
        byte[] byteArray51 = com.alibaba.fastjson.JSON.toJSONBytes(obj28, serializeConfig29, (int) (byte) -1, serializerFeatureArray48);
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature52 = com.alibaba.fastjson.serializer.SerializerFeature.WriteTabAsSpecial;
        com.alibaba.fastjson.serializer.SerializeFilter[] serializeFilterArray54 = new com.alibaba.fastjson.serializer.SerializeFilter[] {};
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature55 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature56 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature57 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature58 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature59 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature[] serializerFeatureArray60 = new com.alibaba.fastjson.serializer.SerializerFeature[] { serializerFeature55, serializerFeature56, serializerFeature57, serializerFeature58, serializerFeature59 };
        byte[] byteArray61 = com.alibaba.fastjson.JSON.toJSONBytes((java.lang.Object) "hi!", serializeFilterArray54, serializerFeatureArray60);
        com.alibaba.fastjson.serializer.SerializeFilter[] serializeFilterArray63 = new com.alibaba.fastjson.serializer.SerializeFilter[] {};
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature64 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature65 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature66 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature67 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature68 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature[] serializerFeatureArray69 = new com.alibaba.fastjson.serializer.SerializerFeature[] { serializerFeature64, serializerFeature65, serializerFeature66, serializerFeature67, serializerFeature68 };
        byte[] byteArray70 = com.alibaba.fastjson.JSON.toJSONBytes((java.lang.Object) "hi!", serializeFilterArray63, serializerFeatureArray69);
        java.lang.String str71 = com.alibaba.fastjson.JSON.toJSONString((java.lang.Object) serializerFeature52, serializeFilterArray54, serializerFeatureArray69);
        java.lang.String str72 = com.alibaba.fastjson.JSON.toJSONString((java.lang.Object) byteArray51, serializerFeatureArray69);
        byte[] byteArray73 = com.alibaba.fastjson.JSON.toJSONBytes((java.lang.Object) (short) 10, serializerFeatureArray69);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray74 = com.alibaba.fastjson.JSON.toJSONBytes((java.lang.Object) jSONObject1, serializeConfig20, serializerFeatureArray69);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(strEntrySet4);
        org.junit.Assert.assertNotNull(serializeFilterArray7);
        org.junit.Assert.assertTrue("'" + serializerFeature8 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature8.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature9 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature9.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature10 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature10.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + serializerFeature11 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature11.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature12 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature12.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertNotNull(serializerFeatureArray13);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[39, 104, 105, 33, 39]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "{}" + "'", str15, "{}");
        org.junit.Assert.assertNull(byteArray17);
        org.junit.Assert.assertNull(long19);
        org.junit.Assert.assertTrue("'" + serializerFeature31 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteTabAsSpecial + "'", serializerFeature31.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteTabAsSpecial));
        org.junit.Assert.assertNotNull(serializeFilterArray33);
        org.junit.Assert.assertTrue("'" + serializerFeature34 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature34.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature35 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature35.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature36 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature36.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + serializerFeature37 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature37.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature38 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature38.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertNotNull(serializerFeatureArray39);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[39, 104, 105, 33, 39]");
        org.junit.Assert.assertNotNull(serializeFilterArray42);
        org.junit.Assert.assertTrue("'" + serializerFeature43 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature43.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature44 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature44.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature45 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature45.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + serializerFeature46 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature46.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature47 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature47.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertNotNull(serializerFeatureArray48);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[39, 104, 105, 33, 39]");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "'WriteTabAsSpecial'" + "'", str50, "'WriteTabAsSpecial'");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[110, 117, 108, 108]");
        org.junit.Assert.assertTrue("'" + serializerFeature52 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteTabAsSpecial + "'", serializerFeature52.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteTabAsSpecial));
        org.junit.Assert.assertNotNull(serializeFilterArray54);
        org.junit.Assert.assertTrue("'" + serializerFeature55 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature55.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature56 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature56.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature57 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature57.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + serializerFeature58 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature58.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature59 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature59.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertNotNull(serializerFeatureArray60);
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[39, 104, 105, 33, 39]");
        org.junit.Assert.assertNotNull(serializeFilterArray63);
        org.junit.Assert.assertTrue("'" + serializerFeature64 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature64.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature65 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature65.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature66 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature66.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + serializerFeature67 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature67.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature68 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature68.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertNotNull(serializerFeatureArray69);
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[39, 104, 105, 33, 39]");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "'WriteTabAsSpecial'" + "'", str71, "'WriteTabAsSpecial'");
// flaky:         org.junit.Assert.assertEquals("'" + str72 + "' != '" + "'bnVsb\000=='" + "'", str72, "'bnVsb\000=='");
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[49, 48]");
    }

    @Test
    public void test143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test143");
        com.alibaba.fastjson.JSONObject jSONObject1 = new com.alibaba.fastjson.JSONObject(0);
        boolean boolean3 = jSONObject1.equals((java.lang.Object) (byte) 10);
        java.lang.Float float5 = jSONObject1.getFloat("UTF-8");
        com.alibaba.fastjson.JSONObject jSONObject6 = new com.alibaba.fastjson.JSONObject((java.util.Map<java.lang.String, java.lang.Object>) jSONObject1);
        java.lang.Double double8 = jSONObject6.getDouble("writer not null");
        int int10 = jSONObject6.getIntValue("BeanToArray");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(float5);
        org.junit.Assert.assertNull(double8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test144");
        com.alibaba.fastjson.JSONObject jSONObject1 = new com.alibaba.fastjson.JSONObject(0);
        boolean boolean3 = jSONObject1.equals((java.lang.Object) (byte) 10);
        java.lang.Float float5 = jSONObject1.getFloat("UTF-8");
        com.alibaba.fastjson.JSONObject jSONObject6 = new com.alibaba.fastjson.JSONObject((java.util.Map<java.lang.String, java.lang.Object>) jSONObject1);
        java.lang.Double double8 = jSONObject1.getDouble("\"\"");
        java.sql.Timestamp timestamp10 = jSONObject1.getTimestamp("Negative initial size:");
        java.util.Set<java.lang.String> strSet11 = jSONObject1.keySet();
        java.lang.Double double13 = jSONObject1.getDouble(":false");
        com.alibaba.fastjson.JSONObject jSONObject16 = new com.alibaba.fastjson.JSONObject(0);
        boolean boolean18 = jSONObject16.equals((java.lang.Object) (byte) 10);
        java.lang.Float float20 = jSONObject16.getFloat("UTF-8");
        com.alibaba.fastjson.parser.ParserConfig parserConfig21 = null;
        java.lang.Object obj22 = com.alibaba.fastjson.JSON.toJSON((java.lang.Object) jSONObject16, parserConfig21);
        com.alibaba.fastjson.JSONObject jSONObject24 = jSONObject16.fluentRemove((java.lang.Object) 1.0d);
        java.lang.Object obj25 = jSONObject1.putIfAbsent("fastjson.serializer_buffer_threshold", (java.lang.Object) jSONObject16);
        java.io.Writer writer26 = null;
        com.alibaba.fastjson.serializer.SerializeWriter serializeWriter28 = new com.alibaba.fastjson.serializer.SerializeWriter(writer26, 10);
        serializeWriter28.writeStringWithDoubleQuote("'WriteTabAsSpecial'", '4');
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature32 = com.alibaba.fastjson.serializer.SerializerFeature.WriteTabAsSpecial;
        com.alibaba.fastjson.serializer.SerializeFilter[] serializeFilterArray34 = new com.alibaba.fastjson.serializer.SerializeFilter[] {};
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature35 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature36 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature37 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature38 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature39 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature[] serializerFeatureArray40 = new com.alibaba.fastjson.serializer.SerializerFeature[] { serializerFeature35, serializerFeature36, serializerFeature37, serializerFeature38, serializerFeature39 };
        byte[] byteArray41 = com.alibaba.fastjson.JSON.toJSONBytes((java.lang.Object) "hi!", serializeFilterArray34, serializerFeatureArray40);
        com.alibaba.fastjson.serializer.SerializeFilter[] serializeFilterArray43 = new com.alibaba.fastjson.serializer.SerializeFilter[] {};
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature44 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature45 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature46 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature47 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature48 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature[] serializerFeatureArray49 = new com.alibaba.fastjson.serializer.SerializerFeature[] { serializerFeature44, serializerFeature45, serializerFeature46, serializerFeature47, serializerFeature48 };
        byte[] byteArray50 = com.alibaba.fastjson.JSON.toJSONBytes((java.lang.Object) "hi!", serializeFilterArray43, serializerFeatureArray49);
        java.lang.String str51 = com.alibaba.fastjson.JSON.toJSONString((java.lang.Object) serializerFeature32, serializeFilterArray34, serializerFeatureArray49);
        com.alibaba.fastjson.serializer.SerializeWriter serializeWriter52 = new com.alibaba.fastjson.serializer.SerializeWriter((java.io.Writer) serializeWriter28, serializerFeatureArray49);
        java.lang.String str53 = jSONObject1.toString(serializerFeatureArray49);
        com.alibaba.fastjson.JSONObject jSONObject55 = new com.alibaba.fastjson.JSONObject(0);
        boolean boolean57 = jSONObject55.equals((java.lang.Object) (byte) 10);
        java.lang.Float float59 = jSONObject55.getFloat("UTF-8");
        boolean boolean60 = jSONObject55.isEmpty();
        boolean boolean61 = jSONObject1.containsValue((java.lang.Object) jSONObject55);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(float5);
        org.junit.Assert.assertNull(double8);
        org.junit.Assert.assertNull(timestamp10);
        org.junit.Assert.assertNotNull(strSet11);
        org.junit.Assert.assertNull(double13);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(float20);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertEquals(obj22.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj22), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj22), "{}");
        org.junit.Assert.assertNotNull(jSONObject24);
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertTrue("'" + serializerFeature32 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteTabAsSpecial + "'", serializerFeature32.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteTabAsSpecial));
        org.junit.Assert.assertNotNull(serializeFilterArray34);
        org.junit.Assert.assertTrue("'" + serializerFeature35 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature35.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature36 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature36.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature37 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature37.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + serializerFeature38 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature38.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature39 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature39.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertNotNull(serializerFeatureArray40);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[39, 104, 105, 33, 39]");
        org.junit.Assert.assertNotNull(serializeFilterArray43);
        org.junit.Assert.assertTrue("'" + serializerFeature44 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature44.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature45 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature45.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature46 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature46.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + serializerFeature47 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature47.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature48 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature48.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertNotNull(serializerFeatureArray49);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[39, 104, 105, 33, 39]");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "'WriteTabAsSpecial'" + "'", str51, "'WriteTabAsSpecial'");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "{fastjson.serializer_buffer_threshold:{}}" + "'", str53, "{fastjson.serializer_buffer_threshold:{}}");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNull(float59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
    }

    @Test
    public void test145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test145");
        com.alibaba.fastjson.parser.JSONLexer jSONLexer0 = null;
        com.alibaba.fastjson.parser.ParserConfig parserConfig1 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.alibaba.fastjson.parser.DefaultJSONParser defaultJSONParser2 = new com.alibaba.fastjson.parser.DefaultJSONParser(jSONLexer0, parserConfig1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test146");
        com.alibaba.fastjson.JSONObject jSONObject1 = new com.alibaba.fastjson.JSONObject(0);
        boolean boolean3 = jSONObject1.equals((java.lang.Object) (byte) 10);
        java.util.Set<java.util.Map.Entry<java.lang.String, java.lang.Object>> strEntrySet4 = jSONObject1.entrySet();
        com.alibaba.fastjson.serializer.SerializeFilter[] serializeFilterArray7 = new com.alibaba.fastjson.serializer.SerializeFilter[] {};
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature8 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature9 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature10 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature11 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature12 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature[] serializerFeatureArray13 = new com.alibaba.fastjson.serializer.SerializerFeature[] { serializerFeature8, serializerFeature9, serializerFeature10, serializerFeature11, serializerFeature12 };
        byte[] byteArray14 = com.alibaba.fastjson.JSON.toJSONBytes((java.lang.Object) "hi!", serializeFilterArray7, serializerFeatureArray13);
        java.lang.String str15 = com.alibaba.fastjson.JSON.toJSONStringWithDateFormat((java.lang.Object) jSONObject1, "null", serializerFeatureArray13);
        byte[] byteArray17 = jSONObject1.getBytes("\"\"");
        java.math.BigInteger bigInteger19 = jSONObject1.getBigInteger("\"'WriteTabAsSpecial'\"4");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(strEntrySet4);
        org.junit.Assert.assertNotNull(serializeFilterArray7);
        org.junit.Assert.assertTrue("'" + serializerFeature8 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature8.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature9 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature9.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature10 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature10.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + serializerFeature11 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature11.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature12 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature12.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertNotNull(serializerFeatureArray13);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[39, 104, 105, 33, 39]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "{}" + "'", str15, "{}");
        org.junit.Assert.assertNull(byteArray17);
        org.junit.Assert.assertNull(bigInteger19);
    }

    @Test
    public void test147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test147");
        com.alibaba.fastjson.serializer.SerializeConfig serializeConfig1 = null;
        com.alibaba.fastjson.serializer.SerializeFilter serializeFilter2 = null;
        com.alibaba.fastjson.JSONObject jSONObject4 = new com.alibaba.fastjson.JSONObject(0);
        boolean boolean6 = jSONObject4.equals((java.lang.Object) (byte) 10);
        java.lang.Float float8 = jSONObject4.getFloat("UTF-8");
        com.alibaba.fastjson.JSONObject jSONObject9 = new com.alibaba.fastjson.JSONObject((java.util.Map<java.lang.String, java.lang.Object>) jSONObject4);
        java.lang.Double double11 = jSONObject4.getDouble("\"\"");
        java.sql.Timestamp timestamp13 = jSONObject4.getTimestamp("Negative initial size:");
        java.util.Set<java.lang.String> strSet14 = jSONObject4.keySet();
        java.lang.Double double16 = jSONObject4.getDouble(":false");
        com.alibaba.fastjson.JSONObject jSONObject19 = new com.alibaba.fastjson.JSONObject(0);
        boolean boolean21 = jSONObject19.equals((java.lang.Object) (byte) 10);
        java.lang.Float float23 = jSONObject19.getFloat("UTF-8");
        com.alibaba.fastjson.parser.ParserConfig parserConfig24 = null;
        java.lang.Object obj25 = com.alibaba.fastjson.JSON.toJSON((java.lang.Object) jSONObject19, parserConfig24);
        com.alibaba.fastjson.JSONObject jSONObject27 = jSONObject19.fluentRemove((java.lang.Object) 1.0d);
        java.lang.Object obj28 = jSONObject4.putIfAbsent("fastjson.serializer_buffer_threshold", (java.lang.Object) jSONObject19);
        java.io.Writer writer29 = null;
        com.alibaba.fastjson.serializer.SerializeWriter serializeWriter31 = new com.alibaba.fastjson.serializer.SerializeWriter(writer29, 10);
        serializeWriter31.writeStringWithDoubleQuote("'WriteTabAsSpecial'", '4');
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature35 = com.alibaba.fastjson.serializer.SerializerFeature.WriteTabAsSpecial;
        com.alibaba.fastjson.serializer.SerializeFilter[] serializeFilterArray37 = new com.alibaba.fastjson.serializer.SerializeFilter[] {};
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature38 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature39 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature40 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature41 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature42 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature[] serializerFeatureArray43 = new com.alibaba.fastjson.serializer.SerializerFeature[] { serializerFeature38, serializerFeature39, serializerFeature40, serializerFeature41, serializerFeature42 };
        byte[] byteArray44 = com.alibaba.fastjson.JSON.toJSONBytes((java.lang.Object) "hi!", serializeFilterArray37, serializerFeatureArray43);
        com.alibaba.fastjson.serializer.SerializeFilter[] serializeFilterArray46 = new com.alibaba.fastjson.serializer.SerializeFilter[] {};
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature47 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature48 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature49 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature50 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature51 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature[] serializerFeatureArray52 = new com.alibaba.fastjson.serializer.SerializerFeature[] { serializerFeature47, serializerFeature48, serializerFeature49, serializerFeature50, serializerFeature51 };
        byte[] byteArray53 = com.alibaba.fastjson.JSON.toJSONBytes((java.lang.Object) "hi!", serializeFilterArray46, serializerFeatureArray52);
        java.lang.String str54 = com.alibaba.fastjson.JSON.toJSONString((java.lang.Object) serializerFeature35, serializeFilterArray37, serializerFeatureArray52);
        com.alibaba.fastjson.serializer.SerializeWriter serializeWriter55 = new com.alibaba.fastjson.serializer.SerializeWriter((java.io.Writer) serializeWriter31, serializerFeatureArray52);
        java.lang.String str56 = jSONObject4.toString(serializerFeatureArray52);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str57 = com.alibaba.fastjson.JSON.toJSONString((java.lang.Object) 10, serializeConfig1, serializeFilter2, serializerFeatureArray52);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(float8);
        org.junit.Assert.assertNull(double11);
        org.junit.Assert.assertNull(timestamp13);
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertNull(double16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(float23);
        org.junit.Assert.assertNotNull(obj25);
        org.junit.Assert.assertEquals(obj25.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj25), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj25), "{}");
        org.junit.Assert.assertNotNull(jSONObject27);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertTrue("'" + serializerFeature35 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteTabAsSpecial + "'", serializerFeature35.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteTabAsSpecial));
        org.junit.Assert.assertNotNull(serializeFilterArray37);
        org.junit.Assert.assertTrue("'" + serializerFeature38 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature38.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature39 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature39.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature40 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature40.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + serializerFeature41 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature41.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature42 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature42.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertNotNull(serializerFeatureArray43);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[39, 104, 105, 33, 39]");
        org.junit.Assert.assertNotNull(serializeFilterArray46);
        org.junit.Assert.assertTrue("'" + serializerFeature47 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature47.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature48 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature48.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature49 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature49.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + serializerFeature50 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature50.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature51 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature51.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertNotNull(serializerFeatureArray52);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[39, 104, 105, 33, 39]");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "'WriteTabAsSpecial'" + "'", str54, "'WriteTabAsSpecial'");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "{fastjson.serializer_buffer_threshold:{}}" + "'", str56, "{fastjson.serializer_buffer_threshold:{}}");
    }

    @Test
    public void test148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test148");
        com.alibaba.fastjson.parser.DefaultJSONParser defaultJSONParser1 = new com.alibaba.fastjson.parser.DefaultJSONParser(":true");
        com.alibaba.fastjson.parser.SymbolTable symbolTable2 = defaultJSONParser1.symbolTable;
        defaultJSONParser1.resolveStatus = (byte) -1;
        com.alibaba.fastjson.parser.deserializer.FieldTypeResolver fieldTypeResolver5 = null;
        defaultJSONParser1.setFieldTypeResolver(fieldTypeResolver5);
        org.junit.Assert.assertNotNull(symbolTable2);
    }

    @Test
    public void test149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test149");
        com.alibaba.fastjson.JSONObject jSONObject2 = new com.alibaba.fastjson.JSONObject(0);
        boolean boolean4 = jSONObject2.equals((java.lang.Object) (byte) 10);
        java.util.Set<java.util.Map.Entry<java.lang.String, java.lang.Object>> strEntrySet5 = jSONObject2.entrySet();
        short short7 = jSONObject2.getShortValue("UTF-8");
        java.lang.String str9 = jSONObject2.getString("null:");
        java.lang.Class<?> wildcardClass10 = jSONObject2.getClass();
        com.alibaba.fastjson.JSONObject jSONObject12 = new com.alibaba.fastjson.JSONObject(0);
        boolean boolean14 = jSONObject12.equals((java.lang.Object) (byte) 10);
        java.util.Set<java.util.Map.Entry<java.lang.String, java.lang.Object>> strEntrySet15 = jSONObject12.entrySet();
        short short17 = jSONObject12.getShortValue("UTF-8");
        java.lang.String str19 = jSONObject12.getString("null:");
        java.lang.Class<?> wildcardClass20 = jSONObject12.getClass();
        com.alibaba.fastjson.JSONObject jSONObject22 = new com.alibaba.fastjson.JSONObject(0);
        boolean boolean24 = jSONObject22.equals((java.lang.Object) (byte) 10);
        java.util.Set<java.util.Map.Entry<java.lang.String, java.lang.Object>> strEntrySet25 = jSONObject22.entrySet();
        short short27 = jSONObject22.getShortValue("UTF-8");
        java.lang.String str29 = jSONObject22.getString("null:");
        java.lang.Class<?> wildcardClass30 = jSONObject22.getClass();
        com.alibaba.fastjson.JSONObject jSONObject32 = new com.alibaba.fastjson.JSONObject(0);
        boolean boolean34 = jSONObject32.equals((java.lang.Object) (byte) 10);
        java.util.Set<java.util.Map.Entry<java.lang.String, java.lang.Object>> strEntrySet35 = jSONObject32.entrySet();
        short short37 = jSONObject32.getShortValue("UTF-8");
        java.lang.String str39 = jSONObject32.getString("null:");
        java.lang.Class<?> wildcardClass40 = jSONObject32.getClass();
        com.alibaba.fastjson.JSONObject jSONObject42 = new com.alibaba.fastjson.JSONObject(0);
        boolean boolean44 = jSONObject42.equals((java.lang.Object) (byte) 10);
        java.util.Set<java.util.Map.Entry<java.lang.String, java.lang.Object>> strEntrySet45 = jSONObject42.entrySet();
        short short47 = jSONObject42.getShortValue("UTF-8");
        java.lang.String str49 = jSONObject42.getString("null:");
        java.lang.Class<?> wildcardClass50 = jSONObject42.getClass();
        java.lang.reflect.Type[] typeArray51 = new java.lang.reflect.Type[] { wildcardClass10, wildcardClass20, wildcardClass30, wildcardClass40, wildcardClass50 };
        com.alibaba.fastjson.parser.ParserConfig parserConfig52 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.Object> objList53 = com.alibaba.fastjson.JSON.parseArray("com.alibaba.fastjson.JSONException: hi!", typeArray51, parserConfig52);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(strEntrySet5);
        org.junit.Assert.assertTrue("'" + short7 + "' != '" + (short) 0 + "'", short7 == (short) 0);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(strEntrySet15);
        org.junit.Assert.assertTrue("'" + short17 + "' != '" + (short) 0 + "'", short17 == (short) 0);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(strEntrySet25);
        org.junit.Assert.assertTrue("'" + short27 + "' != '" + (short) 0 + "'", short27 == (short) 0);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(wildcardClass30);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(strEntrySet35);
        org.junit.Assert.assertTrue("'" + short37 + "' != '" + (short) 0 + "'", short37 == (short) 0);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(strEntrySet45);
        org.junit.Assert.assertTrue("'" + short47 + "' != '" + (short) 0 + "'", short47 == (short) 0);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNotNull(wildcardClass50);
        org.junit.Assert.assertNotNull(typeArray51);
    }

    @Test
    public void test150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test150");
        java.io.Writer writer0 = null;
        com.alibaba.fastjson.serializer.SerializeWriter serializeWriter2 = new com.alibaba.fastjson.serializer.SerializeWriter(writer0, 10);
        serializeWriter2.write((int) (byte) -1);
        java.lang.String[] strArray35 = new java.lang.String[] { ":true", "1.2.76", "serialize exceeded MAX_OUTPUT_LENGTH=", "-2147483648", ", minimumCapacity=", "\"-9223372036854775808\"", "@type", "\"\"", "null:", "null:", "1.2.76", "Negative initial size:", ":true", "-9223372036854775808", "fastjson.serializer_buffer_threshold", "fastjson.compatibleWithFieldName", "'WriteMapNullValue'", "1.2.76", "UTF-8", "fastjson.compatibleWithJavaBean", "1.2.76", "Negative initial size:", "1.2.76", "\"-9223372036854775808\"", "''", "@type", "fastjson.serializer_buffer_threshold", "0.0", "1.2.76", ":false" };
        java.util.ArrayList<java.lang.String> strList36 = new java.util.ArrayList<java.lang.String>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList36, strArray35);
        serializeWriter2.write((java.util.List<java.lang.String>) strList36);
        com.alibaba.fastjson.serializer.SerializeConfig serializeConfig39 = null;
        com.alibaba.fastjson.serializer.SerializeFilter serializeFilter40 = null;
        com.alibaba.fastjson.serializer.SerializeFilter[] serializeFilterArray42 = new com.alibaba.fastjson.serializer.SerializeFilter[] {};
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature43 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature44 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature45 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature46 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature47 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature[] serializerFeatureArray48 = new com.alibaba.fastjson.serializer.SerializerFeature[] { serializerFeature43, serializerFeature44, serializerFeature45, serializerFeature46, serializerFeature47 };
        byte[] byteArray49 = com.alibaba.fastjson.JSON.toJSONBytes((java.lang.Object) "hi!", serializeFilterArray42, serializerFeatureArray48);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str50 = com.alibaba.fastjson.JSON.toJSONString((java.lang.Object) serializeWriter2, serializeConfig39, serializeFilter40, serializerFeatureArray48);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(serializeFilterArray42);
        org.junit.Assert.assertTrue("'" + serializerFeature43 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature43.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature44 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature44.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature45 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature45.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + serializerFeature46 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature46.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature47 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature47.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertNotNull(serializerFeatureArray48);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[39, 104, 105, 33, 39]");
    }

    @Test
    public void test151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test151");
        com.alibaba.fastjson.serializer.SerializeFilter[] serializeFilterArray1 = new com.alibaba.fastjson.serializer.SerializeFilter[] {};
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature2 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature3 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature4 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature5 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature6 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature[] serializerFeatureArray7 = new com.alibaba.fastjson.serializer.SerializerFeature[] { serializerFeature2, serializerFeature3, serializerFeature4, serializerFeature5, serializerFeature6 };
        byte[] byteArray8 = com.alibaba.fastjson.JSON.toJSONBytes((java.lang.Object) "hi!", serializeFilterArray1, serializerFeatureArray7);
        java.nio.charset.Charset charset11 = com.alibaba.fastjson.util.IOUtils.UTF8;
        java.lang.reflect.Type type12 = null;
        byte[] byteArray19 = new byte[] { (byte) 10, (byte) -1, (byte) 100, (byte) 10, (byte) 10, (byte) 1 };
        java.lang.reflect.Type type20 = null;
        com.alibaba.fastjson.parser.Feature feature21 = null;
        com.alibaba.fastjson.parser.Feature[] featureArray22 = new com.alibaba.fastjson.parser.Feature[] { feature21 };
        java.lang.Comparable<java.lang.String> strComparable23 = com.alibaba.fastjson.JSON.parseObject(byteArray19, type20, featureArray22);
        java.nio.charset.Charset charset24 = com.alibaba.fastjson.JSON.parseObject(byteArray8, 3089, (int) (short) -1, charset11, type12, featureArray22);
        com.alibaba.fastjson.serializer.SerializeConfig serializeConfig26 = null;
        com.alibaba.fastjson.JSONObject jSONObject28 = new com.alibaba.fastjson.JSONObject(0);
        boolean boolean30 = jSONObject28.equals((java.lang.Object) (byte) 10);
        java.lang.Integer int32 = jSONObject28.getInteger("hi!");
        boolean boolean34 = jSONObject28.getBooleanValue(":false");
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature35 = com.alibaba.fastjson.serializer.SerializerFeature.WriteTabAsSpecial;
        com.alibaba.fastjson.serializer.SerializeFilter[] serializeFilterArray37 = new com.alibaba.fastjson.serializer.SerializeFilter[] {};
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature38 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature39 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature40 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature41 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature42 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature[] serializerFeatureArray43 = new com.alibaba.fastjson.serializer.SerializerFeature[] { serializerFeature38, serializerFeature39, serializerFeature40, serializerFeature41, serializerFeature42 };
        byte[] byteArray44 = com.alibaba.fastjson.JSON.toJSONBytes((java.lang.Object) "hi!", serializeFilterArray37, serializerFeatureArray43);
        com.alibaba.fastjson.serializer.SerializeFilter[] serializeFilterArray46 = new com.alibaba.fastjson.serializer.SerializeFilter[] {};
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature47 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature48 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature49 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature50 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature51 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature[] serializerFeatureArray52 = new com.alibaba.fastjson.serializer.SerializerFeature[] { serializerFeature47, serializerFeature48, serializerFeature49, serializerFeature50, serializerFeature51 };
        byte[] byteArray53 = com.alibaba.fastjson.JSON.toJSONBytes((java.lang.Object) "hi!", serializeFilterArray46, serializerFeatureArray52);
        java.lang.String str54 = com.alibaba.fastjson.JSON.toJSONString((java.lang.Object) serializerFeature35, serializeFilterArray37, serializerFeatureArray52);
        java.lang.Object obj55 = jSONObject28.get((java.lang.Object) serializeFilterArray37);
        com.alibaba.fastjson.JSONObject jSONObject59 = new com.alibaba.fastjson.JSONObject(0);
        boolean boolean61 = jSONObject59.equals((java.lang.Object) (byte) 10);
        java.util.Set<java.util.Map.Entry<java.lang.String, java.lang.Object>> strEntrySet62 = jSONObject59.entrySet();
        com.alibaba.fastjson.serializer.SerializeFilter[] serializeFilterArray65 = new com.alibaba.fastjson.serializer.SerializeFilter[] {};
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature66 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature67 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature68 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature69 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature70 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature[] serializerFeatureArray71 = new com.alibaba.fastjson.serializer.SerializerFeature[] { serializerFeature66, serializerFeature67, serializerFeature68, serializerFeature69, serializerFeature70 };
        byte[] byteArray72 = com.alibaba.fastjson.JSON.toJSONBytes((java.lang.Object) "hi!", serializeFilterArray65, serializerFeatureArray71);
        java.lang.String str73 = com.alibaba.fastjson.JSON.toJSONStringWithDateFormat((java.lang.Object) jSONObject59, "null", serializerFeatureArray71);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray74 = com.alibaba.fastjson.JSON.toJSONBytesWithFastJsonConfig(charset24, (java.lang.Object) 0.0f, serializeConfig26, serializeFilterArray37, "'WriteMapNullValue'", 1, serializerFeatureArray71);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(serializeFilterArray1);
        org.junit.Assert.assertTrue("'" + serializerFeature2 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature2.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature3 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature3.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature4 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature4.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + serializerFeature5 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature5.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature6 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature6.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertNotNull(serializerFeatureArray7);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[39, 104, 105, 33, 39]");
        org.junit.Assert.assertNotNull(charset11);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[10, -1, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(featureArray22);
        org.junit.Assert.assertNull(strComparable23);
        org.junit.Assert.assertNull(charset24);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(int32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + serializerFeature35 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteTabAsSpecial + "'", serializerFeature35.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteTabAsSpecial));
        org.junit.Assert.assertNotNull(serializeFilterArray37);
        org.junit.Assert.assertTrue("'" + serializerFeature38 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature38.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature39 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature39.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature40 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature40.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + serializerFeature41 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature41.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature42 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature42.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertNotNull(serializerFeatureArray43);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[39, 104, 105, 33, 39]");
        org.junit.Assert.assertNotNull(serializeFilterArray46);
        org.junit.Assert.assertTrue("'" + serializerFeature47 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature47.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature48 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature48.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature49 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature49.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + serializerFeature50 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature50.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature51 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature51.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertNotNull(serializerFeatureArray52);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[39, 104, 105, 33, 39]");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "'WriteTabAsSpecial'" + "'", str54, "'WriteTabAsSpecial'");
        org.junit.Assert.assertNull(obj55);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(strEntrySet62);
        org.junit.Assert.assertNotNull(serializeFilterArray65);
        org.junit.Assert.assertTrue("'" + serializerFeature66 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature66.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature67 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature67.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature68 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature68.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + serializerFeature69 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature69.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature70 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature70.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertNotNull(serializerFeatureArray71);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[39, 104, 105, 33, 39]");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "{}" + "'", str73, "{}");
    }

    @Test
    public void test152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test152");
        com.alibaba.fastjson.JSON.DEFFAULT_DATE_FORMAT = "Negative initial size:";
    }

    @Test
    public void test153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test153");
        byte[] byteArray0 = com.alibaba.fastjson.util.IOUtils.specicalFlags_singleQuotes;
        char[] charArray5 = com.alibaba.fastjson.util.IOUtils.CA;
        com.alibaba.fastjson.util.IOUtils.getChars((long) 0, (int) ' ', charArray5);
        int int7 = com.alibaba.fastjson.util.IOUtils.decodeUTF8(byteArray0, 100, (int) (short) 10, charArray5);
        java.nio.charset.CharsetDecoder charsetDecoder10 = null;
        java.lang.reflect.Type type11 = null;
        com.alibaba.fastjson.serializer.SerializeFilter[] serializeFilterArray13 = new com.alibaba.fastjson.serializer.SerializeFilter[] {};
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature14 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature15 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature16 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature17 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature18 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature[] serializerFeatureArray19 = new com.alibaba.fastjson.serializer.SerializerFeature[] { serializerFeature14, serializerFeature15, serializerFeature16, serializerFeature17, serializerFeature18 };
        byte[] byteArray20 = com.alibaba.fastjson.JSON.toJSONBytes((java.lang.Object) "hi!", serializeFilterArray13, serializerFeatureArray19);
        java.nio.charset.Charset charset23 = com.alibaba.fastjson.util.IOUtils.UTF8;
        java.lang.reflect.Type type24 = null;
        byte[] byteArray31 = new byte[] { (byte) 10, (byte) -1, (byte) 100, (byte) 10, (byte) 10, (byte) 1 };
        java.lang.reflect.Type type32 = null;
        com.alibaba.fastjson.parser.Feature feature33 = null;
        com.alibaba.fastjson.parser.Feature[] featureArray34 = new com.alibaba.fastjson.parser.Feature[] { feature33 };
        java.lang.Comparable<java.lang.String> strComparable35 = com.alibaba.fastjson.JSON.parseObject(byteArray31, type32, featureArray34);
        java.nio.charset.Charset charset36 = com.alibaba.fastjson.JSON.parseObject(byteArray20, 3089, (int) (short) -1, charset23, type24, featureArray34);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Cloneable cloneable37 = com.alibaba.fastjson.JSON.parseObject(byteArray0, (int) '4', (-1), charsetDecoder10, type11, featureArray34);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray0), "[4, 4, 4, 4, 4, 4, 4, 4, 1, 1, 1, 4, 1, 1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0]");
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "\000\000\000\000\000\000\000\000\000\000KLMNOPQRSTUVWXYZabcde0ghijklmnopqrstuvwxyz0123456789+/");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "\000\000\000\000\000\000\000\000\000\000KLMNOPQRSTUVWXYZabcde0ghijklmnopqrstuvwxyz0123456789+/");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[\000, \000, \000, \000, \000, \000, \000, \000, \000, \000, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z, a, b, c, d, e, 0, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, +, /]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(serializeFilterArray13);
        org.junit.Assert.assertTrue("'" + serializerFeature14 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature14.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature15 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature15.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature16 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature16.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + serializerFeature17 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature17.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature18 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature18.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertNotNull(serializerFeatureArray19);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[39, 104, 105, 33, 39]");
        org.junit.Assert.assertNotNull(charset23);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[10, -1, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(featureArray34);
        org.junit.Assert.assertNull(strComparable35);
        org.junit.Assert.assertNull(charset36);
    }

    @Test
    public void test154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test154");
        com.alibaba.fastjson.parser.DefaultJSONParser defaultJSONParser1 = new com.alibaba.fastjson.parser.DefaultJSONParser(":true");
        com.alibaba.fastjson.parser.SymbolTable symbolTable2 = defaultJSONParser1.getSymbolTable();
        com.alibaba.fastjson.parser.ParserConfig parserConfig3 = null;
        defaultJSONParser1.setConfig(parserConfig3);
        com.alibaba.fastjson.parser.ParseContext parseContext5 = null;
        com.alibaba.fastjson.parser.DefaultJSONParser.ResolveTask resolveTask7 = new com.alibaba.fastjson.parser.DefaultJSONParser.ResolveTask(parseContext5, "null");
        defaultJSONParser1.addResolveTask(resolveTask7);
        // The following exception was thrown during execution in test generation
        try {
            java.text.DateFormat dateFormat9 = defaultJSONParser1.getDateFormat();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern character 'N'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(symbolTable2);
    }

    @Test
    public void test155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test155");
        com.alibaba.fastjson.JSON.clearMixInAnnotations();
    }

    @Test
    public void test156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test156");
        java.io.InputStream inputStream0 = null;
        java.nio.charset.Charset charset1 = com.alibaba.fastjson.util.IOUtils.UTF8;
        com.alibaba.fastjson.JSONObject jSONObject3 = new com.alibaba.fastjson.JSONObject(0);
        boolean boolean5 = jSONObject3.equals((java.lang.Object) (byte) 10);
        java.util.Set<java.util.Map.Entry<java.lang.String, java.lang.Object>> strEntrySet6 = jSONObject3.entrySet();
        short short8 = jSONObject3.getShortValue("UTF-8");
        java.lang.String str10 = jSONObject3.getString("null:");
        java.lang.Class<?> wildcardClass11 = jSONObject3.getClass();
        com.alibaba.fastjson.parser.ParserConfig parserConfig12 = null;
        com.alibaba.fastjson.serializer.SerializeFilter[] serializeFilterArray14 = new com.alibaba.fastjson.serializer.SerializeFilter[] {};
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature15 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature16 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature17 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature18 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature19 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature[] serializerFeatureArray20 = new com.alibaba.fastjson.serializer.SerializerFeature[] { serializerFeature15, serializerFeature16, serializerFeature17, serializerFeature18, serializerFeature19 };
        byte[] byteArray21 = com.alibaba.fastjson.JSON.toJSONBytes((java.lang.Object) "hi!", serializeFilterArray14, serializerFeatureArray20);
        java.nio.charset.Charset charset24 = com.alibaba.fastjson.util.IOUtils.UTF8;
        java.lang.reflect.Type type25 = null;
        byte[] byteArray32 = new byte[] { (byte) 10, (byte) -1, (byte) 100, (byte) 10, (byte) 10, (byte) 1 };
        java.lang.reflect.Type type33 = null;
        com.alibaba.fastjson.parser.Feature feature34 = null;
        com.alibaba.fastjson.parser.Feature[] featureArray35 = new com.alibaba.fastjson.parser.Feature[] { feature34 };
        java.lang.Comparable<java.lang.String> strComparable36 = com.alibaba.fastjson.JSON.parseObject(byteArray32, type33, featureArray35);
        java.nio.charset.Charset charset37 = com.alibaba.fastjson.JSON.parseObject(byteArray21, 3089, (int) (short) -1, charset24, type25, featureArray35);
        com.alibaba.fastjson.serializer.SerializerFeature[] serializerFeatureArray39 = new com.alibaba.fastjson.serializer.SerializerFeature[] {};
        byte[] byteArray40 = com.alibaba.fastjson.JSON.toJSONBytes((java.lang.Object) 10.0d, serializerFeatureArray39);
        byte[] byteArray41 = com.alibaba.fastjson.JSON.toJSONBytes((java.lang.Object) featureArray35, serializerFeatureArray39);
        // The following exception was thrown during execution in test generation
        try {
            java.util.AbstractList<java.lang.String> strList42 = com.alibaba.fastjson.JSON.parseObject(inputStream0, charset1, (java.lang.reflect.Type) wildcardClass11, parserConfig12, featureArray35);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(strEntrySet6);
        org.junit.Assert.assertTrue("'" + short8 + "' != '" + (short) 0 + "'", short8 == (short) 0);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(wildcardClass11);
        org.junit.Assert.assertNotNull(serializeFilterArray14);
        org.junit.Assert.assertTrue("'" + serializerFeature15 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature15.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature16 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature16.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature17 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature17.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + serializerFeature18 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature18.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature19 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature19.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertNotNull(serializerFeatureArray20);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[39, 104, 105, 33, 39]");
        org.junit.Assert.assertNotNull(charset24);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[10, -1, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(featureArray35);
        org.junit.Assert.assertNull(strComparable36);
        org.junit.Assert.assertNull(charset37);
        org.junit.Assert.assertNotNull(serializerFeatureArray39);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[49, 48, 46, 48]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[91, 110, 117, 108, 108, 93]");
    }

    @Test
    public void test157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test157");
        boolean boolean1 = com.alibaba.fastjson.util.IOUtils.firstIdentifier(' ');
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test158");
        // The following exception was thrown during execution in test generation
        try {
            com.alibaba.fastjson.serializer.SerializeWriter serializeWriter1 = new com.alibaba.fastjson.serializer.SerializeWriter((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Negative initial size: -1");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test159");
        byte[] byteArray0 = com.alibaba.fastjson.util.IOUtils.specicalFlags_singleQuotes;
        char[] charArray5 = com.alibaba.fastjson.util.IOUtils.CA;
        com.alibaba.fastjson.util.IOUtils.getChars((long) 0, (int) ' ', charArray5);
        int int7 = com.alibaba.fastjson.util.IOUtils.decodeUTF8(byteArray0, 100, (int) (short) 10, charArray5);
        com.alibaba.fastjson.JSONObject jSONObject9 = new com.alibaba.fastjson.JSONObject(0);
        boolean boolean11 = jSONObject9.equals((java.lang.Object) (byte) 10);
        java.util.Set<java.util.Map.Entry<java.lang.String, java.lang.Object>> strEntrySet12 = jSONObject9.entrySet();
        short short14 = jSONObject9.getShortValue("UTF-8");
        java.lang.String str16 = jSONObject9.getString("null:");
        java.lang.Class<?> wildcardClass17 = jSONObject9.getClass();
        byte[] byteArray24 = new byte[] { (byte) 10, (byte) -1, (byte) 100, (byte) 10, (byte) 10, (byte) 1 };
        java.lang.reflect.Type type25 = null;
        com.alibaba.fastjson.parser.Feature feature26 = null;
        com.alibaba.fastjson.parser.Feature[] featureArray27 = new com.alibaba.fastjson.parser.Feature[] { feature26 };
        java.lang.Comparable<java.lang.String> strComparable28 = com.alibaba.fastjson.JSON.parseObject(byteArray24, type25, featureArray27);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray29 = com.alibaba.fastjson.JSON.parseObject(byteArray0, (java.lang.reflect.Type) wildcardClass17, featureArray27);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray0), "[4, 4, 4, 4, 4, 4, 4, 4, 1, 1, 1, 4, 1, 1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0]");
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "\000\000\000\000\000\000\000\000\000\000KLMNOPQRSTUVWXYZabcde0ghijklmnopqrstuvwxyz0123456789+/");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "\000\000\000\000\000\000\000\000\000\000KLMNOPQRSTUVWXYZabcde0ghijklmnopqrstuvwxyz0123456789+/");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[\000, \000, \000, \000, \000, \000, \000, \000, \000, \000, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z, a, b, c, d, e, 0, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, +, /]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(strEntrySet12);
        org.junit.Assert.assertTrue("'" + short14 + "' != '" + (short) 0 + "'", short14 == (short) 0);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[10, -1, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(featureArray27);
        org.junit.Assert.assertNull(strComparable28);
    }

    @Test
    public void test160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test160");
        byte[] byteArray0 = null;
        java.nio.charset.Charset charset3 = null;
        com.alibaba.fastjson.JSONObject jSONObject5 = new com.alibaba.fastjson.JSONObject(0);
        boolean boolean7 = jSONObject5.equals((java.lang.Object) (byte) 10);
        java.util.Set<java.util.Map.Entry<java.lang.String, java.lang.Object>> strEntrySet8 = jSONObject5.entrySet();
        short short10 = jSONObject5.getShortValue("UTF-8");
        java.lang.String str12 = jSONObject5.getString("null:");
        java.lang.Class<?> wildcardClass13 = jSONObject5.getClass();
        com.alibaba.fastjson.parser.Feature feature14 = null;
        com.alibaba.fastjson.parser.Feature[] featureArray15 = new com.alibaba.fastjson.parser.Feature[] { feature14 };
        // The following exception was thrown during execution in test generation
        try {
            java.util.Collection<java.lang.Object> objCollection16 = com.alibaba.fastjson.JSON.parseObject(byteArray0, (int) '#', 100, charset3, (java.lang.reflect.Type) wildcardClass13, featureArray15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(strEntrySet8);
        org.junit.Assert.assertTrue("'" + short10 + "' != '" + (short) 0 + "'", short10 == (short) 0);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(featureArray15);
    }

    @Test
    public void test161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test161");
        java.nio.charset.Charset charset0 = com.alibaba.fastjson.util.IOUtils.UTF8;
        com.alibaba.fastjson.JSONObject jSONObject2 = new com.alibaba.fastjson.JSONObject(0);
        boolean boolean4 = jSONObject2.equals((java.lang.Object) (byte) 10);
        java.lang.Float float6 = jSONObject2.getFloat("'WriteMapNullValue'");
        java.lang.Object obj8 = jSONObject2.remove((java.lang.Object) 1.0f);
        com.alibaba.fastjson.serializer.SerializeConfig serializeConfig9 = null;
        com.alibaba.fastjson.serializer.SerializeFilter serializeFilter10 = null;
        com.alibaba.fastjson.serializer.SerializeFilter[] serializeFilterArray11 = new com.alibaba.fastjson.serializer.SerializeFilter[] { serializeFilter10 };
        com.alibaba.fastjson.serializer.SerializeFilter[] serializeFilterArray15 = new com.alibaba.fastjson.serializer.SerializeFilter[] {};
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature16 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature17 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature18 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature19 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature20 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature[] serializerFeatureArray21 = new com.alibaba.fastjson.serializer.SerializerFeature[] { serializerFeature16, serializerFeature17, serializerFeature18, serializerFeature19, serializerFeature20 };
        byte[] byteArray22 = com.alibaba.fastjson.JSON.toJSONBytes((java.lang.Object) "hi!", serializeFilterArray15, serializerFeatureArray21);
        java.nio.charset.Charset charset25 = com.alibaba.fastjson.util.IOUtils.UTF8;
        java.lang.reflect.Type type26 = null;
        byte[] byteArray33 = new byte[] { (byte) 10, (byte) -1, (byte) 100, (byte) 10, (byte) 10, (byte) 1 };
        java.lang.reflect.Type type34 = null;
        com.alibaba.fastjson.parser.Feature feature35 = null;
        com.alibaba.fastjson.parser.Feature[] featureArray36 = new com.alibaba.fastjson.parser.Feature[] { feature35 };
        java.lang.Comparable<java.lang.String> strComparable37 = com.alibaba.fastjson.JSON.parseObject(byteArray33, type34, featureArray36);
        java.nio.charset.Charset charset38 = com.alibaba.fastjson.JSON.parseObject(byteArray22, 3089, (int) (short) -1, charset25, type26, featureArray36);
        com.alibaba.fastjson.serializer.SerializerFeature[] serializerFeatureArray40 = new com.alibaba.fastjson.serializer.SerializerFeature[] {};
        byte[] byteArray41 = com.alibaba.fastjson.JSON.toJSONBytes((java.lang.Object) 10.0d, serializerFeatureArray40);
        byte[] byteArray42 = com.alibaba.fastjson.JSON.toJSONBytes((java.lang.Object) featureArray36, serializerFeatureArray40);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray43 = com.alibaba.fastjson.JSON.toJSONBytesWithFastJsonConfig(charset0, (java.lang.Object) 1.0f, serializeConfig9, serializeFilterArray11, "", (int) (short) -1, serializerFeatureArray40);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charset0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(float6);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNotNull(serializeFilterArray11);
        org.junit.Assert.assertNotNull(serializeFilterArray15);
        org.junit.Assert.assertTrue("'" + serializerFeature16 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature16.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature17 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature17.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature18 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature18.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + serializerFeature19 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature19.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature20 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature20.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertNotNull(serializerFeatureArray21);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[39, 104, 105, 33, 39]");
        org.junit.Assert.assertNotNull(charset25);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[10, -1, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(featureArray36);
        org.junit.Assert.assertNull(strComparable37);
        org.junit.Assert.assertNull(charset38);
        org.junit.Assert.assertNotNull(serializerFeatureArray40);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[49, 48, 46, 48]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[91, 110, 117, 108, 108, 93]");
    }

    @Test
    public void test162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test162");
        char[] charArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray3 = com.alibaba.fastjson.util.IOUtils.decodeBase64(charArray0, (int) (byte) 0, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test163");
        com.alibaba.fastjson.parser.DefaultJSONParser defaultJSONParser1 = new com.alibaba.fastjson.parser.DefaultJSONParser(":true");
        com.alibaba.fastjson.parser.ParseContext parseContext2 = null;
        defaultJSONParser1.setContext(parseContext2);
        // The following exception was thrown during execution in test generation
        try {
            defaultJSONParser1.throwException((int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson.JSONException; message: syntax error, expect Unknown, actual :");
        } catch (com.alibaba.fastjson.JSONException e) {
            // Expected exception.
        }
    }

    @Test
    public void test164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test164");
        com.alibaba.fastjson.JSONObject jSONObject1 = new com.alibaba.fastjson.JSONObject(0);
        boolean boolean3 = jSONObject1.equals((java.lang.Object) (byte) 10);
        int int4 = jSONObject1.size();
        com.alibaba.fastjson.JSONObject jSONObject6 = new com.alibaba.fastjson.JSONObject(0);
        boolean boolean8 = jSONObject6.equals((java.lang.Object) (byte) 10);
        java.lang.Float float10 = jSONObject6.getFloat("UTF-8");
        com.alibaba.fastjson.JSONObject jSONObject11 = new com.alibaba.fastjson.JSONObject((java.util.Map<java.lang.String, java.lang.Object>) jSONObject6);
        java.lang.Double double13 = jSONObject6.getDouble("\"\"");
        java.sql.Timestamp timestamp15 = jSONObject6.getTimestamp("Negative initial size:");
        java.util.Set<java.lang.String> strSet16 = jSONObject6.keySet();
        java.lang.Double double18 = jSONObject6.getDouble(":false");
        com.alibaba.fastjson.JSONObject jSONObject21 = new com.alibaba.fastjson.JSONObject(0);
        boolean boolean23 = jSONObject21.equals((java.lang.Object) (byte) 10);
        java.lang.Float float25 = jSONObject21.getFloat("UTF-8");
        com.alibaba.fastjson.parser.ParserConfig parserConfig26 = null;
        java.lang.Object obj27 = com.alibaba.fastjson.JSON.toJSON((java.lang.Object) jSONObject21, parserConfig26);
        com.alibaba.fastjson.JSONObject jSONObject29 = jSONObject21.fluentRemove((java.lang.Object) 1.0d);
        java.lang.Object obj30 = jSONObject6.putIfAbsent("fastjson.serializer_buffer_threshold", (java.lang.Object) jSONObject21);
        java.io.Writer writer31 = null;
        com.alibaba.fastjson.serializer.SerializeWriter serializeWriter33 = new com.alibaba.fastjson.serializer.SerializeWriter(writer31, 10);
        serializeWriter33.writeStringWithDoubleQuote("'WriteTabAsSpecial'", '4');
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature37 = com.alibaba.fastjson.serializer.SerializerFeature.WriteTabAsSpecial;
        com.alibaba.fastjson.serializer.SerializeFilter[] serializeFilterArray39 = new com.alibaba.fastjson.serializer.SerializeFilter[] {};
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature40 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature41 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature42 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature43 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature44 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature[] serializerFeatureArray45 = new com.alibaba.fastjson.serializer.SerializerFeature[] { serializerFeature40, serializerFeature41, serializerFeature42, serializerFeature43, serializerFeature44 };
        byte[] byteArray46 = com.alibaba.fastjson.JSON.toJSONBytes((java.lang.Object) "hi!", serializeFilterArray39, serializerFeatureArray45);
        com.alibaba.fastjson.serializer.SerializeFilter[] serializeFilterArray48 = new com.alibaba.fastjson.serializer.SerializeFilter[] {};
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature49 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature50 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature51 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature52 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature53 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature[] serializerFeatureArray54 = new com.alibaba.fastjson.serializer.SerializerFeature[] { serializerFeature49, serializerFeature50, serializerFeature51, serializerFeature52, serializerFeature53 };
        byte[] byteArray55 = com.alibaba.fastjson.JSON.toJSONBytes((java.lang.Object) "hi!", serializeFilterArray48, serializerFeatureArray54);
        java.lang.String str56 = com.alibaba.fastjson.JSON.toJSONString((java.lang.Object) serializerFeature37, serializeFilterArray39, serializerFeatureArray54);
        com.alibaba.fastjson.serializer.SerializeWriter serializeWriter57 = new com.alibaba.fastjson.serializer.SerializeWriter((java.io.Writer) serializeWriter33, serializerFeatureArray54);
        java.lang.String str58 = jSONObject6.toString(serializerFeatureArray54);
        java.lang.Object obj59 = jSONObject1.remove((java.lang.Object) jSONObject6);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(float10);
        org.junit.Assert.assertNull(double13);
        org.junit.Assert.assertNull(timestamp15);
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertNull(double18);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(float25);
        org.junit.Assert.assertNotNull(obj27);
        org.junit.Assert.assertEquals(obj27.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj27), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj27), "{}");
        org.junit.Assert.assertNotNull(jSONObject29);
        org.junit.Assert.assertNull(obj30);
        org.junit.Assert.assertTrue("'" + serializerFeature37 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteTabAsSpecial + "'", serializerFeature37.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteTabAsSpecial));
        org.junit.Assert.assertNotNull(serializeFilterArray39);
        org.junit.Assert.assertTrue("'" + serializerFeature40 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature40.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature41 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature41.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature42 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature42.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + serializerFeature43 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature43.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature44 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature44.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertNotNull(serializerFeatureArray45);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[39, 104, 105, 33, 39]");
        org.junit.Assert.assertNotNull(serializeFilterArray48);
        org.junit.Assert.assertTrue("'" + serializerFeature49 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature49.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature50 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature50.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature51 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature51.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + serializerFeature52 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature52.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature53 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature53.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertNotNull(serializerFeatureArray54);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[39, 104, 105, 33, 39]");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "'WriteTabAsSpecial'" + "'", str56, "'WriteTabAsSpecial'");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "{fastjson.serializer_buffer_threshold:{}}" + "'", str58, "{fastjson.serializer_buffer_threshold:{}}");
        org.junit.Assert.assertNull(obj59);
    }

    @Test
    public void test165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test165");
        java.lang.String str1 = com.alibaba.fastjson.util.RyuFloat.toString((float) 1L);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "1.0" + "'", str1, "1.0");
    }

    @Test
    public void test166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test166");
        com.alibaba.fastjson.parser.DefaultJSONParser defaultJSONParser1 = new com.alibaba.fastjson.parser.DefaultJSONParser(":true");
        com.alibaba.fastjson.parser.ParseContext parseContext2 = null;
        defaultJSONParser1.setContext(parseContext2);
        com.alibaba.fastjson.util.IOUtils.close((java.io.Closeable) defaultJSONParser1);
        com.alibaba.fastjson.parser.Feature feature5 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean6 = defaultJSONParser1.isEnabled(feature5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test167");
        com.alibaba.fastjson.parser.DefaultJSONParser defaultJSONParser1 = new com.alibaba.fastjson.parser.DefaultJSONParser(":true");
        com.alibaba.fastjson.parser.SymbolTable symbolTable2 = defaultJSONParser1.symbolTable;
        java.lang.String str3 = defaultJSONParser1.getDateFomartPattern();
        java.lang.Object obj4 = defaultJSONParser1.input;
        // The following exception was thrown during execution in test generation
        try {
            com.alibaba.fastjson.JSONObject jSONObject5 = defaultJSONParser1.parseObject();
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson.JSONException; message: syntax error, expect {, actual :, pos 1, line 1, column 2:true");
        } catch (com.alibaba.fastjson.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(symbolTable2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Negative initial size:" + "'", str3, "Negative initial size:");
        org.junit.Assert.assertEquals("'" + obj4 + "' != '" + ":true" + "'", obj4, ":true");
    }

    @Test
    public void test168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test168");
        java.io.Writer writer0 = null;
        com.alibaba.fastjson.serializer.SerializeWriter serializeWriter2 = new com.alibaba.fastjson.serializer.SerializeWriter(writer0, 10);
        serializeWriter2.write((int) (byte) -1);
        serializeWriter2.expandCapacity((int) (short) 10);
        char[] charArray10 = new char[] { '#', '#', ' ' };
        byte[] byteArray13 = com.alibaba.fastjson.util.IOUtils.decodeBase64(charArray10, 10, (int) (byte) 0);
        serializeWriter2.write(charArray10);
        serializeWriter2.writeFloat(0.0f, false);
        serializeWriter2.writeFieldValueStringWithDoubleQuoteCheck('a', "null:", "hi!");
        serializeWriter2.writeLong(0L);
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "## ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "## ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[#, #,  ]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
    }

    @Test
    public void test169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test169");
        com.alibaba.fastjson.serializer.SerializerFeature[] serializerFeatureArray0 = null;
        int int1 = com.alibaba.fastjson.serializer.SerializerFeature.of(serializerFeatureArray0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
    }

    @Test
    public void test170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test170");
        java.io.Writer writer0 = null;
        com.alibaba.fastjson.serializer.SerializeWriter serializeWriter2 = new com.alibaba.fastjson.serializer.SerializeWriter(writer0, 10);
        com.alibaba.fastjson.serializer.SerializeFilter[] serializeFilterArray4 = new com.alibaba.fastjson.serializer.SerializeFilter[] {};
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature5 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature6 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature7 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature8 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature9 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature[] serializerFeatureArray10 = new com.alibaba.fastjson.serializer.SerializerFeature[] { serializerFeature5, serializerFeature6, serializerFeature7, serializerFeature8, serializerFeature9 };
        byte[] byteArray11 = com.alibaba.fastjson.JSON.toJSONBytes((java.lang.Object) "hi!", serializeFilterArray4, serializerFeatureArray10);
        java.nio.charset.Charset charset14 = com.alibaba.fastjson.util.IOUtils.UTF8;
        java.lang.reflect.Type type15 = null;
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) -1, (byte) 100, (byte) 10, (byte) 10, (byte) 1 };
        java.lang.reflect.Type type23 = null;
        com.alibaba.fastjson.parser.Feature feature24 = null;
        com.alibaba.fastjson.parser.Feature[] featureArray25 = new com.alibaba.fastjson.parser.Feature[] { feature24 };
        java.lang.Comparable<java.lang.String> strComparable26 = com.alibaba.fastjson.JSON.parseObject(byteArray22, type23, featureArray25);
        java.nio.charset.Charset charset27 = com.alibaba.fastjson.JSON.parseObject(byteArray11, 3089, (int) (short) -1, charset14, type15, featureArray25);
        com.alibaba.fastjson.serializer.SerializerFeature[] serializerFeatureArray29 = new com.alibaba.fastjson.serializer.SerializerFeature[] {};
        byte[] byteArray30 = com.alibaba.fastjson.JSON.toJSONBytes((java.lang.Object) 10.0d, serializerFeatureArray29);
        byte[] byteArray31 = com.alibaba.fastjson.JSON.toJSONBytes((java.lang.Object) featureArray25, serializerFeatureArray29);
        serializeWriter2.writeHex(byteArray31);
        org.junit.Assert.assertNotNull(serializeFilterArray4);
        org.junit.Assert.assertTrue("'" + serializerFeature5 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature5.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature6 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature6.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature7 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature7.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + serializerFeature8 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature8.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature9 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature9.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertNotNull(serializerFeatureArray10);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[39, 104, 105, 33, 39]");
        org.junit.Assert.assertNotNull(charset14);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[10, -1, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(featureArray25);
        org.junit.Assert.assertNull(strComparable26);
        org.junit.Assert.assertNull(charset27);
        org.junit.Assert.assertNotNull(serializerFeatureArray29);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[49, 48, 46, 48]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[91, 110, 117, 108, 108, 93]");
    }

    @Test
    public void test171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test171");
        com.alibaba.fastjson.JSON.DEFAULT_TYPE_KEY = "\"-9223372036854775808\"";
    }

    @Test
    public void test172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test172");
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature0 = com.alibaba.fastjson.serializer.SerializerFeature.PrettyFormat;
        int int1 = serializerFeature0.getMask();
        org.junit.Assert.assertTrue("'" + serializerFeature0 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.PrettyFormat + "'", serializerFeature0.equals(com.alibaba.fastjson.serializer.SerializerFeature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 8192 + "'", int1 == 8192);
    }

    @Test
    public void test173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test173");
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature1 = com.alibaba.fastjson.serializer.SerializerFeature.IgnoreNonFieldGetter;
        int int3 = com.alibaba.fastjson.serializer.SerializerFeature.config((int) '4', serializerFeature1, false);
        org.junit.Assert.assertTrue("'" + serializerFeature1 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.IgnoreNonFieldGetter + "'", serializerFeature1.equals(com.alibaba.fastjson.serializer.SerializerFeature.IgnoreNonFieldGetter));
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 52 + "'", int3 == 52);
    }

    @Test
    public void test174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test174");
        java.io.OutputStream outputStream0 = null;
        java.nio.charset.Charset charset1 = null;
        com.alibaba.fastjson.JSONObject jSONObject3 = new com.alibaba.fastjson.JSONObject(0);
        boolean boolean5 = jSONObject3.equals((java.lang.Object) (byte) 10);
        java.lang.Integer int7 = jSONObject3.getInteger("hi!");
        boolean boolean9 = jSONObject3.getBooleanValue(":false");
        java.util.Collection<java.lang.Object> objCollection10 = jSONObject3.values();
        com.alibaba.fastjson.serializer.SerializeConfig serializeConfig11 = null;
        com.alibaba.fastjson.serializer.SerializeFilter[] serializeFilterArray13 = new com.alibaba.fastjson.serializer.SerializeFilter[] {};
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature14 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature15 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature16 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature17 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature18 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature[] serializerFeatureArray19 = new com.alibaba.fastjson.serializer.SerializerFeature[] { serializerFeature14, serializerFeature15, serializerFeature16, serializerFeature17, serializerFeature18 };
        byte[] byteArray20 = com.alibaba.fastjson.JSON.toJSONBytes((java.lang.Object) "hi!", serializeFilterArray13, serializerFeatureArray19);
        com.alibaba.fastjson.serializer.SerializeFilter[] serializeFilterArray24 = new com.alibaba.fastjson.serializer.SerializeFilter[] {};
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature25 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature26 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature27 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature28 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature29 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature[] serializerFeatureArray30 = new com.alibaba.fastjson.serializer.SerializerFeature[] { serializerFeature25, serializerFeature26, serializerFeature27, serializerFeature28, serializerFeature29 };
        byte[] byteArray31 = com.alibaba.fastjson.JSON.toJSONBytes((java.lang.Object) "hi!", serializeFilterArray24, serializerFeatureArray30);
        java.nio.charset.Charset charset34 = com.alibaba.fastjson.util.IOUtils.UTF8;
        java.lang.reflect.Type type35 = null;
        byte[] byteArray42 = new byte[] { (byte) 10, (byte) -1, (byte) 100, (byte) 10, (byte) 10, (byte) 1 };
        java.lang.reflect.Type type43 = null;
        com.alibaba.fastjson.parser.Feature feature44 = null;
        com.alibaba.fastjson.parser.Feature[] featureArray45 = new com.alibaba.fastjson.parser.Feature[] { feature44 };
        java.lang.Comparable<java.lang.String> strComparable46 = com.alibaba.fastjson.JSON.parseObject(byteArray42, type43, featureArray45);
        java.nio.charset.Charset charset47 = com.alibaba.fastjson.JSON.parseObject(byteArray31, 3089, (int) (short) -1, charset34, type35, featureArray45);
        com.alibaba.fastjson.serializer.SerializerFeature[] serializerFeatureArray49 = new com.alibaba.fastjson.serializer.SerializerFeature[] {};
        byte[] byteArray50 = com.alibaba.fastjson.JSON.toJSONBytes((java.lang.Object) 10.0d, serializerFeatureArray49);
        byte[] byteArray51 = com.alibaba.fastjson.JSON.toJSONBytes((java.lang.Object) featureArray45, serializerFeatureArray49);
        // The following exception was thrown during execution in test generation
        try {
            int int52 = com.alibaba.fastjson.JSON.writeJSONStringWithFastJsonConfig(outputStream0, charset1, (java.lang.Object) objCollection10, serializeConfig11, serializeFilterArray13, ":false", 3089, serializerFeatureArray49);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(int7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(objCollection10);
        org.junit.Assert.assertNotNull(serializeFilterArray13);
        org.junit.Assert.assertTrue("'" + serializerFeature14 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature14.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature15 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature15.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature16 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature16.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + serializerFeature17 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature17.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature18 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature18.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertNotNull(serializerFeatureArray19);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[39, 104, 105, 33, 39]");
        org.junit.Assert.assertNotNull(serializeFilterArray24);
        org.junit.Assert.assertTrue("'" + serializerFeature25 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature25.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature26 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature26.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature27 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature27.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + serializerFeature28 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature28.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature29 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature29.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertNotNull(serializerFeatureArray30);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[39, 104, 105, 33, 39]");
        org.junit.Assert.assertNotNull(charset34);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[10, -1, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(featureArray45);
        org.junit.Assert.assertNull(strComparable46);
        org.junit.Assert.assertNull(charset47);
        org.junit.Assert.assertNotNull(serializerFeatureArray49);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[49, 48, 46, 48]");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[91, 110, 117, 108, 108, 93]");
    }

    @Test
    public void test175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test175");
        com.alibaba.fastjson.JSONObject jSONObject1 = new com.alibaba.fastjson.JSONObject(0);
        boolean boolean3 = jSONObject1.equals((java.lang.Object) (byte) 10);
        java.lang.Integer int5 = jSONObject1.getInteger("hi!");
        java.math.BigDecimal bigDecimal7 = jSONObject1.getBigDecimal("true");
        java.lang.Boolean boolean9 = jSONObject1.getBoolean("'WriteMapNullValue'");
        java.sql.Date date11 = jSONObject1.getSqlDate(", minimumCapacity=");
        java.lang.String str12 = jSONObject1.toJSONString();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(int5);
        org.junit.Assert.assertNull(bigDecimal7);
        org.junit.Assert.assertNull(boolean9);
        org.junit.Assert.assertNull(date11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "{}" + "'", str12, "{}");
    }

    @Test
    public void test176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test176");
        java.util.Properties properties0 = com.alibaba.fastjson.util.IOUtils.DEFAULT_PROPERTIES;
        org.junit.Assert.assertNotNull(properties0);
    }

    @Test
    public void test177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test177");
        boolean boolean1 = com.alibaba.fastjson.util.IOUtils.isValidJsonpQueryParam("yyyy-MM-dd HH:mm:ss");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test178");
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature0 = com.alibaba.fastjson.serializer.SerializerFeature.WriteClassName;
        org.junit.Assert.assertTrue("'" + serializerFeature0 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteClassName + "'", serializerFeature0.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteClassName));
    }

    @Test
    public void test179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test179");
        java.lang.Object obj0 = null;
        com.alibaba.fastjson.serializer.SerializeConfig serializeConfig1 = null;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature3 = com.alibaba.fastjson.serializer.SerializerFeature.WriteTabAsSpecial;
        com.alibaba.fastjson.serializer.SerializeFilter[] serializeFilterArray5 = new com.alibaba.fastjson.serializer.SerializeFilter[] {};
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature6 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature7 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature8 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature9 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature10 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature[] serializerFeatureArray11 = new com.alibaba.fastjson.serializer.SerializerFeature[] { serializerFeature6, serializerFeature7, serializerFeature8, serializerFeature9, serializerFeature10 };
        byte[] byteArray12 = com.alibaba.fastjson.JSON.toJSONBytes((java.lang.Object) "hi!", serializeFilterArray5, serializerFeatureArray11);
        com.alibaba.fastjson.serializer.SerializeFilter[] serializeFilterArray14 = new com.alibaba.fastjson.serializer.SerializeFilter[] {};
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature15 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature16 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature17 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature18 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature19 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature[] serializerFeatureArray20 = new com.alibaba.fastjson.serializer.SerializerFeature[] { serializerFeature15, serializerFeature16, serializerFeature17, serializerFeature18, serializerFeature19 };
        byte[] byteArray21 = com.alibaba.fastjson.JSON.toJSONBytes((java.lang.Object) "hi!", serializeFilterArray14, serializerFeatureArray20);
        java.lang.String str22 = com.alibaba.fastjson.JSON.toJSONString((java.lang.Object) serializerFeature3, serializeFilterArray5, serializerFeatureArray20);
        byte[] byteArray23 = com.alibaba.fastjson.JSON.toJSONBytes(obj0, serializeConfig1, (int) (byte) -1, serializerFeatureArray20);
        com.alibaba.fastjson.serializer.SerializeConfig serializeConfig24 = null;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature25 = com.alibaba.fastjson.serializer.SerializerFeature.WriteTabAsSpecial;
        com.alibaba.fastjson.serializer.SerializeFilter[] serializeFilterArray27 = new com.alibaba.fastjson.serializer.SerializeFilter[] {};
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature28 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature29 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature30 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature31 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature32 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature[] serializerFeatureArray33 = new com.alibaba.fastjson.serializer.SerializerFeature[] { serializerFeature28, serializerFeature29, serializerFeature30, serializerFeature31, serializerFeature32 };
        byte[] byteArray34 = com.alibaba.fastjson.JSON.toJSONBytes((java.lang.Object) "hi!", serializeFilterArray27, serializerFeatureArray33);
        com.alibaba.fastjson.serializer.SerializeFilter[] serializeFilterArray36 = new com.alibaba.fastjson.serializer.SerializeFilter[] {};
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature37 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature38 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature39 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature40 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature41 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature[] serializerFeatureArray42 = new com.alibaba.fastjson.serializer.SerializerFeature[] { serializerFeature37, serializerFeature38, serializerFeature39, serializerFeature40, serializerFeature41 };
        byte[] byteArray43 = com.alibaba.fastjson.JSON.toJSONBytes((java.lang.Object) "hi!", serializeFilterArray36, serializerFeatureArray42);
        java.lang.String str44 = com.alibaba.fastjson.JSON.toJSONString((java.lang.Object) serializerFeature25, serializeFilterArray27, serializerFeatureArray42);
        com.alibaba.fastjson.JSONObject jSONObject46 = new com.alibaba.fastjson.JSONObject(0);
        boolean boolean48 = jSONObject46.equals((java.lang.Object) (byte) 10);
        java.lang.Float float50 = jSONObject46.getFloat("UTF-8");
        com.alibaba.fastjson.JSONObject jSONObject51 = new com.alibaba.fastjson.JSONObject((java.util.Map<java.lang.String, java.lang.Object>) jSONObject46);
        java.lang.Double double53 = jSONObject46.getDouble("\"\"");
        java.sql.Timestamp timestamp55 = jSONObject46.getTimestamp("Negative initial size:");
        java.util.Set<java.lang.String> strSet56 = jSONObject46.keySet();
        java.lang.Double double58 = jSONObject46.getDouble(":false");
        com.alibaba.fastjson.JSONObject jSONObject61 = new com.alibaba.fastjson.JSONObject(0);
        boolean boolean63 = jSONObject61.equals((java.lang.Object) (byte) 10);
        java.lang.Float float65 = jSONObject61.getFloat("UTF-8");
        com.alibaba.fastjson.parser.ParserConfig parserConfig66 = null;
        java.lang.Object obj67 = com.alibaba.fastjson.JSON.toJSON((java.lang.Object) jSONObject61, parserConfig66);
        com.alibaba.fastjson.JSONObject jSONObject69 = jSONObject61.fluentRemove((java.lang.Object) 1.0d);
        java.lang.Object obj70 = jSONObject46.putIfAbsent("fastjson.serializer_buffer_threshold", (java.lang.Object) jSONObject61);
        java.io.Writer writer71 = null;
        com.alibaba.fastjson.serializer.SerializeWriter serializeWriter73 = new com.alibaba.fastjson.serializer.SerializeWriter(writer71, 10);
        serializeWriter73.writeStringWithDoubleQuote("'WriteTabAsSpecial'", '4');
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature77 = com.alibaba.fastjson.serializer.SerializerFeature.WriteTabAsSpecial;
        com.alibaba.fastjson.serializer.SerializeFilter[] serializeFilterArray79 = new com.alibaba.fastjson.serializer.SerializeFilter[] {};
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature80 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature81 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature82 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature83 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature84 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature[] serializerFeatureArray85 = new com.alibaba.fastjson.serializer.SerializerFeature[] { serializerFeature80, serializerFeature81, serializerFeature82, serializerFeature83, serializerFeature84 };
        byte[] byteArray86 = com.alibaba.fastjson.JSON.toJSONBytes((java.lang.Object) "hi!", serializeFilterArray79, serializerFeatureArray85);
        com.alibaba.fastjson.serializer.SerializeFilter[] serializeFilterArray88 = new com.alibaba.fastjson.serializer.SerializeFilter[] {};
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature89 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature90 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature91 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature92 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature93 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature[] serializerFeatureArray94 = new com.alibaba.fastjson.serializer.SerializerFeature[] { serializerFeature89, serializerFeature90, serializerFeature91, serializerFeature92, serializerFeature93 };
        byte[] byteArray95 = com.alibaba.fastjson.JSON.toJSONBytes((java.lang.Object) "hi!", serializeFilterArray88, serializerFeatureArray94);
        java.lang.String str96 = com.alibaba.fastjson.JSON.toJSONString((java.lang.Object) serializerFeature77, serializeFilterArray79, serializerFeatureArray94);
        com.alibaba.fastjson.serializer.SerializeWriter serializeWriter97 = new com.alibaba.fastjson.serializer.SerializeWriter((java.io.Writer) serializeWriter73, serializerFeatureArray94);
        java.lang.String str98 = jSONObject46.toString(serializerFeatureArray94);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str99 = com.alibaba.fastjson.JSON.toJSONString((java.lang.Object) serializerFeatureArray20, serializeConfig24, serializeFilterArray27, serializerFeatureArray94);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + serializerFeature3 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteTabAsSpecial + "'", serializerFeature3.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteTabAsSpecial));
        org.junit.Assert.assertNotNull(serializeFilterArray5);
        org.junit.Assert.assertTrue("'" + serializerFeature6 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature6.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature7 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature7.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature8 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature8.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + serializerFeature9 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature9.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature10 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature10.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertNotNull(serializerFeatureArray11);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[39, 104, 105, 33, 39]");
        org.junit.Assert.assertNotNull(serializeFilterArray14);
        org.junit.Assert.assertTrue("'" + serializerFeature15 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature15.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature16 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature16.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature17 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature17.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + serializerFeature18 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature18.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature19 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature19.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertNotNull(serializerFeatureArray20);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[39, 104, 105, 33, 39]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "'WriteTabAsSpecial'" + "'", str22, "'WriteTabAsSpecial'");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[110, 117, 108, 108]");
        org.junit.Assert.assertTrue("'" + serializerFeature25 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteTabAsSpecial + "'", serializerFeature25.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteTabAsSpecial));
        org.junit.Assert.assertNotNull(serializeFilterArray27);
        org.junit.Assert.assertTrue("'" + serializerFeature28 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature28.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature29 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature29.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature30 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature30.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + serializerFeature31 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature31.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature32 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature32.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertNotNull(serializerFeatureArray33);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[39, 104, 105, 33, 39]");
        org.junit.Assert.assertNotNull(serializeFilterArray36);
        org.junit.Assert.assertTrue("'" + serializerFeature37 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature37.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature38 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature38.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature39 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature39.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + serializerFeature40 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature40.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature41 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature41.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertNotNull(serializerFeatureArray42);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[39, 104, 105, 33, 39]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "'WriteTabAsSpecial'" + "'", str44, "'WriteTabAsSpecial'");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNull(float50);
        org.junit.Assert.assertNull(double53);
        org.junit.Assert.assertNull(timestamp55);
        org.junit.Assert.assertNotNull(strSet56);
        org.junit.Assert.assertNull(double58);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNull(float65);
        org.junit.Assert.assertNotNull(obj67);
        org.junit.Assert.assertEquals(obj67.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj67), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj67), "{}");
        org.junit.Assert.assertNotNull(jSONObject69);
        org.junit.Assert.assertNull(obj70);
        org.junit.Assert.assertTrue("'" + serializerFeature77 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteTabAsSpecial + "'", serializerFeature77.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteTabAsSpecial));
        org.junit.Assert.assertNotNull(serializeFilterArray79);
        org.junit.Assert.assertTrue("'" + serializerFeature80 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature80.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature81 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature81.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature82 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature82.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + serializerFeature83 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature83.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature84 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature84.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertNotNull(serializerFeatureArray85);
        org.junit.Assert.assertNotNull(byteArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray86), "[39, 104, 105, 33, 39]");
        org.junit.Assert.assertNotNull(serializeFilterArray88);
        org.junit.Assert.assertTrue("'" + serializerFeature89 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature89.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature90 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature90.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature91 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature91.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + serializerFeature92 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature92.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature93 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature93.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertNotNull(serializerFeatureArray94);
        org.junit.Assert.assertNotNull(byteArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray95), "[39, 104, 105, 33, 39]");
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "'WriteTabAsSpecial'" + "'", str96, "'WriteTabAsSpecial'");
        org.junit.Assert.assertEquals("'" + str98 + "' != '" + "{fastjson.serializer_buffer_threshold:{}}" + "'", str98, "{fastjson.serializer_buffer_threshold:{}}");
    }

    @Test
    public void test180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test180");
        java.io.Writer writer0 = null;
        com.alibaba.fastjson.serializer.SerializeWriter serializeWriter2 = new com.alibaba.fastjson.serializer.SerializeWriter(writer0, 10);
        serializeWriter2.write((int) (byte) -1);
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature7 = com.alibaba.fastjson.serializer.SerializerFeature.WriteMapNullValue;
        serializeWriter2.writeFieldValue(' ', "must >", (java.lang.Enum<com.alibaba.fastjson.serializer.SerializerFeature>) serializerFeature7);
        serializeWriter2.writeFieldValue('#', "1.2.76", (double) (byte) 1);
        org.junit.Assert.assertTrue("'" + serializerFeature7 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteMapNullValue + "'", serializerFeature7.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteMapNullValue));
    }

    @Test
    public void test181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test181");
        com.alibaba.fastjson.parser.ParserConfig parserConfig1 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.alibaba.fastjson.parser.DefaultJSONParser defaultJSONParser3 = new com.alibaba.fastjson.parser.DefaultJSONParser(":true", parserConfig1, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test182");
        java.io.InputStream inputStream0 = null;
        com.alibaba.fastjson.serializer.SerializeFilter[] serializeFilterArray2 = new com.alibaba.fastjson.serializer.SerializeFilter[] {};
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature3 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature4 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature5 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature6 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature7 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature[] serializerFeatureArray8 = new com.alibaba.fastjson.serializer.SerializerFeature[] { serializerFeature3, serializerFeature4, serializerFeature5, serializerFeature6, serializerFeature7 };
        byte[] byteArray9 = com.alibaba.fastjson.JSON.toJSONBytes((java.lang.Object) "hi!", serializeFilterArray2, serializerFeatureArray8);
        java.nio.charset.Charset charset12 = com.alibaba.fastjson.util.IOUtils.UTF8;
        java.lang.reflect.Type type13 = null;
        byte[] byteArray20 = new byte[] { (byte) 10, (byte) -1, (byte) 100, (byte) 10, (byte) 10, (byte) 1 };
        java.lang.reflect.Type type21 = null;
        com.alibaba.fastjson.parser.Feature feature22 = null;
        com.alibaba.fastjson.parser.Feature[] featureArray23 = new com.alibaba.fastjson.parser.Feature[] { feature22 };
        java.lang.Comparable<java.lang.String> strComparable24 = com.alibaba.fastjson.JSON.parseObject(byteArray20, type21, featureArray23);
        java.nio.charset.Charset charset25 = com.alibaba.fastjson.JSON.parseObject(byteArray9, 3089, (int) (short) -1, charset12, type13, featureArray23);
        char[] charArray29 = new char[] { '#', '#', ' ' };
        byte[] byteArray32 = com.alibaba.fastjson.util.IOUtils.decodeBase64(charArray29, 10, (int) (byte) 0);
        com.alibaba.fastjson.serializer.SerializeFilter[] serializeFilterArray34 = new com.alibaba.fastjson.serializer.SerializeFilter[] {};
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature35 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature36 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature37 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature38 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature39 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature[] serializerFeatureArray40 = new com.alibaba.fastjson.serializer.SerializerFeature[] { serializerFeature35, serializerFeature36, serializerFeature37, serializerFeature38, serializerFeature39 };
        byte[] byteArray41 = com.alibaba.fastjson.JSON.toJSONBytes((java.lang.Object) "hi!", serializeFilterArray34, serializerFeatureArray40);
        java.nio.charset.Charset charset44 = com.alibaba.fastjson.util.IOUtils.UTF8;
        java.lang.reflect.Type type45 = null;
        byte[] byteArray52 = new byte[] { (byte) 10, (byte) -1, (byte) 100, (byte) 10, (byte) 10, (byte) 1 };
        java.lang.reflect.Type type53 = null;
        com.alibaba.fastjson.parser.Feature feature54 = null;
        com.alibaba.fastjson.parser.Feature[] featureArray55 = new com.alibaba.fastjson.parser.Feature[] { feature54 };
        java.lang.Comparable<java.lang.String> strComparable56 = com.alibaba.fastjson.JSON.parseObject(byteArray52, type53, featureArray55);
        java.nio.charset.Charset charset57 = com.alibaba.fastjson.JSON.parseObject(byteArray41, 3089, (int) (short) -1, charset44, type45, featureArray55);
        com.alibaba.fastjson.JSONObject jSONObject59 = new com.alibaba.fastjson.JSONObject(0);
        boolean boolean61 = jSONObject59.equals((java.lang.Object) (byte) 10);
        java.util.Set<java.util.Map.Entry<java.lang.String, java.lang.Object>> strEntrySet62 = jSONObject59.entrySet();
        short short64 = jSONObject59.getShortValue("UTF-8");
        java.lang.String str66 = jSONObject59.getString("null:");
        java.lang.Class<?> wildcardClass67 = jSONObject59.getClass();
        com.alibaba.fastjson.parser.ParserConfig parserConfig68 = null;
        com.alibaba.fastjson.parser.deserializer.ParseProcess parseProcess69 = null;
        com.alibaba.fastjson.parser.Feature[] featureArray71 = new com.alibaba.fastjson.parser.Feature[] {};
        java.text.DateFormat dateFormat72 = com.alibaba.fastjson.JSON.parseObject(byteArray32, charset57, (java.lang.reflect.Type) wildcardClass67, parserConfig68, parseProcess69, (int) '4', featureArray71);
        com.alibaba.fastjson.parser.ParserConfig parserConfig73 = null;
        com.alibaba.fastjson.serializer.SerializeFilter[] serializeFilterArray75 = new com.alibaba.fastjson.serializer.SerializeFilter[] {};
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature76 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature77 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature78 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature79 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature80 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature[] serializerFeatureArray81 = new com.alibaba.fastjson.serializer.SerializerFeature[] { serializerFeature76, serializerFeature77, serializerFeature78, serializerFeature79, serializerFeature80 };
        byte[] byteArray82 = com.alibaba.fastjson.JSON.toJSONBytes((java.lang.Object) "hi!", serializeFilterArray75, serializerFeatureArray81);
        java.nio.charset.Charset charset85 = com.alibaba.fastjson.util.IOUtils.UTF8;
        java.lang.reflect.Type type86 = null;
        byte[] byteArray93 = new byte[] { (byte) 10, (byte) -1, (byte) 100, (byte) 10, (byte) 10, (byte) 1 };
        java.lang.reflect.Type type94 = null;
        com.alibaba.fastjson.parser.Feature feature95 = null;
        com.alibaba.fastjson.parser.Feature[] featureArray96 = new com.alibaba.fastjson.parser.Feature[] { feature95 };
        java.lang.Comparable<java.lang.String> strComparable97 = com.alibaba.fastjson.JSON.parseObject(byteArray93, type94, featureArray96);
        java.nio.charset.Charset charset98 = com.alibaba.fastjson.JSON.parseObject(byteArray82, 3089, (int) (short) -1, charset85, type86, featureArray96);
        // The following exception was thrown during execution in test generation
        try {
            com.alibaba.fastjson.parser.SymbolTable symbolTable99 = com.alibaba.fastjson.JSON.parseObject(inputStream0, charset25, (java.lang.reflect.Type) wildcardClass67, parserConfig73, featureArray96);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(serializeFilterArray2);
        org.junit.Assert.assertTrue("'" + serializerFeature3 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature3.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature4 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature4.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature5 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature5.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + serializerFeature6 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature6.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature7 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature7.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertNotNull(serializerFeatureArray8);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[39, 104, 105, 33, 39]");
        org.junit.Assert.assertNotNull(charset12);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[10, -1, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(featureArray23);
        org.junit.Assert.assertNull(strComparable24);
        org.junit.Assert.assertNull(charset25);
        org.junit.Assert.assertNotNull(charArray29);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray29), "## ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray29), "## ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray29), "[#, #,  ]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[]");
        org.junit.Assert.assertNotNull(serializeFilterArray34);
        org.junit.Assert.assertTrue("'" + serializerFeature35 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature35.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature36 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature36.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature37 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature37.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + serializerFeature38 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature38.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature39 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature39.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertNotNull(serializerFeatureArray40);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[39, 104, 105, 33, 39]");
        org.junit.Assert.assertNotNull(charset44);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[10, -1, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(featureArray55);
        org.junit.Assert.assertNull(strComparable56);
        org.junit.Assert.assertNull(charset57);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(strEntrySet62);
        org.junit.Assert.assertTrue("'" + short64 + "' != '" + (short) 0 + "'", short64 == (short) 0);
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertNotNull(wildcardClass67);
        org.junit.Assert.assertNotNull(featureArray71);
        org.junit.Assert.assertNull(dateFormat72);
        org.junit.Assert.assertNotNull(serializeFilterArray75);
        org.junit.Assert.assertTrue("'" + serializerFeature76 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature76.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature77 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature77.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature78 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature78.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + serializerFeature79 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature79.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature80 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature80.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertNotNull(serializerFeatureArray81);
        org.junit.Assert.assertNotNull(byteArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray82), "[39, 104, 105, 33, 39]");
        org.junit.Assert.assertNotNull(charset85);
        org.junit.Assert.assertNotNull(byteArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray93), "[10, -1, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(featureArray96);
        org.junit.Assert.assertNull(strComparable97);
        org.junit.Assert.assertNull(charset98);
    }

    @Test
    public void test183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test183");
        boolean boolean1 = com.alibaba.fastjson.JSON.isValid("[]");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
    }

    @Test
    public void test184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test184");
        byte[] byteArray1 = com.alibaba.fastjson.util.IOUtils.decodeBase64("@type");
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-73, 42, 94]");
    }

    @Test
    public void test185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test185");
        com.alibaba.fastjson.parser.DefaultJSONParser defaultJSONParser1 = new com.alibaba.fastjson.parser.DefaultJSONParser(":true");
        com.alibaba.fastjson.parser.SymbolTable symbolTable2 = defaultJSONParser1.getSymbolTable();
        java.io.Writer writer3 = null;
        com.alibaba.fastjson.serializer.SerializeWriter serializeWriter5 = new com.alibaba.fastjson.serializer.SerializeWriter(writer3, 10);
        serializeWriter5.writeStringWithDoubleQuote("'WriteTabAsSpecial'", '4');
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature9 = com.alibaba.fastjson.serializer.SerializerFeature.WriteTabAsSpecial;
        com.alibaba.fastjson.serializer.SerializeFilter[] serializeFilterArray11 = new com.alibaba.fastjson.serializer.SerializeFilter[] {};
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature12 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature13 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature14 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature15 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature16 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature[] serializerFeatureArray17 = new com.alibaba.fastjson.serializer.SerializerFeature[] { serializerFeature12, serializerFeature13, serializerFeature14, serializerFeature15, serializerFeature16 };
        byte[] byteArray18 = com.alibaba.fastjson.JSON.toJSONBytes((java.lang.Object) "hi!", serializeFilterArray11, serializerFeatureArray17);
        com.alibaba.fastjson.serializer.SerializeFilter[] serializeFilterArray20 = new com.alibaba.fastjson.serializer.SerializeFilter[] {};
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature21 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature22 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature23 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature24 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature25 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature[] serializerFeatureArray26 = new com.alibaba.fastjson.serializer.SerializerFeature[] { serializerFeature21, serializerFeature22, serializerFeature23, serializerFeature24, serializerFeature25 };
        byte[] byteArray27 = com.alibaba.fastjson.JSON.toJSONBytes((java.lang.Object) "hi!", serializeFilterArray20, serializerFeatureArray26);
        java.lang.String str28 = com.alibaba.fastjson.JSON.toJSONString((java.lang.Object) serializerFeature9, serializeFilterArray11, serializerFeatureArray26);
        com.alibaba.fastjson.serializer.SerializeWriter serializeWriter29 = new com.alibaba.fastjson.serializer.SerializeWriter((java.io.Writer) serializeWriter5, serializerFeatureArray26);
        java.io.Writer writer30 = null;
        com.alibaba.fastjson.serializer.SerializeWriter serializeWriter32 = new com.alibaba.fastjson.serializer.SerializeWriter(writer30, 10);
        serializeWriter32.write((int) (byte) -1);
        serializeWriter32.expandCapacity((int) (short) 10);
        char[] charArray40 = new char[] { '#', '#', ' ' };
        byte[] byteArray43 = com.alibaba.fastjson.util.IOUtils.decodeBase64(charArray40, 10, (int) (byte) 0);
        serializeWriter32.write(charArray40);
        serializeWriter5.writeStringWithDoubleQuote(charArray40, 'a');
        // The following exception was thrown during execution in test generation
        try {
            defaultJSONParser1.parseObject((java.lang.Object) 'a');
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson.JSONException; message: syntax error, expect {, actual :");
        } catch (com.alibaba.fastjson.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(symbolTable2);
        org.junit.Assert.assertTrue("'" + serializerFeature9 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteTabAsSpecial + "'", serializerFeature9.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteTabAsSpecial));
        org.junit.Assert.assertNotNull(serializeFilterArray11);
        org.junit.Assert.assertTrue("'" + serializerFeature12 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature12.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature13 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature13.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature14 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature14.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + serializerFeature15 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature15.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature16 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature16.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertNotNull(serializerFeatureArray17);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[39, 104, 105, 33, 39]");
        org.junit.Assert.assertNotNull(serializeFilterArray20);
        org.junit.Assert.assertTrue("'" + serializerFeature21 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature21.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature22 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature22.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature23 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature23.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + serializerFeature24 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature24.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature25 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature25.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertNotNull(serializerFeatureArray26);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[39, 104, 105, 33, 39]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "'WriteTabAsSpecial'" + "'", str28, "'WriteTabAsSpecial'");
        org.junit.Assert.assertNotNull(charArray40);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray40), "## ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray40), "## ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray40), "[#, #,  ]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[]");
    }

    @Test
    public void test186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test186");
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature2 = com.alibaba.fastjson.serializer.SerializerFeature.UseSingleQuotes;
        boolean boolean3 = com.alibaba.fastjson.serializer.SerializerFeature.isEnabled((int) (short) 10, (int) (short) 100, serializerFeature2);
        org.junit.Assert.assertTrue("'" + serializerFeature2 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.UseSingleQuotes + "'", serializerFeature2.equals(com.alibaba.fastjson.serializer.SerializerFeature.UseSingleQuotes));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
    }

    @Test
    public void test187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test187");
        java.io.Writer writer0 = null;
        com.alibaba.fastjson.serializer.SerializeWriter serializeWriter2 = new com.alibaba.fastjson.serializer.SerializeWriter(writer0, 10);
        byte[] byteArray3 = com.alibaba.fastjson.util.IOUtils.specicalFlags_singleQuotes;
        char[] charArray8 = com.alibaba.fastjson.util.IOUtils.CA;
        com.alibaba.fastjson.util.IOUtils.getChars((long) 0, (int) ' ', charArray8);
        int int10 = com.alibaba.fastjson.util.IOUtils.decodeUTF8(byteArray3, 100, (int) (short) 10, charArray8);
        serializeWriter2.write(charArray8, (int) '#', 1);
        serializeWriter2.writeFieldValueStringWithDoubleQuote('#', "fastjson.serializer_buffer_threshold", "[]");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[4, 4, 4, 4, 4, 4, 4, 4, 1, 1, 1, 4, 1, 1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0]");
        org.junit.Assert.assertNotNull(charArray8);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray8), "\000\000\000\000\000\000\000\000\000\000KLMNOPQRSTUVWXYZabcde0ghijklmnopqrstuvwxyz0123456789+/");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray8), "\000\000\000\000\000\000\000\000\000\000KLMNOPQRSTUVWXYZabcde0ghijklmnopqrstuvwxyz0123456789+/");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray8), "[\000, \000, \000, \000, \000, \000, \000, \000, \000, \000, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z, a, b, c, d, e, 0, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, +, /]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10 + "'", int10 == 10);
    }

    @Test
    public void test188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test188");
        java.io.InputStream inputStream0 = null;
        java.nio.charset.Charset charset1 = com.alibaba.fastjson.util.IOUtils.UTF8;
        char[] charArray5 = new char[] { '#', '#', ' ' };
        byte[] byteArray8 = com.alibaba.fastjson.util.IOUtils.decodeBase64(charArray5, 10, (int) (byte) 0);
        com.alibaba.fastjson.serializer.SerializeFilter[] serializeFilterArray10 = new com.alibaba.fastjson.serializer.SerializeFilter[] {};
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature11 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature12 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature13 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature14 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature15 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature[] serializerFeatureArray16 = new com.alibaba.fastjson.serializer.SerializerFeature[] { serializerFeature11, serializerFeature12, serializerFeature13, serializerFeature14, serializerFeature15 };
        byte[] byteArray17 = com.alibaba.fastjson.JSON.toJSONBytes((java.lang.Object) "hi!", serializeFilterArray10, serializerFeatureArray16);
        java.nio.charset.Charset charset20 = com.alibaba.fastjson.util.IOUtils.UTF8;
        java.lang.reflect.Type type21 = null;
        byte[] byteArray28 = new byte[] { (byte) 10, (byte) -1, (byte) 100, (byte) 10, (byte) 10, (byte) 1 };
        java.lang.reflect.Type type29 = null;
        com.alibaba.fastjson.parser.Feature feature30 = null;
        com.alibaba.fastjson.parser.Feature[] featureArray31 = new com.alibaba.fastjson.parser.Feature[] { feature30 };
        java.lang.Comparable<java.lang.String> strComparable32 = com.alibaba.fastjson.JSON.parseObject(byteArray28, type29, featureArray31);
        java.nio.charset.Charset charset33 = com.alibaba.fastjson.JSON.parseObject(byteArray17, 3089, (int) (short) -1, charset20, type21, featureArray31);
        com.alibaba.fastjson.JSONObject jSONObject35 = new com.alibaba.fastjson.JSONObject(0);
        boolean boolean37 = jSONObject35.equals((java.lang.Object) (byte) 10);
        java.util.Set<java.util.Map.Entry<java.lang.String, java.lang.Object>> strEntrySet38 = jSONObject35.entrySet();
        short short40 = jSONObject35.getShortValue("UTF-8");
        java.lang.String str42 = jSONObject35.getString("null:");
        java.lang.Class<?> wildcardClass43 = jSONObject35.getClass();
        com.alibaba.fastjson.parser.ParserConfig parserConfig44 = null;
        com.alibaba.fastjson.parser.deserializer.ParseProcess parseProcess45 = null;
        com.alibaba.fastjson.parser.Feature[] featureArray47 = new com.alibaba.fastjson.parser.Feature[] {};
        java.text.DateFormat dateFormat48 = com.alibaba.fastjson.JSON.parseObject(byteArray8, charset33, (java.lang.reflect.Type) wildcardClass43, parserConfig44, parseProcess45, (int) '4', featureArray47);
        com.alibaba.fastjson.serializer.SerializeFilter[] serializeFilterArray50 = new com.alibaba.fastjson.serializer.SerializeFilter[] {};
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature51 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature52 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature53 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature54 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature55 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature[] serializerFeatureArray56 = new com.alibaba.fastjson.serializer.SerializerFeature[] { serializerFeature51, serializerFeature52, serializerFeature53, serializerFeature54, serializerFeature55 };
        byte[] byteArray57 = com.alibaba.fastjson.JSON.toJSONBytes((java.lang.Object) "hi!", serializeFilterArray50, serializerFeatureArray56);
        java.nio.charset.Charset charset60 = com.alibaba.fastjson.util.IOUtils.UTF8;
        java.lang.reflect.Type type61 = null;
        byte[] byteArray68 = new byte[] { (byte) 10, (byte) -1, (byte) 100, (byte) 10, (byte) 10, (byte) 1 };
        java.lang.reflect.Type type69 = null;
        com.alibaba.fastjson.parser.Feature feature70 = null;
        com.alibaba.fastjson.parser.Feature[] featureArray71 = new com.alibaba.fastjson.parser.Feature[] { feature70 };
        java.lang.Comparable<java.lang.String> strComparable72 = com.alibaba.fastjson.JSON.parseObject(byteArray68, type69, featureArray71);
        java.nio.charset.Charset charset73 = com.alibaba.fastjson.JSON.parseObject(byteArray57, 3089, (int) (short) -1, charset60, type61, featureArray71);
        com.alibaba.fastjson.serializer.SerializerFeature[] serializerFeatureArray75 = new com.alibaba.fastjson.serializer.SerializerFeature[] {};
        byte[] byteArray76 = com.alibaba.fastjson.JSON.toJSONBytes((java.lang.Object) 10.0d, serializerFeatureArray75);
        byte[] byteArray77 = com.alibaba.fastjson.JSON.toJSONBytes((java.lang.Object) featureArray71, serializerFeatureArray75);
        // The following exception was thrown during execution in test generation
        try {
            java.util.ArrayList<java.lang.String> strList78 = com.alibaba.fastjson.JSON.parseObject(inputStream0, charset1, (java.lang.reflect.Type) wildcardClass43, featureArray71);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "## ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "## ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[#, #,  ]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(serializeFilterArray10);
        org.junit.Assert.assertTrue("'" + serializerFeature11 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature11.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature12 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature12.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature13 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature13.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + serializerFeature14 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature14.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature15 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature15.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertNotNull(serializerFeatureArray16);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[39, 104, 105, 33, 39]");
        org.junit.Assert.assertNotNull(charset20);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[10, -1, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(featureArray31);
        org.junit.Assert.assertNull(strComparable32);
        org.junit.Assert.assertNull(charset33);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(strEntrySet38);
        org.junit.Assert.assertTrue("'" + short40 + "' != '" + (short) 0 + "'", short40 == (short) 0);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(wildcardClass43);
        org.junit.Assert.assertNotNull(featureArray47);
        org.junit.Assert.assertNull(dateFormat48);
        org.junit.Assert.assertNotNull(serializeFilterArray50);
        org.junit.Assert.assertTrue("'" + serializerFeature51 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature51.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature52 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature52.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature53 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature53.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + serializerFeature54 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature54.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature55 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature55.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertNotNull(serializerFeatureArray56);
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[39, 104, 105, 33, 39]");
        org.junit.Assert.assertNotNull(charset60);
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[10, -1, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(featureArray71);
        org.junit.Assert.assertNull(strComparable72);
        org.junit.Assert.assertNull(charset73);
        org.junit.Assert.assertNotNull(serializerFeatureArray75);
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[49, 48, 46, 48]");
        org.junit.Assert.assertNotNull(byteArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[91, 110, 117, 108, 108, 93]");
    }

    @Test
    public void test189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test189");
        int int1 = com.alibaba.fastjson.util.IOUtils.stringSize((long) (byte) 1);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
    }

    @Test
    public void test190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test190");
        com.alibaba.fastjson.JSONException jSONException2 = new com.alibaba.fastjson.JSONException("hi!");
        com.alibaba.fastjson.JSONException jSONException3 = new com.alibaba.fastjson.JSONException("", (java.lang.Throwable) jSONException2);
        com.alibaba.fastjson.JSONException jSONException6 = new com.alibaba.fastjson.JSONException("hi!");
        com.alibaba.fastjson.JSONException jSONException7 = new com.alibaba.fastjson.JSONException("", (java.lang.Throwable) jSONException6);
        java.lang.Throwable[] throwableArray8 = jSONException6.getSuppressed();
        jSONException3.addSuppressed((java.lang.Throwable) jSONException6);
        org.junit.Assert.assertNotNull(throwableArray8);
    }

    @Test
    public void test191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test191");
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature0 = com.alibaba.fastjson.serializer.SerializerFeature.WriteSlashAsSpecial;
        org.junit.Assert.assertTrue("'" + serializerFeature0 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteSlashAsSpecial + "'", serializerFeature0.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteSlashAsSpecial));
    }

    @Test
    public void test192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test192");
        com.alibaba.fastjson.JSONObject jSONObject1 = new com.alibaba.fastjson.JSONObject(0);
        boolean boolean3 = jSONObject1.equals((java.lang.Object) (byte) 10);
        java.lang.Float float5 = jSONObject1.getFloat("UTF-8");
        jSONObject1.clear();
        com.alibaba.fastjson.serializer.SerializeConfig serializeConfig7 = null;
        com.alibaba.fastjson.serializer.SerializeFilter serializeFilter8 = null;
        java.io.Writer writer9 = null;
        com.alibaba.fastjson.serializer.SerializeWriter serializeWriter11 = new com.alibaba.fastjson.serializer.SerializeWriter(writer9, 10);
        serializeWriter11.write((int) (byte) -1);
        java.lang.String[] strArray44 = new java.lang.String[] { ":true", "1.2.76", "serialize exceeded MAX_OUTPUT_LENGTH=", "-2147483648", ", minimumCapacity=", "\"-9223372036854775808\"", "@type", "\"\"", "null:", "null:", "1.2.76", "Negative initial size:", ":true", "-9223372036854775808", "fastjson.serializer_buffer_threshold", "fastjson.compatibleWithFieldName", "'WriteMapNullValue'", "1.2.76", "UTF-8", "fastjson.compatibleWithJavaBean", "1.2.76", "Negative initial size:", "1.2.76", "\"-9223372036854775808\"", "''", "@type", "fastjson.serializer_buffer_threshold", "0.0", "1.2.76", ":false" };
        java.util.ArrayList<java.lang.String> strList45 = new java.util.ArrayList<java.lang.String>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList45, strArray44);
        serializeWriter11.write((java.util.List<java.lang.String>) strList45);
        serializeWriter11.writeLongAndChar((long) 'a', '#');
        com.alibaba.fastjson.serializer.SerializeFilter[] serializeFilterArray55 = new com.alibaba.fastjson.serializer.SerializeFilter[] {};
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature56 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature57 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature58 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature59 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature60 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature[] serializerFeatureArray61 = new com.alibaba.fastjson.serializer.SerializerFeature[] { serializerFeature56, serializerFeature57, serializerFeature58, serializerFeature59, serializerFeature60 };
        byte[] byteArray62 = com.alibaba.fastjson.JSON.toJSONBytes((java.lang.Object) "hi!", serializeFilterArray55, serializerFeatureArray61);
        java.lang.String str63 = com.alibaba.fastjson.JSON.toJSONStringWithDateFormat((java.lang.Object) "Negative initial size:", ", minimumCapacity=", serializerFeatureArray61);
        com.alibaba.fastjson.serializer.SerializeWriter serializeWriter64 = new com.alibaba.fastjson.serializer.SerializeWriter((java.io.Writer) serializeWriter11, (int) (short) 10, serializerFeatureArray61);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray65 = com.alibaba.fastjson.JSON.toJSONBytes((java.lang.Object) jSONObject1, serializeConfig7, serializeFilter8, serializerFeatureArray61);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(float5);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(serializeFilterArray55);
        org.junit.Assert.assertTrue("'" + serializerFeature56 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature56.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature57 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature57.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature58 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature58.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + serializerFeature59 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature59.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature60 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature60.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertNotNull(serializerFeatureArray61);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[39, 104, 105, 33, 39]");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "'Negative initial size:'" + "'", str63, "'Negative initial size:'");
    }

    @Test
    public void test193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test193");
        com.alibaba.fastjson.parser.DefaultJSONParser defaultJSONParser1 = new com.alibaba.fastjson.parser.DefaultJSONParser("Negative initial size:");
    }

    @Test
    public void test194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test194");
        byte[] byteArray0 = com.alibaba.fastjson.util.IOUtils.specicalFlags_doubleQuotes;
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray0), "[4, 4, 4, 4, 4, 4, 4, 4, 1, 1, 1, 4, 1, 1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0]");
    }

    @Test
    public void test195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test195");
        char[] charArray4 = new char[] { '#', '#', ' ' };
        byte[] byteArray7 = com.alibaba.fastjson.util.IOUtils.decodeBase64(charArray4, 10, (int) (byte) 0);
        com.alibaba.fastjson.serializer.SerializeFilter[] serializeFilterArray9 = new com.alibaba.fastjson.serializer.SerializeFilter[] {};
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature10 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature11 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature12 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature13 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature14 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature[] serializerFeatureArray15 = new com.alibaba.fastjson.serializer.SerializerFeature[] { serializerFeature10, serializerFeature11, serializerFeature12, serializerFeature13, serializerFeature14 };
        byte[] byteArray16 = com.alibaba.fastjson.JSON.toJSONBytes((java.lang.Object) "hi!", serializeFilterArray9, serializerFeatureArray15);
        java.nio.charset.Charset charset19 = com.alibaba.fastjson.util.IOUtils.UTF8;
        java.lang.reflect.Type type20 = null;
        byte[] byteArray27 = new byte[] { (byte) 10, (byte) -1, (byte) 100, (byte) 10, (byte) 10, (byte) 1 };
        java.lang.reflect.Type type28 = null;
        com.alibaba.fastjson.parser.Feature feature29 = null;
        com.alibaba.fastjson.parser.Feature[] featureArray30 = new com.alibaba.fastjson.parser.Feature[] { feature29 };
        java.lang.Comparable<java.lang.String> strComparable31 = com.alibaba.fastjson.JSON.parseObject(byteArray27, type28, featureArray30);
        java.nio.charset.Charset charset32 = com.alibaba.fastjson.JSON.parseObject(byteArray16, 3089, (int) (short) -1, charset19, type20, featureArray30);
        com.alibaba.fastjson.JSONObject jSONObject34 = new com.alibaba.fastjson.JSONObject(0);
        boolean boolean36 = jSONObject34.equals((java.lang.Object) (byte) 10);
        java.util.Set<java.util.Map.Entry<java.lang.String, java.lang.Object>> strEntrySet37 = jSONObject34.entrySet();
        short short39 = jSONObject34.getShortValue("UTF-8");
        java.lang.String str41 = jSONObject34.getString("null:");
        java.lang.Class<?> wildcardClass42 = jSONObject34.getClass();
        com.alibaba.fastjson.parser.ParserConfig parserConfig43 = null;
        com.alibaba.fastjson.parser.deserializer.ParseProcess parseProcess44 = null;
        com.alibaba.fastjson.parser.Feature[] featureArray46 = new com.alibaba.fastjson.parser.Feature[] {};
        java.text.DateFormat dateFormat47 = com.alibaba.fastjson.JSON.parseObject(byteArray7, charset32, (java.lang.reflect.Type) wildcardClass42, parserConfig43, parseProcess44, (int) '4', featureArray46);
        com.alibaba.fastjson.parser.ParserConfig parserConfig48 = null;
        com.alibaba.fastjson.parser.deserializer.ParseProcess parseProcess49 = null;
        com.alibaba.fastjson.serializer.SerializeFilter[] serializeFilterArray52 = new com.alibaba.fastjson.serializer.SerializeFilter[] {};
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature53 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature54 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature55 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature56 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature57 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature[] serializerFeatureArray58 = new com.alibaba.fastjson.serializer.SerializerFeature[] { serializerFeature53, serializerFeature54, serializerFeature55, serializerFeature56, serializerFeature57 };
        byte[] byteArray59 = com.alibaba.fastjson.JSON.toJSONBytes((java.lang.Object) "hi!", serializeFilterArray52, serializerFeatureArray58);
        java.nio.charset.Charset charset62 = com.alibaba.fastjson.util.IOUtils.UTF8;
        java.lang.reflect.Type type63 = null;
        byte[] byteArray70 = new byte[] { (byte) 10, (byte) -1, (byte) 100, (byte) 10, (byte) 10, (byte) 1 };
        java.lang.reflect.Type type71 = null;
        com.alibaba.fastjson.parser.Feature feature72 = null;
        com.alibaba.fastjson.parser.Feature[] featureArray73 = new com.alibaba.fastjson.parser.Feature[] { feature72 };
        java.lang.Comparable<java.lang.String> strComparable74 = com.alibaba.fastjson.JSON.parseObject(byteArray70, type71, featureArray73);
        java.nio.charset.Charset charset75 = com.alibaba.fastjson.JSON.parseObject(byteArray59, 3089, (int) (short) -1, charset62, type63, featureArray73);
        com.alibaba.fastjson.serializer.SerializerFeature[] serializerFeatureArray77 = new com.alibaba.fastjson.serializer.SerializerFeature[] {};
        byte[] byteArray78 = com.alibaba.fastjson.JSON.toJSONBytes((java.lang.Object) 10.0d, serializerFeatureArray77);
        byte[] byteArray79 = com.alibaba.fastjson.JSON.toJSONBytes((java.lang.Object) featureArray73, serializerFeatureArray77);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.GenericDeclaration genericDeclaration80 = com.alibaba.fastjson.JSON.parseObject("'Negative initial size:'", (java.lang.reflect.Type) wildcardClass42, parserConfig48, parseProcess49, (int) (short) 0, featureArray73);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray4);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray4), "## ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray4), "## ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray4), "[#, #,  ]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(serializeFilterArray9);
        org.junit.Assert.assertTrue("'" + serializerFeature10 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature10.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature11 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature11.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature12 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature12.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + serializerFeature13 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature13.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature14 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature14.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertNotNull(serializerFeatureArray15);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[39, 104, 105, 33, 39]");
        org.junit.Assert.assertNotNull(charset19);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[10, -1, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(featureArray30);
        org.junit.Assert.assertNull(strComparable31);
        org.junit.Assert.assertNull(charset32);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(strEntrySet37);
        org.junit.Assert.assertTrue("'" + short39 + "' != '" + (short) 0 + "'", short39 == (short) 0);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNotNull(wildcardClass42);
        org.junit.Assert.assertNotNull(featureArray46);
        org.junit.Assert.assertNull(dateFormat47);
        org.junit.Assert.assertNotNull(serializeFilterArray52);
        org.junit.Assert.assertTrue("'" + serializerFeature53 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature53.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature54 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature54.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature55 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature55.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + serializerFeature56 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature56.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature57 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature57.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertNotNull(serializerFeatureArray58);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[39, 104, 105, 33, 39]");
        org.junit.Assert.assertNotNull(charset62);
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[10, -1, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(featureArray73);
        org.junit.Assert.assertNull(strComparable74);
        org.junit.Assert.assertNull(charset75);
        org.junit.Assert.assertNotNull(serializerFeatureArray77);
        org.junit.Assert.assertNotNull(byteArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[49, 48, 46, 48]");
        org.junit.Assert.assertNotNull(byteArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[91, 110, 117, 108, 108, 93]");
    }

    @Test
    public void test196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test196");
        com.alibaba.fastjson.parser.DefaultJSONParser defaultJSONParser1 = new com.alibaba.fastjson.parser.DefaultJSONParser(":true");
        java.util.List<com.alibaba.fastjson.parser.deserializer.ExtraTypeProvider> extraTypeProviderList2 = defaultJSONParser1.getExtraTypeProviders();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj3 = defaultJSONParser1.parse();
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson.JSONException; message: syntax error, pos 1, line 1, column 2:true");
        } catch (com.alibaba.fastjson.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(extraTypeProviderList2);
    }

    @Test
    public void test197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test197");
        java.io.InputStream inputStream0 = null;
        java.nio.charset.Charset charset1 = com.alibaba.fastjson.util.IOUtils.UTF8;
        char[] charArray5 = new char[] { '#', '#', ' ' };
        byte[] byteArray8 = com.alibaba.fastjson.util.IOUtils.decodeBase64(charArray5, 10, (int) (byte) 0);
        com.alibaba.fastjson.serializer.SerializeFilter[] serializeFilterArray10 = new com.alibaba.fastjson.serializer.SerializeFilter[] {};
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature11 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature12 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature13 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature14 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature15 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature[] serializerFeatureArray16 = new com.alibaba.fastjson.serializer.SerializerFeature[] { serializerFeature11, serializerFeature12, serializerFeature13, serializerFeature14, serializerFeature15 };
        byte[] byteArray17 = com.alibaba.fastjson.JSON.toJSONBytes((java.lang.Object) "hi!", serializeFilterArray10, serializerFeatureArray16);
        java.nio.charset.Charset charset20 = com.alibaba.fastjson.util.IOUtils.UTF8;
        java.lang.reflect.Type type21 = null;
        byte[] byteArray28 = new byte[] { (byte) 10, (byte) -1, (byte) 100, (byte) 10, (byte) 10, (byte) 1 };
        java.lang.reflect.Type type29 = null;
        com.alibaba.fastjson.parser.Feature feature30 = null;
        com.alibaba.fastjson.parser.Feature[] featureArray31 = new com.alibaba.fastjson.parser.Feature[] { feature30 };
        java.lang.Comparable<java.lang.String> strComparable32 = com.alibaba.fastjson.JSON.parseObject(byteArray28, type29, featureArray31);
        java.nio.charset.Charset charset33 = com.alibaba.fastjson.JSON.parseObject(byteArray17, 3089, (int) (short) -1, charset20, type21, featureArray31);
        com.alibaba.fastjson.JSONObject jSONObject35 = new com.alibaba.fastjson.JSONObject(0);
        boolean boolean37 = jSONObject35.equals((java.lang.Object) (byte) 10);
        java.util.Set<java.util.Map.Entry<java.lang.String, java.lang.Object>> strEntrySet38 = jSONObject35.entrySet();
        short short40 = jSONObject35.getShortValue("UTF-8");
        java.lang.String str42 = jSONObject35.getString("null:");
        java.lang.Class<?> wildcardClass43 = jSONObject35.getClass();
        com.alibaba.fastjson.parser.ParserConfig parserConfig44 = null;
        com.alibaba.fastjson.parser.deserializer.ParseProcess parseProcess45 = null;
        com.alibaba.fastjson.parser.Feature[] featureArray47 = new com.alibaba.fastjson.parser.Feature[] {};
        java.text.DateFormat dateFormat48 = com.alibaba.fastjson.JSON.parseObject(byteArray8, charset33, (java.lang.reflect.Type) wildcardClass43, parserConfig44, parseProcess45, (int) '4', featureArray47);
        com.alibaba.fastjson.parser.ParserConfig parserConfig49 = null;
        com.alibaba.fastjson.serializer.SerializeFilter[] serializeFilterArray51 = new com.alibaba.fastjson.serializer.SerializeFilter[] {};
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature52 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature53 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature54 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature55 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature56 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature[] serializerFeatureArray57 = new com.alibaba.fastjson.serializer.SerializerFeature[] { serializerFeature52, serializerFeature53, serializerFeature54, serializerFeature55, serializerFeature56 };
        byte[] byteArray58 = com.alibaba.fastjson.JSON.toJSONBytes((java.lang.Object) "hi!", serializeFilterArray51, serializerFeatureArray57);
        java.nio.charset.Charset charset61 = com.alibaba.fastjson.util.IOUtils.UTF8;
        java.lang.reflect.Type type62 = null;
        byte[] byteArray69 = new byte[] { (byte) 10, (byte) -1, (byte) 100, (byte) 10, (byte) 10, (byte) 1 };
        java.lang.reflect.Type type70 = null;
        com.alibaba.fastjson.parser.Feature feature71 = null;
        com.alibaba.fastjson.parser.Feature[] featureArray72 = new com.alibaba.fastjson.parser.Feature[] { feature71 };
        java.lang.Comparable<java.lang.String> strComparable73 = com.alibaba.fastjson.JSON.parseObject(byteArray69, type70, featureArray72);
        java.nio.charset.Charset charset74 = com.alibaba.fastjson.JSON.parseObject(byteArray58, 3089, (int) (short) -1, charset61, type62, featureArray72);
        // The following exception was thrown during execution in test generation
        try {
            java.util.AbstractCollection<java.lang.String> strCollection75 = com.alibaba.fastjson.JSON.parseObject(inputStream0, charset1, (java.lang.reflect.Type) wildcardClass43, parserConfig49, featureArray72);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "## ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "## ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[#, #,  ]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(serializeFilterArray10);
        org.junit.Assert.assertTrue("'" + serializerFeature11 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature11.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature12 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature12.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature13 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature13.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + serializerFeature14 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature14.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature15 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature15.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertNotNull(serializerFeatureArray16);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[39, 104, 105, 33, 39]");
        org.junit.Assert.assertNotNull(charset20);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[10, -1, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(featureArray31);
        org.junit.Assert.assertNull(strComparable32);
        org.junit.Assert.assertNull(charset33);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(strEntrySet38);
        org.junit.Assert.assertTrue("'" + short40 + "' != '" + (short) 0 + "'", short40 == (short) 0);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(wildcardClass43);
        org.junit.Assert.assertNotNull(featureArray47);
        org.junit.Assert.assertNull(dateFormat48);
        org.junit.Assert.assertNotNull(serializeFilterArray51);
        org.junit.Assert.assertTrue("'" + serializerFeature52 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature52.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature53 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature53.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature54 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature54.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + serializerFeature55 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature55.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature56 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature56.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertNotNull(serializerFeatureArray57);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[39, 104, 105, 33, 39]");
        org.junit.Assert.assertNotNull(charset61);
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[10, -1, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(featureArray72);
        org.junit.Assert.assertNull(strComparable73);
        org.junit.Assert.assertNull(charset74);
    }

    @Test
    public void test198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test198");
        // The following exception was thrown during execution in test generation
        try {
            com.alibaba.fastjson.JSONObject jSONObject1 = com.alibaba.fastjson.JSON.parseObject("\"-9223372036854775808\"");
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson.JSONException; message: can not cast to JSONObject.");
        } catch (com.alibaba.fastjson.JSONException e) {
            // Expected exception.
        }
    }

    @Test
    public void test199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test199");
        com.alibaba.fastjson.serializer.SerializeFilter[] serializeFilterArray1 = new com.alibaba.fastjson.serializer.SerializeFilter[] {};
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature2 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature3 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature4 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature5 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature6 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature[] serializerFeatureArray7 = new com.alibaba.fastjson.serializer.SerializerFeature[] { serializerFeature2, serializerFeature3, serializerFeature4, serializerFeature5, serializerFeature6 };
        byte[] byteArray8 = com.alibaba.fastjson.JSON.toJSONBytes((java.lang.Object) "hi!", serializeFilterArray1, serializerFeatureArray7);
        java.nio.charset.Charset charset11 = com.alibaba.fastjson.util.IOUtils.UTF8;
        java.lang.reflect.Type type12 = null;
        byte[] byteArray19 = new byte[] { (byte) 10, (byte) -1, (byte) 100, (byte) 10, (byte) 10, (byte) 1 };
        java.lang.reflect.Type type20 = null;
        com.alibaba.fastjson.parser.Feature feature21 = null;
        com.alibaba.fastjson.parser.Feature[] featureArray22 = new com.alibaba.fastjson.parser.Feature[] { feature21 };
        java.lang.Comparable<java.lang.String> strComparable23 = com.alibaba.fastjson.JSON.parseObject(byteArray19, type20, featureArray22);
        java.nio.charset.Charset charset24 = com.alibaba.fastjson.JSON.parseObject(byteArray8, 3089, (int) (short) -1, charset11, type12, featureArray22);
        com.alibaba.fastjson.serializer.SerializerFeature[] serializerFeatureArray26 = new com.alibaba.fastjson.serializer.SerializerFeature[] {};
        byte[] byteArray27 = com.alibaba.fastjson.JSON.toJSONBytes((java.lang.Object) 10.0d, serializerFeatureArray26);
        byte[] byteArray28 = com.alibaba.fastjson.JSON.toJSONBytes((java.lang.Object) featureArray22, serializerFeatureArray26);
        com.alibaba.fastjson.serializer.SerializeWriter serializeWriter29 = new com.alibaba.fastjson.serializer.SerializeWriter(serializerFeatureArray26);
        serializeWriter29.write(10);
        org.junit.Assert.assertNotNull(serializeFilterArray1);
        org.junit.Assert.assertTrue("'" + serializerFeature2 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature2.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature3 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature3.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature4 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature4.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + serializerFeature5 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature5.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature6 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature6.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertNotNull(serializerFeatureArray7);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[39, 104, 105, 33, 39]");
        org.junit.Assert.assertNotNull(charset11);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[10, -1, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(featureArray22);
        org.junit.Assert.assertNull(strComparable23);
        org.junit.Assert.assertNull(charset24);
        org.junit.Assert.assertNotNull(serializerFeatureArray26);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[49, 48, 46, 48]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[91, 110, 117, 108, 108, 93]");
    }

    @Test
    public void test200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test200");
        com.alibaba.fastjson.parser.ParseContext parseContext0 = null;
        com.alibaba.fastjson.parser.DefaultJSONParser.ResolveTask resolveTask2 = new com.alibaba.fastjson.parser.DefaultJSONParser.ResolveTask(parseContext0, "writer not null");
        java.lang.String str3 = resolveTask2.referenceValue;
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "writer not null" + "'", str3, "writer not null");
    }

    @Test
    public void test201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test201");
        // The following exception was thrown during execution in test generation
        try {
            com.alibaba.fastjson.JSONArray jSONArray1 = com.alibaba.fastjson.JSON.parseArray("{}");
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson.JSONException; message: syntax error, expect [, actual {, pos 0, fieldName null");
        } catch (com.alibaba.fastjson.JSONException e) {
            // Expected exception.
        }
    }

    @Test
    public void test202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test202");
        com.alibaba.fastjson.parser.ParserConfig parserConfig1 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.alibaba.fastjson.parser.DefaultJSONParser defaultJSONParser3 = new com.alibaba.fastjson.parser.DefaultJSONParser("'WriteTabAsSpecial'", parserConfig1, 2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test203");
        // The following exception was thrown during execution in test generation
        try {
            com.alibaba.fastjson.JSONObject jSONObject1 = com.alibaba.fastjson.JSON.parseObject("yyyy-MM-dd HH:mm:ss");
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson.JSONException; message: syntax error, pos 1, line 1, column 2yyyy-MM-dd HH:mm:ss");
        } catch (com.alibaba.fastjson.JSONException e) {
            // Expected exception.
        }
    }

    @Test
    public void test204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test204");
        com.alibaba.fastjson.serializer.SerializeFilter[] serializeFilterArray1 = new com.alibaba.fastjson.serializer.SerializeFilter[] {};
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature2 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature3 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature4 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature5 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature6 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature[] serializerFeatureArray7 = new com.alibaba.fastjson.serializer.SerializerFeature[] { serializerFeature2, serializerFeature3, serializerFeature4, serializerFeature5, serializerFeature6 };
        byte[] byteArray8 = com.alibaba.fastjson.JSON.toJSONBytes((java.lang.Object) "hi!", serializeFilterArray1, serializerFeatureArray7);
        java.nio.charset.Charset charset11 = com.alibaba.fastjson.util.IOUtils.UTF8;
        java.lang.reflect.Type type12 = null;
        byte[] byteArray19 = new byte[] { (byte) 10, (byte) -1, (byte) 100, (byte) 10, (byte) 10, (byte) 1 };
        java.lang.reflect.Type type20 = null;
        com.alibaba.fastjson.parser.Feature feature21 = null;
        com.alibaba.fastjson.parser.Feature[] featureArray22 = new com.alibaba.fastjson.parser.Feature[] { feature21 };
        java.lang.Comparable<java.lang.String> strComparable23 = com.alibaba.fastjson.JSON.parseObject(byteArray19, type20, featureArray22);
        java.nio.charset.Charset charset24 = com.alibaba.fastjson.JSON.parseObject(byteArray8, 3089, (int) (short) -1, charset11, type12, featureArray22);
        com.alibaba.fastjson.serializer.SerializerFeature[] serializerFeatureArray26 = new com.alibaba.fastjson.serializer.SerializerFeature[] {};
        byte[] byteArray27 = com.alibaba.fastjson.JSON.toJSONBytes((java.lang.Object) 10.0d, serializerFeatureArray26);
        byte[] byteArray28 = com.alibaba.fastjson.JSON.toJSONBytes((java.lang.Object) featureArray22, serializerFeatureArray26);
        com.alibaba.fastjson.JSONObject jSONObject30 = new com.alibaba.fastjson.JSONObject(0);
        boolean boolean32 = jSONObject30.equals((java.lang.Object) (byte) 10);
        java.util.Set<java.util.Map.Entry<java.lang.String, java.lang.Object>> strEntrySet33 = jSONObject30.entrySet();
        short short35 = jSONObject30.getShortValue("UTF-8");
        java.lang.String str37 = jSONObject30.getString("null:");
        java.lang.Class<?> wildcardClass38 = jSONObject30.getClass();
        char[] charArray42 = new char[] { '#', '#', ' ' };
        byte[] byteArray45 = com.alibaba.fastjson.util.IOUtils.decodeBase64(charArray42, 10, (int) (byte) 0);
        com.alibaba.fastjson.serializer.SerializeFilter[] serializeFilterArray47 = new com.alibaba.fastjson.serializer.SerializeFilter[] {};
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature48 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature49 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature50 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature51 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature52 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature[] serializerFeatureArray53 = new com.alibaba.fastjson.serializer.SerializerFeature[] { serializerFeature48, serializerFeature49, serializerFeature50, serializerFeature51, serializerFeature52 };
        byte[] byteArray54 = com.alibaba.fastjson.JSON.toJSONBytes((java.lang.Object) "hi!", serializeFilterArray47, serializerFeatureArray53);
        java.nio.charset.Charset charset57 = com.alibaba.fastjson.util.IOUtils.UTF8;
        java.lang.reflect.Type type58 = null;
        byte[] byteArray65 = new byte[] { (byte) 10, (byte) -1, (byte) 100, (byte) 10, (byte) 10, (byte) 1 };
        java.lang.reflect.Type type66 = null;
        com.alibaba.fastjson.parser.Feature feature67 = null;
        com.alibaba.fastjson.parser.Feature[] featureArray68 = new com.alibaba.fastjson.parser.Feature[] { feature67 };
        java.lang.Comparable<java.lang.String> strComparable69 = com.alibaba.fastjson.JSON.parseObject(byteArray65, type66, featureArray68);
        java.nio.charset.Charset charset70 = com.alibaba.fastjson.JSON.parseObject(byteArray54, 3089, (int) (short) -1, charset57, type58, featureArray68);
        com.alibaba.fastjson.JSONObject jSONObject72 = new com.alibaba.fastjson.JSONObject(0);
        boolean boolean74 = jSONObject72.equals((java.lang.Object) (byte) 10);
        java.util.Set<java.util.Map.Entry<java.lang.String, java.lang.Object>> strEntrySet75 = jSONObject72.entrySet();
        short short77 = jSONObject72.getShortValue("UTF-8");
        java.lang.String str79 = jSONObject72.getString("null:");
        java.lang.Class<?> wildcardClass80 = jSONObject72.getClass();
        com.alibaba.fastjson.parser.ParserConfig parserConfig81 = null;
        com.alibaba.fastjson.parser.deserializer.ParseProcess parseProcess82 = null;
        com.alibaba.fastjson.parser.Feature[] featureArray84 = new com.alibaba.fastjson.parser.Feature[] {};
        java.text.DateFormat dateFormat85 = com.alibaba.fastjson.JSON.parseObject(byteArray45, charset70, (java.lang.reflect.Type) wildcardClass80, parserConfig81, parseProcess82, (int) '4', featureArray84);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray86 = com.alibaba.fastjson.JSON.parseObject(byteArray28, (java.lang.reflect.Type) wildcardClass38, featureArray84);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson.JSONException; message: syntax error, expect {, actual [, pos 1, line 1, column 2[null]");
        } catch (com.alibaba.fastjson.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(serializeFilterArray1);
        org.junit.Assert.assertTrue("'" + serializerFeature2 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature2.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature3 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature3.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature4 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature4.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + serializerFeature5 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature5.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature6 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature6.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertNotNull(serializerFeatureArray7);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[39, 104, 105, 33, 39]");
        org.junit.Assert.assertNotNull(charset11);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[10, -1, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(featureArray22);
        org.junit.Assert.assertNull(strComparable23);
        org.junit.Assert.assertNull(charset24);
        org.junit.Assert.assertNotNull(serializerFeatureArray26);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[49, 48, 46, 48]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[91, 110, 117, 108, 108, 93]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(strEntrySet33);
        org.junit.Assert.assertTrue("'" + short35 + "' != '" + (short) 0 + "'", short35 == (short) 0);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNotNull(wildcardClass38);
        org.junit.Assert.assertNotNull(charArray42);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray42), "## ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray42), "## ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray42), "[#, #,  ]");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[]");
        org.junit.Assert.assertNotNull(serializeFilterArray47);
        org.junit.Assert.assertTrue("'" + serializerFeature48 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature48.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature49 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature49.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature50 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature50.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + serializerFeature51 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature51.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature52 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature52.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertNotNull(serializerFeatureArray53);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[39, 104, 105, 33, 39]");
        org.junit.Assert.assertNotNull(charset57);
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[10, -1, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(featureArray68);
        org.junit.Assert.assertNull(strComparable69);
        org.junit.Assert.assertNull(charset70);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(strEntrySet75);
        org.junit.Assert.assertTrue("'" + short77 + "' != '" + (short) 0 + "'", short77 == (short) 0);
        org.junit.Assert.assertNull(str79);
        org.junit.Assert.assertNotNull(wildcardClass80);
        org.junit.Assert.assertNotNull(featureArray84);
        org.junit.Assert.assertNull(dateFormat85);
    }

    @Test
    public void test205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test205");
        java.io.Writer writer0 = null;
        com.alibaba.fastjson.serializer.SerializeWriter serializeWriter2 = new com.alibaba.fastjson.serializer.SerializeWriter(writer0, 10);
        serializeWriter2.write((int) (byte) -1);
        java.lang.String[] strArray35 = new java.lang.String[] { ":true", "1.2.76", "serialize exceeded MAX_OUTPUT_LENGTH=", "-2147483648", ", minimumCapacity=", "\"-9223372036854775808\"", "@type", "\"\"", "null:", "null:", "1.2.76", "Negative initial size:", ":true", "-9223372036854775808", "fastjson.serializer_buffer_threshold", "fastjson.compatibleWithFieldName", "'WriteMapNullValue'", "1.2.76", "UTF-8", "fastjson.compatibleWithJavaBean", "1.2.76", "Negative initial size:", "1.2.76", "\"-9223372036854775808\"", "''", "@type", "fastjson.serializer_buffer_threshold", "0.0", "1.2.76", ":false" };
        java.util.ArrayList<java.lang.String> strList36 = new java.util.ArrayList<java.lang.String>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList36, strArray35);
        serializeWriter2.write((java.util.List<java.lang.String>) strList36);
        serializeWriter2.writeLongAndChar((long) 'a', '#');
        com.alibaba.fastjson.serializer.SerializeFilter[] serializeFilterArray46 = new com.alibaba.fastjson.serializer.SerializeFilter[] {};
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature47 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature48 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature49 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature50 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature51 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature[] serializerFeatureArray52 = new com.alibaba.fastjson.serializer.SerializerFeature[] { serializerFeature47, serializerFeature48, serializerFeature49, serializerFeature50, serializerFeature51 };
        byte[] byteArray53 = com.alibaba.fastjson.JSON.toJSONBytes((java.lang.Object) "hi!", serializeFilterArray46, serializerFeatureArray52);
        java.lang.String str54 = com.alibaba.fastjson.JSON.toJSONStringWithDateFormat((java.lang.Object) "Negative initial size:", ", minimumCapacity=", serializerFeatureArray52);
        com.alibaba.fastjson.serializer.SerializeWriter serializeWriter55 = new com.alibaba.fastjson.serializer.SerializeWriter((java.io.Writer) serializeWriter2, (int) (short) 10, serializerFeatureArray52);
        serializeWriter55.write(":true");
        serializeWriter55.write("'WriteMapNullValue'");
        serializeWriter55.writeLong((long) 2);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(serializeFilterArray46);
        org.junit.Assert.assertTrue("'" + serializerFeature47 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature47.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature48 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature48.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature49 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature49.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + serializerFeature50 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature50.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature51 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature51.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertNotNull(serializerFeatureArray52);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[39, 104, 105, 33, 39]");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "'Negative initial size:'" + "'", str54, "'Negative initial size:'");
    }

    @Test
    public void test206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test206");
        com.alibaba.fastjson.JSONObject jSONObject1 = new com.alibaba.fastjson.JSONObject(0);
        boolean boolean3 = jSONObject1.equals((java.lang.Object) (byte) 10);
        java.lang.Float float5 = jSONObject1.getFloat("UTF-8");
        com.alibaba.fastjson.parser.ParserConfig parserConfig6 = null;
        java.lang.Object obj7 = com.alibaba.fastjson.JSON.toJSON((java.lang.Object) jSONObject1, parserConfig6);
        com.alibaba.fastjson.JSONObject jSONObject9 = jSONObject1.fluentRemove((java.lang.Object) 1.0d);
        boolean boolean11 = jSONObject9.containsKey((java.lang.Object) 2);
        java.lang.Byte byte13 = jSONObject9.getByte("true");
        java.io.Writer writer14 = null;
        com.alibaba.fastjson.serializer.SerializeWriter serializeWriter16 = new com.alibaba.fastjson.serializer.SerializeWriter(writer14, 10);
        serializeWriter16.writeStringWithDoubleQuote("'WriteTabAsSpecial'", '4');
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature20 = com.alibaba.fastjson.serializer.SerializerFeature.WriteTabAsSpecial;
        com.alibaba.fastjson.serializer.SerializeFilter[] serializeFilterArray22 = new com.alibaba.fastjson.serializer.SerializeFilter[] {};
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature23 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature24 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature25 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature26 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature27 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature[] serializerFeatureArray28 = new com.alibaba.fastjson.serializer.SerializerFeature[] { serializerFeature23, serializerFeature24, serializerFeature25, serializerFeature26, serializerFeature27 };
        byte[] byteArray29 = com.alibaba.fastjson.JSON.toJSONBytes((java.lang.Object) "hi!", serializeFilterArray22, serializerFeatureArray28);
        com.alibaba.fastjson.serializer.SerializeFilter[] serializeFilterArray31 = new com.alibaba.fastjson.serializer.SerializeFilter[] {};
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature32 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature33 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature34 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature35 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature36 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature[] serializerFeatureArray37 = new com.alibaba.fastjson.serializer.SerializerFeature[] { serializerFeature32, serializerFeature33, serializerFeature34, serializerFeature35, serializerFeature36 };
        byte[] byteArray38 = com.alibaba.fastjson.JSON.toJSONBytes((java.lang.Object) "hi!", serializeFilterArray31, serializerFeatureArray37);
        java.lang.String str39 = com.alibaba.fastjson.JSON.toJSONString((java.lang.Object) serializerFeature20, serializeFilterArray22, serializerFeatureArray37);
        com.alibaba.fastjson.serializer.SerializeWriter serializeWriter40 = new com.alibaba.fastjson.serializer.SerializeWriter((java.io.Writer) serializeWriter16, serializerFeatureArray37);
        java.lang.String str41 = serializeWriter16.toString();
        char[] charArray44 = com.alibaba.fastjson.util.IOUtils.CA;
        com.alibaba.fastjson.util.IOUtils.getChars((long) 0, (int) ' ', charArray44);
        serializeWriter16.writeStringWithDoubleQuote(charArray44, '#');
        java.lang.reflect.Method method48 = null;
        com.alibaba.fastjson.serializer.SerializeFilter[] serializeFilterArray50 = new com.alibaba.fastjson.serializer.SerializeFilter[] {};
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature51 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature52 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature53 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature54 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature55 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature[] serializerFeatureArray56 = new com.alibaba.fastjson.serializer.SerializerFeature[] { serializerFeature51, serializerFeature52, serializerFeature53, serializerFeature54, serializerFeature55 };
        byte[] byteArray57 = com.alibaba.fastjson.JSON.toJSONBytes((java.lang.Object) "hi!", serializeFilterArray50, serializerFeatureArray56);
        java.nio.charset.Charset charset60 = com.alibaba.fastjson.util.IOUtils.UTF8;
        java.lang.reflect.Type type61 = null;
        byte[] byteArray68 = new byte[] { (byte) 10, (byte) -1, (byte) 100, (byte) 10, (byte) 10, (byte) 1 };
        java.lang.reflect.Type type69 = null;
        com.alibaba.fastjson.parser.Feature feature70 = null;
        com.alibaba.fastjson.parser.Feature[] featureArray71 = new com.alibaba.fastjson.parser.Feature[] { feature70 };
        java.lang.Comparable<java.lang.String> strComparable72 = com.alibaba.fastjson.JSON.parseObject(byteArray68, type69, featureArray71);
        java.nio.charset.Charset charset73 = com.alibaba.fastjson.JSON.parseObject(byteArray57, 3089, (int) (short) -1, charset60, type61, featureArray71);
        com.alibaba.fastjson.serializer.SerializerFeature[] serializerFeatureArray75 = new com.alibaba.fastjson.serializer.SerializerFeature[] {};
        byte[] byteArray76 = com.alibaba.fastjson.JSON.toJSONBytes((java.lang.Object) 10.0d, serializerFeatureArray75);
        byte[] byteArray77 = com.alibaba.fastjson.JSON.toJSONBytes((java.lang.Object) featureArray71, serializerFeatureArray75);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj78 = jSONObject9.invoke((java.lang.Object) '#', method48, (java.lang.Object[]) featureArray71);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(float5);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "{}");
        org.junit.Assert.assertNotNull(jSONObject9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(byte13);
        org.junit.Assert.assertTrue("'" + serializerFeature20 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteTabAsSpecial + "'", serializerFeature20.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteTabAsSpecial));
        org.junit.Assert.assertNotNull(serializeFilterArray22);
        org.junit.Assert.assertTrue("'" + serializerFeature23 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature23.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature24 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature24.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature25 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature25.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + serializerFeature26 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature26.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature27 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature27.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertNotNull(serializerFeatureArray28);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[39, 104, 105, 33, 39]");
        org.junit.Assert.assertNotNull(serializeFilterArray31);
        org.junit.Assert.assertTrue("'" + serializerFeature32 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature32.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature33 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature33.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature34 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature34.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + serializerFeature35 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature35.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature36 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature36.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertNotNull(serializerFeatureArray37);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[39, 104, 105, 33, 39]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "'WriteTabAsSpecial'" + "'", str39, "'WriteTabAsSpecial'");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "\"'WriteTabAsSpecial'\"4" + "'", str41, "\"'WriteTabAsSpecial'\"4");
        org.junit.Assert.assertNotNull(charArray44);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray44), "\000\000\000\000\000\000\000\000\000\000KLMNOPQRSTUVWXYZabcde0ghijklmnopqrstuvwxyz0123456789+/");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray44), "\000\000\000\000\000\000\000\000\000\000KLMNOPQRSTUVWXYZabcde0ghijklmnopqrstuvwxyz0123456789+/");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray44), "[\000, \000, \000, \000, \000, \000, \000, \000, \000, \000, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z, a, b, c, d, e, 0, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, +, /]");
        org.junit.Assert.assertNotNull(serializeFilterArray50);
        org.junit.Assert.assertTrue("'" + serializerFeature51 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature51.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature52 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature52.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature53 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature53.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + serializerFeature54 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature54.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature55 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature55.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertNotNull(serializerFeatureArray56);
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[39, 104, 105, 33, 39]");
        org.junit.Assert.assertNotNull(charset60);
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[10, -1, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(featureArray71);
        org.junit.Assert.assertNull(strComparable72);
        org.junit.Assert.assertNull(charset73);
        org.junit.Assert.assertNotNull(serializerFeatureArray75);
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[49, 48, 46, 48]");
        org.junit.Assert.assertNotNull(byteArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[91, 110, 117, 108, 108, 93]");
    }

    @Test
    public void test207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test207");
        java.io.Writer writer0 = null;
        com.alibaba.fastjson.serializer.SerializeWriter serializeWriter2 = new com.alibaba.fastjson.serializer.SerializeWriter(writer0, 10);
        serializeWriter2.write((int) (byte) -1);
        java.lang.String[] strArray35 = new java.lang.String[] { ":true", "1.2.76", "serialize exceeded MAX_OUTPUT_LENGTH=", "-2147483648", ", minimumCapacity=", "\"-9223372036854775808\"", "@type", "\"\"", "null:", "null:", "1.2.76", "Negative initial size:", ":true", "-9223372036854775808", "fastjson.serializer_buffer_threshold", "fastjson.compatibleWithFieldName", "'WriteMapNullValue'", "1.2.76", "UTF-8", "fastjson.compatibleWithJavaBean", "1.2.76", "Negative initial size:", "1.2.76", "\"-9223372036854775808\"", "''", "@type", "fastjson.serializer_buffer_threshold", "0.0", "1.2.76", ":false" };
        java.util.ArrayList<java.lang.String> strList36 = new java.util.ArrayList<java.lang.String>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList36, strArray35);
        serializeWriter2.write((java.util.List<java.lang.String>) strList36);
        serializeWriter2.writeLongAndChar((long) 'a', '#');
        com.alibaba.fastjson.serializer.SerializeFilter[] serializeFilterArray46 = new com.alibaba.fastjson.serializer.SerializeFilter[] {};
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature47 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature48 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature49 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature50 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature51 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature[] serializerFeatureArray52 = new com.alibaba.fastjson.serializer.SerializerFeature[] { serializerFeature47, serializerFeature48, serializerFeature49, serializerFeature50, serializerFeature51 };
        byte[] byteArray53 = com.alibaba.fastjson.JSON.toJSONBytes((java.lang.Object) "hi!", serializeFilterArray46, serializerFeatureArray52);
        java.lang.String str54 = com.alibaba.fastjson.JSON.toJSONStringWithDateFormat((java.lang.Object) "Negative initial size:", ", minimumCapacity=", serializerFeatureArray52);
        com.alibaba.fastjson.serializer.SerializeWriter serializeWriter55 = new com.alibaba.fastjson.serializer.SerializeWriter((java.io.Writer) serializeWriter2, (int) (short) 10, serializerFeatureArray52);
        serializeWriter55.write(":true");
        serializeWriter55.write("'WriteMapNullValue'");
        serializeWriter55.write(0);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(serializeFilterArray46);
        org.junit.Assert.assertTrue("'" + serializerFeature47 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature47.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature48 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature48.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature49 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature49.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + serializerFeature50 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature50.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature51 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature51.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertNotNull(serializerFeatureArray52);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[39, 104, 105, 33, 39]");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "'Negative initial size:'" + "'", str54, "'Negative initial size:'");
    }

    @Test
    public void test208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test208");
        com.alibaba.fastjson.JSONObject jSONObject1 = new com.alibaba.fastjson.JSONObject(0);
        boolean boolean3 = jSONObject1.equals((java.lang.Object) (byte) 10);
        java.util.Set<java.util.Map.Entry<java.lang.String, java.lang.Object>> strEntrySet4 = jSONObject1.entrySet();
        short short6 = jSONObject1.getShortValue("false");
        jSONObject1.clear();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(strEntrySet4);
        org.junit.Assert.assertTrue("'" + short6 + "' != '" + (short) 0 + "'", short6 == (short) 0);
    }

    @Test
    public void test209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test209");
        com.alibaba.fastjson.JSONObject jSONObject0 = new com.alibaba.fastjson.JSONObject();
    }

    @Test
    public void test210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test210");
        java.io.Writer writer1 = null;
        com.alibaba.fastjson.serializer.SerializeWriter serializeWriter3 = new com.alibaba.fastjson.serializer.SerializeWriter(writer1, 10);
        serializeWriter3.writeStringWithDoubleQuote("'WriteTabAsSpecial'", '4');
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature7 = com.alibaba.fastjson.serializer.SerializerFeature.WriteTabAsSpecial;
        com.alibaba.fastjson.serializer.SerializeFilter[] serializeFilterArray9 = new com.alibaba.fastjson.serializer.SerializeFilter[] {};
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature10 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature11 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature12 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature13 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature14 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature[] serializerFeatureArray15 = new com.alibaba.fastjson.serializer.SerializerFeature[] { serializerFeature10, serializerFeature11, serializerFeature12, serializerFeature13, serializerFeature14 };
        byte[] byteArray16 = com.alibaba.fastjson.JSON.toJSONBytes((java.lang.Object) "hi!", serializeFilterArray9, serializerFeatureArray15);
        com.alibaba.fastjson.serializer.SerializeFilter[] serializeFilterArray18 = new com.alibaba.fastjson.serializer.SerializeFilter[] {};
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature19 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature20 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature21 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature22 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature23 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature[] serializerFeatureArray24 = new com.alibaba.fastjson.serializer.SerializerFeature[] { serializerFeature19, serializerFeature20, serializerFeature21, serializerFeature22, serializerFeature23 };
        byte[] byteArray25 = com.alibaba.fastjson.JSON.toJSONBytes((java.lang.Object) "hi!", serializeFilterArray18, serializerFeatureArray24);
        java.lang.String str26 = com.alibaba.fastjson.JSON.toJSONString((java.lang.Object) serializerFeature7, serializeFilterArray9, serializerFeatureArray24);
        com.alibaba.fastjson.serializer.SerializeWriter serializeWriter27 = new com.alibaba.fastjson.serializer.SerializeWriter((java.io.Writer) serializeWriter3, serializerFeatureArray24);
        java.lang.String str28 = serializeWriter3.toString();
        char[] charArray31 = com.alibaba.fastjson.util.IOUtils.CA;
        com.alibaba.fastjson.util.IOUtils.getChars((long) 0, (int) ' ', charArray31);
        serializeWriter3.writeStringWithDoubleQuote(charArray31, '#');
        // The following exception was thrown during execution in test generation
        try {
            int int36 = com.alibaba.fastjson.util.RyuFloat.toString(100.0f, charArray31, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + serializerFeature7 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteTabAsSpecial + "'", serializerFeature7.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteTabAsSpecial));
        org.junit.Assert.assertNotNull(serializeFilterArray9);
        org.junit.Assert.assertTrue("'" + serializerFeature10 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature10.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature11 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature11.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature12 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature12.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + serializerFeature13 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature13.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature14 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature14.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertNotNull(serializerFeatureArray15);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[39, 104, 105, 33, 39]");
        org.junit.Assert.assertNotNull(serializeFilterArray18);
        org.junit.Assert.assertTrue("'" + serializerFeature19 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature19.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature20 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature20.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature21 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature21.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + serializerFeature22 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature22.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature23 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature23.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertNotNull(serializerFeatureArray24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[39, 104, 105, 33, 39]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "'WriteTabAsSpecial'" + "'", str26, "'WriteTabAsSpecial'");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "\"'WriteTabAsSpecial'\"4" + "'", str28, "\"'WriteTabAsSpecial'\"4");
        org.junit.Assert.assertNotNull(charArray31);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray31), "\000\000\000\000\000\000\000\000\000\000KLMNOPQRSTUVWXYZabcde0ghijklmnopqrstuvwxyz0123456789+/");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray31), "\000\000\000\000\000\000\000\000\000\000KLMNOPQRSTUVWXYZabcde0ghijklmnopqrstuvwxyz0123456789+/");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray31), "[\000, \000, \000, \000, \000, \000, \000, \000, \000, \000, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z, a, b, c, d, e, 0, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, +, /]");
    }

    @Test
    public void test211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test211");
        com.alibaba.fastjson.parser.DefaultJSONParser defaultJSONParser1 = new com.alibaba.fastjson.parser.DefaultJSONParser(":true");
        com.alibaba.fastjson.parser.SymbolTable symbolTable2 = defaultJSONParser1.getSymbolTable();
        com.alibaba.fastjson.parser.ParserConfig parserConfig3 = null;
        defaultJSONParser1.setConfig(parserConfig3);
        com.alibaba.fastjson.parser.ParseContext parseContext5 = null;
        com.alibaba.fastjson.parser.DefaultJSONParser.ResolveTask resolveTask7 = new com.alibaba.fastjson.parser.DefaultJSONParser.ResolveTask(parseContext5, "null");
        defaultJSONParser1.addResolveTask(resolveTask7);
        java.lang.Object obj10 = null;
        com.alibaba.fastjson.serializer.SerializeFilter serializeFilter11 = null;
        com.alibaba.fastjson.JSONObject jSONObject13 = new com.alibaba.fastjson.JSONObject(0);
        boolean boolean15 = jSONObject13.equals((java.lang.Object) (byte) 10);
        java.util.Set<java.util.Map.Entry<java.lang.String, java.lang.Object>> strEntrySet16 = jSONObject13.entrySet();
        com.alibaba.fastjson.serializer.SerializeFilter[] serializeFilterArray19 = new com.alibaba.fastjson.serializer.SerializeFilter[] {};
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature20 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature21 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature22 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature23 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature24 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature[] serializerFeatureArray25 = new com.alibaba.fastjson.serializer.SerializerFeature[] { serializerFeature20, serializerFeature21, serializerFeature22, serializerFeature23, serializerFeature24 };
        byte[] byteArray26 = com.alibaba.fastjson.JSON.toJSONBytes((java.lang.Object) "hi!", serializeFilterArray19, serializerFeatureArray25);
        java.lang.String str27 = com.alibaba.fastjson.JSON.toJSONStringWithDateFormat((java.lang.Object) jSONObject13, "null", serializerFeatureArray25);
        byte[] byteArray28 = com.alibaba.fastjson.JSON.toJSONBytes(obj10, serializeFilter11, serializerFeatureArray25);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str29 = com.alibaba.fastjson.JSON.toJSONString((java.lang.Object) defaultJSONParser1, (int) (byte) 1, serializerFeatureArray25);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson.JSONException; message: write javaBean error, fastjson version 1.2.76, class com.alibaba.fastjson.parser.DefaultJSONParser, method : getDateFormat");
        } catch (com.alibaba.fastjson.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(symbolTable2);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(strEntrySet16);
        org.junit.Assert.assertNotNull(serializeFilterArray19);
        org.junit.Assert.assertTrue("'" + serializerFeature20 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature20.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature21 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature21.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature22 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature22.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + serializerFeature23 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature23.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature24 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature24.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertNotNull(serializerFeatureArray25);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[39, 104, 105, 33, 39]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "{}" + "'", str27, "{}");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[110, 117, 108, 108]");
    }

    @Test
    public void test212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test212");
        java.io.Writer writer0 = null;
        com.alibaba.fastjson.serializer.SerializeWriter serializeWriter2 = new com.alibaba.fastjson.serializer.SerializeWriter(writer0, 10);
        serializeWriter2.write((int) (byte) -1);
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature7 = com.alibaba.fastjson.serializer.SerializerFeature.WriteMapNullValue;
        serializeWriter2.writeFieldValue(' ', "must >", (java.lang.Enum<com.alibaba.fastjson.serializer.SerializerFeature>) serializerFeature7);
        serializeWriter2.write((-1));
        serializeWriter2.writeFieldValueStringWithDoubleQuoteCheck('#', "'WriteMapNullValue'", "-9223372036854775808");
        org.junit.Assert.assertTrue("'" + serializerFeature7 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteMapNullValue + "'", serializerFeature7.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteMapNullValue));
    }

    @Test
    public void test213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test213");
        java.io.Writer writer0 = null;
        com.alibaba.fastjson.serializer.SerializeWriter serializeWriter2 = new com.alibaba.fastjson.serializer.SerializeWriter(writer0, 10);
        serializeWriter2.writeStringWithDoubleQuote("'WriteTabAsSpecial'", '4');
        serializeWriter2.writeFieldValue('4', "Negative initial size:", 'a');
        byte[] byteArray16 = new byte[] { (byte) 10, (byte) -1, (byte) 100, (byte) 10, (byte) 10, (byte) 1 };
        java.lang.reflect.Type type17 = null;
        com.alibaba.fastjson.parser.Feature feature18 = null;
        com.alibaba.fastjson.parser.Feature[] featureArray19 = new com.alibaba.fastjson.parser.Feature[] { feature18 };
        java.lang.Comparable<java.lang.String> strComparable20 = com.alibaba.fastjson.JSON.parseObject(byteArray16, type17, featureArray19);
        serializeWriter2.writeByteArray(byteArray16);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[10, -1, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(featureArray19);
        org.junit.Assert.assertNull(strComparable20);
    }

    @Test
    public void test214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test214");
        com.alibaba.fastjson.parser.DefaultJSONParser defaultJSONParser1 = new com.alibaba.fastjson.parser.DefaultJSONParser(":true");
        com.alibaba.fastjson.parser.SymbolTable symbolTable2 = defaultJSONParser1.getSymbolTable();
        com.alibaba.fastjson.serializer.SerializeFilter serializeFilter3 = null;
        java.io.Writer writer4 = null;
        com.alibaba.fastjson.serializer.SerializeWriter serializeWriter6 = new com.alibaba.fastjson.serializer.SerializeWriter(writer4, 10);
        serializeWriter6.write((int) (byte) -1);
        java.lang.String[] strArray39 = new java.lang.String[] { ":true", "1.2.76", "serialize exceeded MAX_OUTPUT_LENGTH=", "-2147483648", ", minimumCapacity=", "\"-9223372036854775808\"", "@type", "\"\"", "null:", "null:", "1.2.76", "Negative initial size:", ":true", "-9223372036854775808", "fastjson.serializer_buffer_threshold", "fastjson.compatibleWithFieldName", "'WriteMapNullValue'", "1.2.76", "UTF-8", "fastjson.compatibleWithJavaBean", "1.2.76", "Negative initial size:", "1.2.76", "\"-9223372036854775808\"", "''", "@type", "fastjson.serializer_buffer_threshold", "0.0", "1.2.76", ":false" };
        java.util.ArrayList<java.lang.String> strList40 = new java.util.ArrayList<java.lang.String>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList40, strArray39);
        serializeWriter6.write((java.util.List<java.lang.String>) strList40);
        serializeWriter6.writeLongAndChar((long) 'a', '#');
        com.alibaba.fastjson.serializer.SerializeFilter[] serializeFilterArray50 = new com.alibaba.fastjson.serializer.SerializeFilter[] {};
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature51 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature52 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature53 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature54 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature55 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature[] serializerFeatureArray56 = new com.alibaba.fastjson.serializer.SerializerFeature[] { serializerFeature51, serializerFeature52, serializerFeature53, serializerFeature54, serializerFeature55 };
        byte[] byteArray57 = com.alibaba.fastjson.JSON.toJSONBytes((java.lang.Object) "hi!", serializeFilterArray50, serializerFeatureArray56);
        java.lang.String str58 = com.alibaba.fastjson.JSON.toJSONStringWithDateFormat((java.lang.Object) "Negative initial size:", ", minimumCapacity=", serializerFeatureArray56);
        com.alibaba.fastjson.serializer.SerializeWriter serializeWriter59 = new com.alibaba.fastjson.serializer.SerializeWriter((java.io.Writer) serializeWriter6, (int) (short) 10, serializerFeatureArray56);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str60 = com.alibaba.fastjson.JSON.toJSONString((java.lang.Object) defaultJSONParser1, serializeFilter3, serializerFeatureArray56);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson.JSONException; message: write javaBean error, fastjson version 1.2.76, class com.alibaba.fastjson.parser.DefaultJSONParser, method : getDateFormat");
        } catch (com.alibaba.fastjson.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(symbolTable2);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(serializeFilterArray50);
        org.junit.Assert.assertTrue("'" + serializerFeature51 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature51.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature52 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature52.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature53 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature53.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + serializerFeature54 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature54.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature55 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature55.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertNotNull(serializerFeatureArray56);
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[39, 104, 105, 33, 39]");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "'Negative initial size:'" + "'", str58, "'Negative initial size:'");
    }

    @Test
    public void test215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test215");
        com.alibaba.fastjson.serializer.SerializerFeature[] serializerFeatureArray1 = new com.alibaba.fastjson.serializer.SerializerFeature[] {};
        byte[] byteArray2 = com.alibaba.fastjson.JSON.toJSONBytes((java.lang.Object) 10.0d, serializerFeatureArray1);
        com.alibaba.fastjson.JSONObject jSONObject4 = new com.alibaba.fastjson.JSONObject(0);
        boolean boolean6 = jSONObject4.equals((java.lang.Object) (byte) 10);
        java.util.Set<java.util.Map.Entry<java.lang.String, java.lang.Object>> strEntrySet7 = jSONObject4.entrySet();
        short short9 = jSONObject4.getShortValue("UTF-8");
        java.lang.String str11 = jSONObject4.getString("null:");
        java.lang.Class<?> wildcardClass12 = jSONObject4.getClass();
        com.alibaba.fastjson.serializer.SerializeFilter[] serializeFilterArray14 = new com.alibaba.fastjson.serializer.SerializeFilter[] {};
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature15 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature16 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature17 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature18 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature19 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature[] serializerFeatureArray20 = new com.alibaba.fastjson.serializer.SerializerFeature[] { serializerFeature15, serializerFeature16, serializerFeature17, serializerFeature18, serializerFeature19 };
        byte[] byteArray21 = com.alibaba.fastjson.JSON.toJSONBytes((java.lang.Object) "hi!", serializeFilterArray14, serializerFeatureArray20);
        java.nio.charset.Charset charset24 = com.alibaba.fastjson.util.IOUtils.UTF8;
        java.lang.reflect.Type type25 = null;
        byte[] byteArray32 = new byte[] { (byte) 10, (byte) -1, (byte) 100, (byte) 10, (byte) 10, (byte) 1 };
        java.lang.reflect.Type type33 = null;
        com.alibaba.fastjson.parser.Feature feature34 = null;
        com.alibaba.fastjson.parser.Feature[] featureArray35 = new com.alibaba.fastjson.parser.Feature[] { feature34 };
        java.lang.Comparable<java.lang.String> strComparable36 = com.alibaba.fastjson.JSON.parseObject(byteArray32, type33, featureArray35);
        java.nio.charset.Charset charset37 = com.alibaba.fastjson.JSON.parseObject(byteArray21, 3089, (int) (short) -1, charset24, type25, featureArray35);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.AnnotatedElement annotatedElement38 = com.alibaba.fastjson.JSON.parseObject(byteArray2, (java.lang.reflect.Type) wildcardClass12, featureArray35);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(serializerFeatureArray1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[49, 48, 46, 48]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strEntrySet7);
        org.junit.Assert.assertTrue("'" + short9 + "' != '" + (short) 0 + "'", short9 == (short) 0);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(wildcardClass12);
        org.junit.Assert.assertNotNull(serializeFilterArray14);
        org.junit.Assert.assertTrue("'" + serializerFeature15 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature15.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature16 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature16.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature17 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature17.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + serializerFeature18 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature18.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature19 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature19.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertNotNull(serializerFeatureArray20);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[39, 104, 105, 33, 39]");
        org.junit.Assert.assertNotNull(charset24);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[10, -1, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(featureArray35);
        org.junit.Assert.assertNull(strComparable36);
        org.junit.Assert.assertNull(charset37);
    }

    @Test
    public void test216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test216");
        com.alibaba.fastjson.JSONObject jSONObject1 = new com.alibaba.fastjson.JSONObject(0);
        boolean boolean3 = jSONObject1.equals((java.lang.Object) (byte) 10);
        java.lang.Float float5 = jSONObject1.getFloat("UTF-8");
        com.alibaba.fastjson.JSONObject jSONObject6 = new com.alibaba.fastjson.JSONObject((java.util.Map<java.lang.String, java.lang.Object>) jSONObject1);
        java.lang.Double double8 = jSONObject6.getDouble("writer not null");
        java.lang.Long long10 = jSONObject6.getLong("false");
        java.lang.Object obj11 = null;
        com.alibaba.fastjson.serializer.SerializeFilter serializeFilter12 = null;
        com.alibaba.fastjson.JSONObject jSONObject14 = new com.alibaba.fastjson.JSONObject(0);
        boolean boolean16 = jSONObject14.equals((java.lang.Object) (byte) 10);
        java.util.Set<java.util.Map.Entry<java.lang.String, java.lang.Object>> strEntrySet17 = jSONObject14.entrySet();
        com.alibaba.fastjson.serializer.SerializeFilter[] serializeFilterArray20 = new com.alibaba.fastjson.serializer.SerializeFilter[] {};
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature21 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature22 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature23 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature24 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature25 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature[] serializerFeatureArray26 = new com.alibaba.fastjson.serializer.SerializerFeature[] { serializerFeature21, serializerFeature22, serializerFeature23, serializerFeature24, serializerFeature25 };
        byte[] byteArray27 = com.alibaba.fastjson.JSON.toJSONBytes((java.lang.Object) "hi!", serializeFilterArray20, serializerFeatureArray26);
        java.lang.String str28 = com.alibaba.fastjson.JSON.toJSONStringWithDateFormat((java.lang.Object) jSONObject14, "null", serializerFeatureArray26);
        byte[] byteArray29 = com.alibaba.fastjson.JSON.toJSONBytes(obj11, serializeFilter12, serializerFeatureArray26);
        byte[] byteArray30 = com.alibaba.fastjson.JSON.toJSONBytes((java.lang.Object) jSONObject6, serializerFeatureArray26);
        java.nio.charset.CharsetDecoder charsetDecoder33 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj35 = com.alibaba.fastjson.JSON.parse(byteArray30, 2, 2, charsetDecoder33, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(float5);
        org.junit.Assert.assertNull(double8);
        org.junit.Assert.assertNull(long10);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strEntrySet17);
        org.junit.Assert.assertNotNull(serializeFilterArray20);
        org.junit.Assert.assertTrue("'" + serializerFeature21 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature21.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature22 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature22.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature23 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature23.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + serializerFeature24 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature24.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature25 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature25.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertNotNull(serializerFeatureArray26);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[39, 104, 105, 33, 39]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "{}" + "'", str28, "{}");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[110, 117, 108, 108]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[123, 125]");
    }

    @Test
    public void test217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test217");
        com.alibaba.fastjson.JSONObject jSONObject1 = new com.alibaba.fastjson.JSONObject(0);
        boolean boolean3 = jSONObject1.equals((java.lang.Object) (byte) 10);
        java.lang.Float float5 = jSONObject1.getFloat("UTF-8");
        com.alibaba.fastjson.JSONObject jSONObject6 = new com.alibaba.fastjson.JSONObject((java.util.Map<java.lang.String, java.lang.Object>) jSONObject1);
        java.sql.Date date8 = jSONObject6.getSqlDate("0.0");
        short short10 = jSONObject6.getShortValue("1.2.76");
        com.alibaba.fastjson.JSONObject jSONObject12 = new com.alibaba.fastjson.JSONObject(0);
        boolean boolean14 = jSONObject12.equals((java.lang.Object) (byte) 10);
        java.lang.Integer int16 = jSONObject12.getInteger("hi!");
        boolean boolean18 = jSONObject12.getBooleanValue(":false");
        jSONObject6.putAll((java.util.Map<java.lang.String, java.lang.Object>) jSONObject12);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(float5);
        org.junit.Assert.assertNull(date8);
        org.junit.Assert.assertTrue("'" + short10 + "' != '" + (short) 0 + "'", short10 == (short) 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(int16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test218");
        java.io.Writer writer0 = null;
        com.alibaba.fastjson.serializer.SerializeWriter serializeWriter2 = new com.alibaba.fastjson.serializer.SerializeWriter(writer0, 10);
        serializeWriter2.write((int) (byte) -1);
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature7 = com.alibaba.fastjson.serializer.SerializerFeature.WriteMapNullValue;
        serializeWriter2.writeFieldValue(' ', "must >", (java.lang.Enum<com.alibaba.fastjson.serializer.SerializerFeature>) serializerFeature7);
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature9 = com.alibaba.fastjson.serializer.SerializerFeature.SortField;
        boolean boolean10 = serializeWriter2.isEnabled(serializerFeature9);
        serializeWriter2.writeFieldValue('a', "@type", 0.0f);
        org.junit.Assert.assertTrue("'" + serializerFeature7 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteMapNullValue + "'", serializerFeature7.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteMapNullValue));
        org.junit.Assert.assertTrue("'" + serializerFeature9 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.SortField + "'", serializerFeature9.equals(com.alibaba.fastjson.serializer.SerializerFeature.SortField));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test219");
        com.alibaba.fastjson.parser.ParserConfig parserConfig1 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.alibaba.fastjson.parser.DefaultJSONParser defaultJSONParser3 = new com.alibaba.fastjson.parser.DefaultJSONParser("'bnVsb\004=='", parserConfig1, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test220");
        java.io.Writer writer0 = null;
        com.alibaba.fastjson.serializer.SerializeWriter serializeWriter2 = new com.alibaba.fastjson.serializer.SerializeWriter(writer0, 10);
        byte[] byteArray3 = com.alibaba.fastjson.util.IOUtils.specicalFlags_singleQuotes;
        char[] charArray8 = com.alibaba.fastjson.util.IOUtils.CA;
        com.alibaba.fastjson.util.IOUtils.getChars((long) 0, (int) ' ', charArray8);
        int int10 = com.alibaba.fastjson.util.IOUtils.decodeUTF8(byteArray3, 100, (int) (short) 10, charArray8);
        serializeWriter2.write(charArray8, (int) '#', 1);
        int int14 = serializeWriter2.getBufferLength();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[4, 4, 4, 4, 4, 4, 4, 4, 1, 1, 1, 4, 1, 1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0]");
        org.junit.Assert.assertNotNull(charArray8);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray8), "\000\000\000\000\000\000\000\000\000\000KLMNOPQRSTUVWXYZabcde0ghijklmnopqrstuvwxyz0123456789+/");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray8), "\000\000\000\000\000\000\000\000\000\000KLMNOPQRSTUVWXYZabcde0ghijklmnopqrstuvwxyz0123456789+/");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray8), "[\000, \000, \000, \000, \000, \000, \000, \000, \000, \000, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z, a, b, c, d, e, 0, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, +, /]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10 + "'", int10 == 10);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10 + "'", int14 == 10);
    }

    @Test
    public void test221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test221");
        com.alibaba.fastjson.parser.DefaultJSONParser defaultJSONParser1 = new com.alibaba.fastjson.parser.DefaultJSONParser(":true");
        com.alibaba.fastjson.parser.SymbolTable symbolTable2 = defaultJSONParser1.getSymbolTable();
        com.alibaba.fastjson.parser.ParserConfig parserConfig3 = null;
        defaultJSONParser1.setConfig(parserConfig3);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj5 = defaultJSONParser1.parse();
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson.JSONException; message: syntax error, pos 1, line 1, column 2:true");
        } catch (com.alibaba.fastjson.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(symbolTable2);
    }

    @Test
    public void test222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test222");
        com.alibaba.fastjson.JSONObject jSONObject1 = new com.alibaba.fastjson.JSONObject(0);
        boolean boolean3 = jSONObject1.equals((java.lang.Object) (byte) 10);
        java.lang.Float float5 = jSONObject1.getFloat("UTF-8");
        jSONObject1.clear();
        com.alibaba.fastjson.TypeReference typeReference7 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass8 = jSONObject1.toJavaObject(typeReference7);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson.JSONException; message: can not cast to : null");
        } catch (com.alibaba.fastjson.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(float5);
    }

    @Test
    public void test223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test223");
        com.alibaba.fastjson.parser.DefaultJSONParser defaultJSONParser1 = new com.alibaba.fastjson.parser.DefaultJSONParser(":true");
        com.alibaba.fastjson.parser.SymbolTable symbolTable2 = defaultJSONParser1.symbolTable;
        com.alibaba.fastjson.parser.DefaultJSONParser defaultJSONParser4 = new com.alibaba.fastjson.parser.DefaultJSONParser(":true");
        com.alibaba.fastjson.parser.deserializer.FieldTypeResolver fieldTypeResolver5 = defaultJSONParser4.getFieldTypeResolver();
        java.lang.Object obj6 = defaultJSONParser4.input;
        com.alibaba.fastjson.JSON.handleResovleTask(defaultJSONParser1, defaultJSONParser4);
        com.alibaba.fastjson.parser.Feature feature8 = null;
        // The following exception was thrown during execution in test generation
        try {
            defaultJSONParser1.config(feature8, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(symbolTable2);
        org.junit.Assert.assertNull(fieldTypeResolver5);
        org.junit.Assert.assertEquals("'" + obj6 + "' != '" + ":true" + "'", obj6, ":true");
    }

    @Test
    public void test224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test224");
        com.alibaba.fastjson.parser.DefaultJSONParser defaultJSONParser1 = new com.alibaba.fastjson.parser.DefaultJSONParser(":true");
        com.alibaba.fastjson.parser.SymbolTable symbolTable2 = defaultJSONParser1.symbolTable;
        java.lang.String str3 = defaultJSONParser1.getDateFomartPattern();
        com.alibaba.fastjson.parser.ParseContext parseContext4 = null;
        com.alibaba.fastjson.parser.DefaultJSONParser.ResolveTask resolveTask6 = new com.alibaba.fastjson.parser.DefaultJSONParser.ResolveTask(parseContext4, "null");
        com.alibaba.fastjson.parser.ParseContext parseContext7 = resolveTask6.context;
        defaultJSONParser1.addResolveTask(resolveTask6);
        // The following exception was thrown during execution in test generation
        try {
            defaultJSONParser1.accept(1);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson.JSONException; message: syntax error, expect error, actual :");
        } catch (com.alibaba.fastjson.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(symbolTable2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Negative initial size:" + "'", str3, "Negative initial size:");
        org.junit.Assert.assertNull(parseContext7);
    }

    @Test
    public void test225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test225");
        char[] charArray3 = new char[] { '#' };
        // The following exception was thrown during execution in test generation
        try {
            com.alibaba.fastjson.util.IOUtils.getChars((long) 52, (int) '#', charArray3);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 34");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray3), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray3), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray3), "[#]");
    }

    @Test
    public void test226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test226");
        com.alibaba.fastjson.JSONObject jSONObject2 = new com.alibaba.fastjson.JSONObject(0);
        boolean boolean4 = jSONObject2.equals((java.lang.Object) (byte) 10);
        java.util.Set<java.util.Map.Entry<java.lang.String, java.lang.Object>> strEntrySet5 = jSONObject2.entrySet();
        short short7 = jSONObject2.getShortValue("UTF-8");
        java.lang.String str9 = jSONObject2.getString("null:");
        java.lang.Class<?> wildcardClass10 = jSONObject2.getClass();
        com.alibaba.fastjson.JSONObject jSONObject12 = new com.alibaba.fastjson.JSONObject(0);
        boolean boolean14 = jSONObject12.equals((java.lang.Object) (byte) 10);
        java.util.Set<java.util.Map.Entry<java.lang.String, java.lang.Object>> strEntrySet15 = jSONObject12.entrySet();
        short short17 = jSONObject12.getShortValue("UTF-8");
        java.lang.String str19 = jSONObject12.getString("null:");
        java.lang.Class<?> wildcardClass20 = jSONObject12.getClass();
        char[] charArray24 = new char[] { '#', '#', ' ' };
        byte[] byteArray27 = com.alibaba.fastjson.util.IOUtils.decodeBase64(charArray24, 10, (int) (byte) 0);
        com.alibaba.fastjson.serializer.SerializeFilter[] serializeFilterArray29 = new com.alibaba.fastjson.serializer.SerializeFilter[] {};
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature30 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature31 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature32 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature33 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature34 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature[] serializerFeatureArray35 = new com.alibaba.fastjson.serializer.SerializerFeature[] { serializerFeature30, serializerFeature31, serializerFeature32, serializerFeature33, serializerFeature34 };
        byte[] byteArray36 = com.alibaba.fastjson.JSON.toJSONBytes((java.lang.Object) "hi!", serializeFilterArray29, serializerFeatureArray35);
        java.nio.charset.Charset charset39 = com.alibaba.fastjson.util.IOUtils.UTF8;
        java.lang.reflect.Type type40 = null;
        byte[] byteArray47 = new byte[] { (byte) 10, (byte) -1, (byte) 100, (byte) 10, (byte) 10, (byte) 1 };
        java.lang.reflect.Type type48 = null;
        com.alibaba.fastjson.parser.Feature feature49 = null;
        com.alibaba.fastjson.parser.Feature[] featureArray50 = new com.alibaba.fastjson.parser.Feature[] { feature49 };
        java.lang.Comparable<java.lang.String> strComparable51 = com.alibaba.fastjson.JSON.parseObject(byteArray47, type48, featureArray50);
        java.nio.charset.Charset charset52 = com.alibaba.fastjson.JSON.parseObject(byteArray36, 3089, (int) (short) -1, charset39, type40, featureArray50);
        com.alibaba.fastjson.JSONObject jSONObject54 = new com.alibaba.fastjson.JSONObject(0);
        boolean boolean56 = jSONObject54.equals((java.lang.Object) (byte) 10);
        java.util.Set<java.util.Map.Entry<java.lang.String, java.lang.Object>> strEntrySet57 = jSONObject54.entrySet();
        short short59 = jSONObject54.getShortValue("UTF-8");
        java.lang.String str61 = jSONObject54.getString("null:");
        java.lang.Class<?> wildcardClass62 = jSONObject54.getClass();
        com.alibaba.fastjson.parser.ParserConfig parserConfig63 = null;
        com.alibaba.fastjson.parser.deserializer.ParseProcess parseProcess64 = null;
        com.alibaba.fastjson.parser.Feature[] featureArray66 = new com.alibaba.fastjson.parser.Feature[] {};
        java.text.DateFormat dateFormat67 = com.alibaba.fastjson.JSON.parseObject(byteArray27, charset52, (java.lang.reflect.Type) wildcardClass62, parserConfig63, parseProcess64, (int) '4', featureArray66);
        java.lang.reflect.Type[] typeArray68 = new java.lang.reflect.Type[] { wildcardClass10, wildcardClass20, wildcardClass62 };
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.Object> objList69 = com.alibaba.fastjson.JSON.parseArray("com.alibaba.fastjson.JSONException: hi!", typeArray68);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson.JSONException; message: syntax error : error");
        } catch (com.alibaba.fastjson.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(strEntrySet5);
        org.junit.Assert.assertTrue("'" + short7 + "' != '" + (short) 0 + "'", short7 == (short) 0);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(strEntrySet15);
        org.junit.Assert.assertTrue("'" + short17 + "' != '" + (short) 0 + "'", short17 == (short) 0);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertNotNull(charArray24);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray24), "## ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray24), "## ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray24), "[#, #,  ]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertNotNull(serializeFilterArray29);
        org.junit.Assert.assertTrue("'" + serializerFeature30 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature30.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature31 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature31.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature32 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature32.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + serializerFeature33 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature33.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature34 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature34.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertNotNull(serializerFeatureArray35);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[39, 104, 105, 33, 39]");
        org.junit.Assert.assertNotNull(charset39);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[10, -1, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(featureArray50);
        org.junit.Assert.assertNull(strComparable51);
        org.junit.Assert.assertNull(charset52);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(strEntrySet57);
        org.junit.Assert.assertTrue("'" + short59 + "' != '" + (short) 0 + "'", short59 == (short) 0);
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertNotNull(wildcardClass62);
        org.junit.Assert.assertNotNull(featureArray66);
        org.junit.Assert.assertNull(dateFormat67);
        org.junit.Assert.assertNotNull(typeArray68);
    }

    @Test
    public void test227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test227");
        java.io.Writer writer0 = null;
        com.alibaba.fastjson.serializer.SerializeWriter serializeWriter2 = new com.alibaba.fastjson.serializer.SerializeWriter(writer0, 10);
        serializeWriter2.writeStringWithDoubleQuote("'WriteTabAsSpecial'", '4');
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature6 = com.alibaba.fastjson.serializer.SerializerFeature.WriteTabAsSpecial;
        com.alibaba.fastjson.serializer.SerializeFilter[] serializeFilterArray8 = new com.alibaba.fastjson.serializer.SerializeFilter[] {};
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature9 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature10 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature11 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature12 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature13 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature[] serializerFeatureArray14 = new com.alibaba.fastjson.serializer.SerializerFeature[] { serializerFeature9, serializerFeature10, serializerFeature11, serializerFeature12, serializerFeature13 };
        byte[] byteArray15 = com.alibaba.fastjson.JSON.toJSONBytes((java.lang.Object) "hi!", serializeFilterArray8, serializerFeatureArray14);
        com.alibaba.fastjson.serializer.SerializeFilter[] serializeFilterArray17 = new com.alibaba.fastjson.serializer.SerializeFilter[] {};
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature18 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature19 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature20 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature21 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature22 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature[] serializerFeatureArray23 = new com.alibaba.fastjson.serializer.SerializerFeature[] { serializerFeature18, serializerFeature19, serializerFeature20, serializerFeature21, serializerFeature22 };
        byte[] byteArray24 = com.alibaba.fastjson.JSON.toJSONBytes((java.lang.Object) "hi!", serializeFilterArray17, serializerFeatureArray23);
        java.lang.String str25 = com.alibaba.fastjson.JSON.toJSONString((java.lang.Object) serializerFeature6, serializeFilterArray8, serializerFeatureArray23);
        com.alibaba.fastjson.serializer.SerializeWriter serializeWriter26 = new com.alibaba.fastjson.serializer.SerializeWriter((java.io.Writer) serializeWriter2, serializerFeatureArray23);
        serializeWriter26.writeFloat((float) (byte) 0, false);
        serializeWriter26.flush();
        org.junit.Assert.assertTrue("'" + serializerFeature6 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteTabAsSpecial + "'", serializerFeature6.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteTabAsSpecial));
        org.junit.Assert.assertNotNull(serializeFilterArray8);
        org.junit.Assert.assertTrue("'" + serializerFeature9 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature9.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature10 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature10.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature11 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature11.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + serializerFeature12 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature12.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature13 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature13.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertNotNull(serializerFeatureArray14);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[39, 104, 105, 33, 39]");
        org.junit.Assert.assertNotNull(serializeFilterArray17);
        org.junit.Assert.assertTrue("'" + serializerFeature18 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature18.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature19 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature19.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature20 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature20.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + serializerFeature21 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature21.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature22 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature22.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertNotNull(serializerFeatureArray23);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[39, 104, 105, 33, 39]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "'WriteTabAsSpecial'" + "'", str25, "'WriteTabAsSpecial'");
    }

    @Test
    public void test228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test228");
        com.alibaba.fastjson.JSONObject jSONObject1 = new com.alibaba.fastjson.JSONObject(0);
        boolean boolean3 = jSONObject1.equals((java.lang.Object) (byte) 10);
        java.lang.Float float5 = jSONObject1.getFloat("UTF-8");
        com.alibaba.fastjson.JSONObject jSONObject6 = new com.alibaba.fastjson.JSONObject((java.util.Map<java.lang.String, java.lang.Object>) jSONObject1);
        java.lang.Double double8 = jSONObject6.getDouble("writer not null");
        java.lang.Long long10 = jSONObject6.getLong("false");
        com.alibaba.fastjson.JSONObject jSONObject11 = jSONObject6.clone();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(float5);
        org.junit.Assert.assertNull(double8);
        org.junit.Assert.assertNull(long10);
        org.junit.Assert.assertNotNull(jSONObject11);
    }

    @Test
    public void test229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test229");
        java.io.Writer writer0 = null;
        com.alibaba.fastjson.serializer.SerializeWriter serializeWriter2 = new com.alibaba.fastjson.serializer.SerializeWriter(writer0, 10);
        serializeWriter2.write((int) (byte) -1);
        int int5 = serializeWriter2.getBufferLength();
        serializeWriter2.writeFieldValue('a', "-9223372036854775808", (int) (byte) 10);
        serializeWriter2.writeLong((long) 'a');
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 10 + "'", int5 == 10);
    }

    @Test
    public void test230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test230");
        com.alibaba.fastjson.parser.DefaultJSONParser defaultJSONParser1 = new com.alibaba.fastjson.parser.DefaultJSONParser(":true");
        com.alibaba.fastjson.parser.SymbolTable symbolTable2 = defaultJSONParser1.getSymbolTable();
        com.alibaba.fastjson.parser.ParserConfig parserConfig3 = null;
        defaultJSONParser1.setConfig(parserConfig3);
        defaultJSONParser1.setDateFormat(":true");
        com.alibaba.fastjson.JSONObject jSONObject8 = new com.alibaba.fastjson.JSONObject(0);
        boolean boolean10 = jSONObject8.equals((java.lang.Object) (byte) 10);
        java.lang.Float float12 = jSONObject8.getFloat("UTF-8");
        com.alibaba.fastjson.JSONObject jSONObject13 = new com.alibaba.fastjson.JSONObject((java.util.Map<java.lang.String, java.lang.Object>) jSONObject8);
        java.lang.Double double15 = jSONObject8.getDouble("\"\"");
        java.sql.Timestamp timestamp17 = jSONObject8.getTimestamp("Negative initial size:");
        java.util.Set<java.lang.String> strSet18 = jSONObject8.keySet();
        java.lang.Byte byte20 = jSONObject8.getByte("");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj21 = defaultJSONParser1.parseObject((java.util.Map) jSONObject8);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson.JSONException; message: syntax error, expect {, actual :, pos 1, line 1, column 2:true");
        } catch (com.alibaba.fastjson.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(symbolTable2);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(float12);
        org.junit.Assert.assertNull(double15);
        org.junit.Assert.assertNull(timestamp17);
        org.junit.Assert.assertNotNull(strSet18);
        org.junit.Assert.assertNull(byte20);
    }

    @Test
    public void test231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test231");
        com.alibaba.fastjson.parser.DefaultJSONParser defaultJSONParser1 = new com.alibaba.fastjson.parser.DefaultJSONParser(":true");
        com.alibaba.fastjson.parser.SymbolTable symbolTable2 = defaultJSONParser1.symbolTable;
        java.lang.String str3 = defaultJSONParser1.getDateFomartPattern();
        defaultJSONParser1.setResolveStatus(2);
        org.junit.Assert.assertNotNull(symbolTable2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Negative initial size:" + "'", str3, "Negative initial size:");
    }

    @Test
    public void test232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test232");
        java.io.Writer writer0 = null;
        com.alibaba.fastjson.serializer.SerializeWriter serializeWriter2 = new com.alibaba.fastjson.serializer.SerializeWriter(writer0, 10);
        serializeWriter2.write((int) (byte) -1);
        java.lang.String[] strArray35 = new java.lang.String[] { ":true", "1.2.76", "serialize exceeded MAX_OUTPUT_LENGTH=", "-2147483648", ", minimumCapacity=", "\"-9223372036854775808\"", "@type", "\"\"", "null:", "null:", "1.2.76", "Negative initial size:", ":true", "-9223372036854775808", "fastjson.serializer_buffer_threshold", "fastjson.compatibleWithFieldName", "'WriteMapNullValue'", "1.2.76", "UTF-8", "fastjson.compatibleWithJavaBean", "1.2.76", "Negative initial size:", "1.2.76", "\"-9223372036854775808\"", "''", "@type", "fastjson.serializer_buffer_threshold", "0.0", "1.2.76", ":false" };
        java.util.ArrayList<java.lang.String> strList36 = new java.util.ArrayList<java.lang.String>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList36, strArray35);
        serializeWriter2.write((java.util.List<java.lang.String>) strList36);
        serializeWriter2.writeLongAndChar((long) 'a', '#');
        com.alibaba.fastjson.serializer.SerializeFilter[] serializeFilterArray46 = new com.alibaba.fastjson.serializer.SerializeFilter[] {};
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature47 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature48 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature49 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature50 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature51 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature[] serializerFeatureArray52 = new com.alibaba.fastjson.serializer.SerializerFeature[] { serializerFeature47, serializerFeature48, serializerFeature49, serializerFeature50, serializerFeature51 };
        byte[] byteArray53 = com.alibaba.fastjson.JSON.toJSONBytes((java.lang.Object) "hi!", serializeFilterArray46, serializerFeatureArray52);
        java.lang.String str54 = com.alibaba.fastjson.JSON.toJSONStringWithDateFormat((java.lang.Object) "Negative initial size:", ", minimumCapacity=", serializerFeatureArray52);
        com.alibaba.fastjson.serializer.SerializeWriter serializeWriter55 = new com.alibaba.fastjson.serializer.SerializeWriter((java.io.Writer) serializeWriter2, (int) (short) 10, serializerFeatureArray52);
        serializeWriter55.write(":true");
        serializeWriter55.writeFieldValue('a', "'bnVsb\004=='", '#');
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(serializeFilterArray46);
        org.junit.Assert.assertTrue("'" + serializerFeature47 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature47.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature48 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature48.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature49 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature49.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + serializerFeature50 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature50.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature51 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature51.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertNotNull(serializerFeatureArray52);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[39, 104, 105, 33, 39]");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "'Negative initial size:'" + "'", str54, "'Negative initial size:'");
    }

    @Test
    public void test233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test233");
        com.alibaba.fastjson.JSONObject jSONObject1 = new com.alibaba.fastjson.JSONObject(0);
        boolean boolean3 = jSONObject1.equals((java.lang.Object) (byte) 10);
        java.lang.Float float5 = jSONObject1.getFloat("UTF-8");
        com.alibaba.fastjson.JSONObject jSONObject6 = new com.alibaba.fastjson.JSONObject((java.util.Map<java.lang.String, java.lang.Object>) jSONObject1);
        java.lang.Double double8 = jSONObject1.getDouble("\"\"");
        java.sql.Timestamp timestamp10 = jSONObject1.getTimestamp("Negative initial size:");
        java.util.Set<java.lang.String> strSet11 = jSONObject1.keySet();
        java.lang.Double double13 = jSONObject1.getDouble(":false");
        com.alibaba.fastjson.JSONObject jSONObject16 = new com.alibaba.fastjson.JSONObject(0);
        boolean boolean18 = jSONObject16.equals((java.lang.Object) (byte) 10);
        java.lang.Float float20 = jSONObject16.getFloat("UTF-8");
        com.alibaba.fastjson.parser.ParserConfig parserConfig21 = null;
        java.lang.Object obj22 = com.alibaba.fastjson.JSON.toJSON((java.lang.Object) jSONObject16, parserConfig21);
        com.alibaba.fastjson.JSONObject jSONObject24 = jSONObject16.fluentRemove((java.lang.Object) 1.0d);
        java.lang.Object obj25 = jSONObject1.putIfAbsent("fastjson.serializer_buffer_threshold", (java.lang.Object) jSONObject16);
        com.alibaba.fastjson.JSONObject jSONObject27 = new com.alibaba.fastjson.JSONObject(0);
        boolean boolean29 = jSONObject27.equals((java.lang.Object) (byte) 10);
        java.lang.Float float31 = jSONObject27.getFloat("UTF-8");
        com.alibaba.fastjson.JSONObject jSONObject32 = new com.alibaba.fastjson.JSONObject((java.util.Map<java.lang.String, java.lang.Object>) jSONObject27);
        java.lang.Double double34 = jSONObject27.getDouble("\"\"");
        java.sql.Timestamp timestamp36 = jSONObject27.getTimestamp("Negative initial size:");
        java.util.Set<java.lang.String> strSet37 = jSONObject27.keySet();
        java.lang.Object obj39 = jSONObject16.getOrDefault((java.lang.Object) jSONObject27, (java.lang.Object) (short) 0);
        int int41 = jSONObject27.getIntValue("null");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(float5);
        org.junit.Assert.assertNull(double8);
        org.junit.Assert.assertNull(timestamp10);
        org.junit.Assert.assertNotNull(strSet11);
        org.junit.Assert.assertNull(double13);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(float20);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertEquals(obj22.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj22), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj22), "{}");
        org.junit.Assert.assertNotNull(jSONObject24);
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(float31);
        org.junit.Assert.assertNull(double34);
        org.junit.Assert.assertNull(timestamp36);
        org.junit.Assert.assertNotNull(strSet37);
        org.junit.Assert.assertEquals("'" + obj39 + "' != '" + (short) 0 + "'", obj39, (short) 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
    }

    @Test
    public void test234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test234");
        com.alibaba.fastjson.JSONObject jSONObject2 = new com.alibaba.fastjson.JSONObject(0);
        boolean boolean4 = jSONObject2.equals((java.lang.Object) (byte) 10);
        java.util.Set<java.util.Map.Entry<java.lang.String, java.lang.Object>> strEntrySet5 = jSONObject2.entrySet();
        short short7 = jSONObject2.getShortValue("UTF-8");
        java.lang.String str9 = jSONObject2.getString("null:");
        java.lang.Class<?> wildcardClass10 = jSONObject2.getClass();
        com.alibaba.fastjson.parser.ParserConfig parserConfig11 = null;
        char[] charArray15 = new char[] { '#', '#', ' ' };
        byte[] byteArray18 = com.alibaba.fastjson.util.IOUtils.decodeBase64(charArray15, 10, (int) (byte) 0);
        com.alibaba.fastjson.serializer.SerializeFilter[] serializeFilterArray20 = new com.alibaba.fastjson.serializer.SerializeFilter[] {};
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature21 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature22 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature23 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature24 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature25 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature[] serializerFeatureArray26 = new com.alibaba.fastjson.serializer.SerializerFeature[] { serializerFeature21, serializerFeature22, serializerFeature23, serializerFeature24, serializerFeature25 };
        byte[] byteArray27 = com.alibaba.fastjson.JSON.toJSONBytes((java.lang.Object) "hi!", serializeFilterArray20, serializerFeatureArray26);
        java.nio.charset.Charset charset30 = com.alibaba.fastjson.util.IOUtils.UTF8;
        java.lang.reflect.Type type31 = null;
        byte[] byteArray38 = new byte[] { (byte) 10, (byte) -1, (byte) 100, (byte) 10, (byte) 10, (byte) 1 };
        java.lang.reflect.Type type39 = null;
        com.alibaba.fastjson.parser.Feature feature40 = null;
        com.alibaba.fastjson.parser.Feature[] featureArray41 = new com.alibaba.fastjson.parser.Feature[] { feature40 };
        java.lang.Comparable<java.lang.String> strComparable42 = com.alibaba.fastjson.JSON.parseObject(byteArray38, type39, featureArray41);
        java.nio.charset.Charset charset43 = com.alibaba.fastjson.JSON.parseObject(byteArray27, 3089, (int) (short) -1, charset30, type31, featureArray41);
        com.alibaba.fastjson.JSONObject jSONObject45 = new com.alibaba.fastjson.JSONObject(0);
        boolean boolean47 = jSONObject45.equals((java.lang.Object) (byte) 10);
        java.util.Set<java.util.Map.Entry<java.lang.String, java.lang.Object>> strEntrySet48 = jSONObject45.entrySet();
        short short50 = jSONObject45.getShortValue("UTF-8");
        java.lang.String str52 = jSONObject45.getString("null:");
        java.lang.Class<?> wildcardClass53 = jSONObject45.getClass();
        com.alibaba.fastjson.parser.ParserConfig parserConfig54 = null;
        com.alibaba.fastjson.parser.deserializer.ParseProcess parseProcess55 = null;
        com.alibaba.fastjson.parser.Feature[] featureArray57 = new com.alibaba.fastjson.parser.Feature[] {};
        java.text.DateFormat dateFormat58 = com.alibaba.fastjson.JSON.parseObject(byteArray18, charset43, (java.lang.reflect.Type) wildcardClass53, parserConfig54, parseProcess55, (int) '4', featureArray57);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Iterable<java.lang.Object> objIterable59 = com.alibaba.fastjson.JSON.parseObject("writer not null", (java.lang.reflect.Type) wildcardClass10, parserConfig11, featureArray57);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(strEntrySet5);
        org.junit.Assert.assertTrue("'" + short7 + "' != '" + (short) 0 + "'", short7 == (short) 0);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(charArray15);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray15), "## ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray15), "## ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray15), "[#, #,  ]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertNotNull(serializeFilterArray20);
        org.junit.Assert.assertTrue("'" + serializerFeature21 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature21.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature22 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature22.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature23 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature23.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + serializerFeature24 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature24.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature25 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature25.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertNotNull(serializerFeatureArray26);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[39, 104, 105, 33, 39]");
        org.junit.Assert.assertNotNull(charset30);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[10, -1, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(featureArray41);
        org.junit.Assert.assertNull(strComparable42);
        org.junit.Assert.assertNull(charset43);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(strEntrySet48);
        org.junit.Assert.assertTrue("'" + short50 + "' != '" + (short) 0 + "'", short50 == (short) 0);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(wildcardClass53);
        org.junit.Assert.assertNotNull(featureArray57);
        org.junit.Assert.assertNull(dateFormat58);
    }

    @Test
    public void test235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test235");
        com.alibaba.fastjson.JSONObject jSONObject1 = new com.alibaba.fastjson.JSONObject(0);
        boolean boolean3 = jSONObject1.equals((java.lang.Object) (byte) 10);
        java.lang.Integer int5 = jSONObject1.getInteger("hi!");
        java.math.BigDecimal bigDecimal7 = jSONObject1.getBigDecimal("true");
        com.alibaba.fastjson.JSONObject jSONObject10 = new com.alibaba.fastjson.JSONObject(0);
        boolean boolean12 = jSONObject10.equals((java.lang.Object) (byte) 10);
        java.lang.Float float14 = jSONObject10.getFloat("UTF-8");
        com.alibaba.fastjson.JSONObject jSONObject15 = new com.alibaba.fastjson.JSONObject((java.util.Map<java.lang.String, java.lang.Object>) jSONObject10);
        java.lang.Double double17 = jSONObject10.getDouble("\"\"");
        java.sql.Timestamp timestamp19 = jSONObject10.getTimestamp("Negative initial size:");
        java.util.Set<java.lang.String> strSet20 = jSONObject10.keySet();
        java.lang.Object obj21 = jSONObject1.putIfAbsent("[]", (java.lang.Object) jSONObject10);
        boolean boolean23 = jSONObject10.getBooleanValue("0.0");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(int5);
        org.junit.Assert.assertNull(bigDecimal7);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(float14);
        org.junit.Assert.assertNull(double17);
        org.junit.Assert.assertNull(timestamp19);
        org.junit.Assert.assertNotNull(strSet20);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test236");
        com.alibaba.fastjson.JSONObject jSONObject3 = new com.alibaba.fastjson.JSONObject(0);
        boolean boolean5 = jSONObject3.equals((java.lang.Object) (byte) 10);
        java.util.Set<java.util.Map.Entry<java.lang.String, java.lang.Object>> strEntrySet6 = jSONObject3.entrySet();
        short short8 = jSONObject3.getShortValue("UTF-8");
        java.lang.String str10 = jSONObject3.getString("null:");
        java.lang.Class<?> wildcardClass11 = jSONObject3.getClass();
        com.alibaba.fastjson.parser.Feature[] featureArray12 = new com.alibaba.fastjson.parser.Feature[] {};
        com.alibaba.fastjson.parser.DefaultJSONParser.ResolveTask resolveTask13 = com.alibaba.fastjson.JSON.parseObject("", (java.lang.reflect.Type) wildcardClass11, featureArray12);
        com.alibaba.fastjson.parser.ParserConfig parserConfig14 = null;
        com.alibaba.fastjson.JSONObject jSONObject17 = new com.alibaba.fastjson.JSONObject(0);
        boolean boolean19 = jSONObject17.equals((java.lang.Object) (byte) 10);
        java.util.Set<java.util.Map.Entry<java.lang.String, java.lang.Object>> strEntrySet20 = jSONObject17.entrySet();
        short short22 = jSONObject17.getShortValue("UTF-8");
        java.lang.String str24 = jSONObject17.getString("null:");
        java.lang.Class<?> wildcardClass25 = jSONObject17.getClass();
        com.alibaba.fastjson.parser.Feature[] featureArray26 = new com.alibaba.fastjson.parser.Feature[] {};
        com.alibaba.fastjson.parser.DefaultJSONParser.ResolveTask resolveTask27 = com.alibaba.fastjson.JSON.parseObject("", (java.lang.reflect.Type) wildcardClass25, featureArray26);
        // The following exception was thrown during execution in test generation
        try {
            com.alibaba.fastjson.JSONAware jSONAware28 = com.alibaba.fastjson.JSON.parseObject("'WriteTabAsSpecial'", (java.lang.reflect.Type) wildcardClass11, parserConfig14, featureArray26);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(strEntrySet6);
        org.junit.Assert.assertTrue("'" + short8 + "' != '" + (short) 0 + "'", short8 == (short) 0);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(wildcardClass11);
        org.junit.Assert.assertNotNull(featureArray12);
        org.junit.Assert.assertNull(resolveTask13);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(strEntrySet20);
        org.junit.Assert.assertTrue("'" + short22 + "' != '" + (short) 0 + "'", short22 == (short) 0);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertNotNull(featureArray26);
        org.junit.Assert.assertNull(resolveTask27);
    }

    @Test
    public void test237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test237");
        com.alibaba.fastjson.JSONObject jSONObject1 = new com.alibaba.fastjson.JSONObject(0);
        boolean boolean3 = jSONObject1.equals((java.lang.Object) (byte) 10);
        java.util.Set<java.util.Map.Entry<java.lang.String, java.lang.Object>> strEntrySet4 = jSONObject1.entrySet();
        short short6 = jSONObject1.getShortValue("UTF-8");
        boolean boolean8 = jSONObject1.getBooleanValue("'WriteTabAsSpecial'");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(strEntrySet4);
        org.junit.Assert.assertTrue("'" + short6 + "' != '" + (short) 0 + "'", short6 == (short) 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test238");
        com.alibaba.fastjson.parser.DefaultJSONParser defaultJSONParser1 = new com.alibaba.fastjson.parser.DefaultJSONParser(":true");
        com.alibaba.fastjson.parser.ParseContext parseContext2 = null;
        defaultJSONParser1.setContext(parseContext2);
        com.alibaba.fastjson.util.IOUtils.close((java.io.Closeable) defaultJSONParser1);
        com.alibaba.fastjson.JSONObject jSONObject6 = new com.alibaba.fastjson.JSONObject(0);
        boolean boolean8 = jSONObject6.equals((java.lang.Object) (byte) 10);
        java.lang.Float float10 = jSONObject6.getFloat("UTF-8");
        com.alibaba.fastjson.JSONObject jSONObject11 = new com.alibaba.fastjson.JSONObject((java.util.Map<java.lang.String, java.lang.Object>) jSONObject6);
        java.lang.Double double13 = jSONObject6.getDouble("\"\"");
        java.sql.Timestamp timestamp15 = jSONObject6.getTimestamp("Negative initial size:");
        java.util.Set<java.lang.String> strSet16 = jSONObject6.keySet();
        // The following exception was thrown during execution in test generation
        try {
            defaultJSONParser1.parseArray((java.util.Collection) strSet16);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson.JSONException; message: syntax error, expect [, actual :, pos 0, fieldName null");
        } catch (com.alibaba.fastjson.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(float10);
        org.junit.Assert.assertNull(double13);
        org.junit.Assert.assertNull(timestamp15);
        org.junit.Assert.assertNotNull(strSet16);
    }

    @Test
    public void test239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test239");
        com.alibaba.fastjson.parser.ParserConfig parserConfig1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj3 = com.alibaba.fastjson.JSON.parse("must >", parserConfig1, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test240");
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature0 = com.alibaba.fastjson.serializer.SerializerFeature.WriteTabAsSpecial;
        int int1 = serializerFeature0.getMask();
        org.junit.Assert.assertTrue("'" + serializerFeature0 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteTabAsSpecial + "'", serializerFeature0.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteTabAsSpecial));
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 4096 + "'", int1 == 4096);
    }

    @Test
    public void test241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test241");
        com.alibaba.fastjson.JSONObject jSONObject1 = new com.alibaba.fastjson.JSONObject(0);
        boolean boolean3 = jSONObject1.equals((java.lang.Object) (byte) 10);
        java.lang.Float float5 = jSONObject1.getFloat("UTF-8");
        com.alibaba.fastjson.parser.ParserConfig parserConfig6 = null;
        java.lang.Object obj7 = com.alibaba.fastjson.JSON.toJSON((java.lang.Object) jSONObject1, parserConfig6);
        com.alibaba.fastjson.JSONObject jSONObject9 = jSONObject1.fluentRemove((java.lang.Object) 1.0d);
        boolean boolean11 = jSONObject9.containsKey((java.lang.Object) 2);
        java.lang.Boolean boolean13 = jSONObject9.getBoolean("[]");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(float5);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "{}");
        org.junit.Assert.assertNotNull(jSONObject9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(boolean13);
    }

    @Test
    public void test242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test242");
        com.alibaba.fastjson.parser.DefaultJSONParser defaultJSONParser1 = new com.alibaba.fastjson.parser.DefaultJSONParser(":true");
        com.alibaba.fastjson.parser.SymbolTable symbolTable2 = defaultJSONParser1.symbolTable;
        defaultJSONParser1.resolveStatus = (byte) -1;
        com.alibaba.fastjson.JSONObject jSONObject6 = new com.alibaba.fastjson.JSONObject(0);
        boolean boolean8 = jSONObject6.equals((java.lang.Object) (byte) 10);
        java.lang.Integer int10 = jSONObject6.getInteger("hi!");
        java.math.BigDecimal bigDecimal12 = jSONObject6.getBigDecimal("true");
        com.alibaba.fastjson.JSONObject jSONObject15 = new com.alibaba.fastjson.JSONObject(0);
        boolean boolean17 = jSONObject15.equals((java.lang.Object) (byte) 10);
        java.lang.Float float19 = jSONObject15.getFloat("UTF-8");
        com.alibaba.fastjson.JSONObject jSONObject20 = new com.alibaba.fastjson.JSONObject((java.util.Map<java.lang.String, java.lang.Object>) jSONObject15);
        java.lang.Double double22 = jSONObject15.getDouble("\"\"");
        java.sql.Timestamp timestamp24 = jSONObject15.getTimestamp("Negative initial size:");
        java.util.Set<java.lang.String> strSet25 = jSONObject15.keySet();
        java.lang.Object obj26 = jSONObject6.putIfAbsent("[]", (java.lang.Object) jSONObject15);
        java.lang.String str28 = jSONObject6.getString("0.0");
        com.alibaba.fastjson.JSONObject jSONObject30 = new com.alibaba.fastjson.JSONObject(0);
        boolean boolean32 = jSONObject30.equals((java.lang.Object) (byte) 10);
        java.lang.Integer int34 = jSONObject30.getInteger("hi!");
        boolean boolean36 = jSONObject30.getBooleanValue(":false");
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature37 = com.alibaba.fastjson.serializer.SerializerFeature.WriteTabAsSpecial;
        com.alibaba.fastjson.serializer.SerializeFilter[] serializeFilterArray39 = new com.alibaba.fastjson.serializer.SerializeFilter[] {};
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature40 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature41 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature42 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature43 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature44 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature[] serializerFeatureArray45 = new com.alibaba.fastjson.serializer.SerializerFeature[] { serializerFeature40, serializerFeature41, serializerFeature42, serializerFeature43, serializerFeature44 };
        byte[] byteArray46 = com.alibaba.fastjson.JSON.toJSONBytes((java.lang.Object) "hi!", serializeFilterArray39, serializerFeatureArray45);
        com.alibaba.fastjson.serializer.SerializeFilter[] serializeFilterArray48 = new com.alibaba.fastjson.serializer.SerializeFilter[] {};
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature49 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature50 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature51 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature52 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature53 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature[] serializerFeatureArray54 = new com.alibaba.fastjson.serializer.SerializerFeature[] { serializerFeature49, serializerFeature50, serializerFeature51, serializerFeature52, serializerFeature53 };
        byte[] byteArray55 = com.alibaba.fastjson.JSON.toJSONBytes((java.lang.Object) "hi!", serializeFilterArray48, serializerFeatureArray54);
        java.lang.String str56 = com.alibaba.fastjson.JSON.toJSONString((java.lang.Object) serializerFeature37, serializeFilterArray39, serializerFeatureArray54);
        java.lang.Object obj57 = jSONObject30.get((java.lang.Object) serializeFilterArray39);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj58 = defaultJSONParser1.parseObject((java.util.Map) jSONObject6, (java.lang.Object) serializeFilterArray39);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson.JSONException; message: syntax error, expect {, actual :, pos 1, line 1, column 2:true");
        } catch (com.alibaba.fastjson.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(symbolTable2);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(int10);
        org.junit.Assert.assertNull(bigDecimal12);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(float19);
        org.junit.Assert.assertNull(double22);
        org.junit.Assert.assertNull(timestamp24);
        org.junit.Assert.assertNotNull(strSet25);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(int34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + serializerFeature37 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteTabAsSpecial + "'", serializerFeature37.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteTabAsSpecial));
        org.junit.Assert.assertNotNull(serializeFilterArray39);
        org.junit.Assert.assertTrue("'" + serializerFeature40 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature40.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature41 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature41.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature42 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature42.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + serializerFeature43 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature43.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature44 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature44.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertNotNull(serializerFeatureArray45);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[39, 104, 105, 33, 39]");
        org.junit.Assert.assertNotNull(serializeFilterArray48);
        org.junit.Assert.assertTrue("'" + serializerFeature49 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature49.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature50 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature50.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature51 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature51.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + serializerFeature52 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature52.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature53 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature53.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertNotNull(serializerFeatureArray54);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[39, 104, 105, 33, 39]");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "'WriteTabAsSpecial'" + "'", str56, "'WriteTabAsSpecial'");
        org.junit.Assert.assertNull(obj57);
    }

    @Test
    public void test243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test243");
        java.io.InputStream inputStream0 = null;
        java.nio.charset.Charset charset1 = com.alibaba.fastjson.util.IOUtils.UTF8;
        com.alibaba.fastjson.JSONObject jSONObject4 = new com.alibaba.fastjson.JSONObject(0);
        boolean boolean6 = jSONObject4.equals((java.lang.Object) (byte) 10);
        java.util.Set<java.util.Map.Entry<java.lang.String, java.lang.Object>> strEntrySet7 = jSONObject4.entrySet();
        short short9 = jSONObject4.getShortValue("UTF-8");
        java.lang.String str11 = jSONObject4.getString("null:");
        java.lang.Class<?> wildcardClass12 = jSONObject4.getClass();
        com.alibaba.fastjson.parser.Feature[] featureArray13 = new com.alibaba.fastjson.parser.Feature[] {};
        com.alibaba.fastjson.parser.DefaultJSONParser.ResolveTask resolveTask14 = com.alibaba.fastjson.JSON.parseObject("", (java.lang.reflect.Type) wildcardClass12, featureArray13);
        com.alibaba.fastjson.parser.ParserConfig parserConfig15 = null;
        com.alibaba.fastjson.parser.deserializer.ParseProcess parseProcess16 = null;
        com.alibaba.fastjson.parser.Feature feature18 = null;
        com.alibaba.fastjson.parser.Feature[] featureArray19 = new com.alibaba.fastjson.parser.Feature[] { feature18 };
        // The following exception was thrown during execution in test generation
        try {
            com.alibaba.fastjson.JSONObject jSONObject20 = com.alibaba.fastjson.JSON.parseObject(inputStream0, charset1, (java.lang.reflect.Type) wildcardClass12, parserConfig15, parseProcess16, (int) ' ', featureArray19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strEntrySet7);
        org.junit.Assert.assertTrue("'" + short9 + "' != '" + (short) 0 + "'", short9 == (short) 0);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(wildcardClass12);
        org.junit.Assert.assertNotNull(featureArray13);
        org.junit.Assert.assertNull(resolveTask14);
        org.junit.Assert.assertNotNull(featureArray19);
    }

    @Test
    public void test244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test244");
        java.io.Writer writer0 = null;
        com.alibaba.fastjson.serializer.SerializeWriter serializeWriter2 = new com.alibaba.fastjson.serializer.SerializeWriter(writer0, 10);
        serializeWriter2.writeStringWithDoubleQuote("'WriteTabAsSpecial'", '4');
        serializeWriter2.expandCapacity((int) (byte) 1);
    }

    @Test
    public void test245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test245");
        com.alibaba.fastjson.parser.ParserConfig parserConfig1 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.alibaba.fastjson.parser.DefaultJSONParser defaultJSONParser3 = new com.alibaba.fastjson.parser.DefaultJSONParser("fastjson.compatibleWithJavaBean", parserConfig1, 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test246");
        com.alibaba.fastjson.JSONObject jSONObject1 = new com.alibaba.fastjson.JSONObject(true);
    }

    @Test
    public void test247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test247");
        com.alibaba.fastjson.parser.DefaultJSONParser defaultJSONParser1 = new com.alibaba.fastjson.parser.DefaultJSONParser(":true");
        com.alibaba.fastjson.parser.SymbolTable symbolTable2 = defaultJSONParser1.symbolTable;
        com.alibaba.fastjson.parser.DefaultJSONParser defaultJSONParser4 = new com.alibaba.fastjson.parser.DefaultJSONParser(":true");
        com.alibaba.fastjson.parser.deserializer.FieldTypeResolver fieldTypeResolver5 = defaultJSONParser4.getFieldTypeResolver();
        java.lang.Object obj6 = defaultJSONParser4.input;
        com.alibaba.fastjson.JSON.handleResovleTask(defaultJSONParser1, defaultJSONParser4);
        com.alibaba.fastjson.JSONObject jSONObject9 = new com.alibaba.fastjson.JSONObject(0);
        boolean boolean11 = jSONObject9.equals((java.lang.Object) (byte) 10);
        java.lang.Float float13 = jSONObject9.getFloat("UTF-8");
        com.alibaba.fastjson.JSONObject jSONObject14 = new com.alibaba.fastjson.JSONObject((java.util.Map<java.lang.String, java.lang.Object>) jSONObject9);
        java.lang.Double double16 = jSONObject9.getDouble("\"\"");
        java.sql.Timestamp timestamp18 = jSONObject9.getTimestamp("Negative initial size:");
        java.util.Set<java.lang.String> strSet19 = jSONObject9.keySet();
        java.lang.Double double21 = jSONObject9.getDouble(":false");
        com.alibaba.fastjson.JSONObject jSONObject24 = new com.alibaba.fastjson.JSONObject(0);
        boolean boolean26 = jSONObject24.equals((java.lang.Object) (byte) 10);
        java.lang.Float float28 = jSONObject24.getFloat("UTF-8");
        com.alibaba.fastjson.parser.ParserConfig parserConfig29 = null;
        java.lang.Object obj30 = com.alibaba.fastjson.JSON.toJSON((java.lang.Object) jSONObject24, parserConfig29);
        com.alibaba.fastjson.JSONObject jSONObject32 = jSONObject24.fluentRemove((java.lang.Object) 1.0d);
        java.lang.Object obj33 = jSONObject9.putIfAbsent("fastjson.serializer_buffer_threshold", (java.lang.Object) jSONObject24);
        com.alibaba.fastjson.JSONObject jSONObject35 = new com.alibaba.fastjson.JSONObject(0);
        boolean boolean37 = jSONObject35.equals((java.lang.Object) (byte) 10);
        java.lang.Float float39 = jSONObject35.getFloat("UTF-8");
        com.alibaba.fastjson.JSONObject jSONObject40 = new com.alibaba.fastjson.JSONObject((java.util.Map<java.lang.String, java.lang.Object>) jSONObject35);
        java.lang.Double double42 = jSONObject35.getDouble("\"\"");
        java.sql.Timestamp timestamp44 = jSONObject35.getTimestamp("Negative initial size:");
        java.util.Set<java.lang.String> strSet45 = jSONObject35.keySet();
        java.lang.Object obj47 = jSONObject24.getOrDefault((java.lang.Object) jSONObject35, (java.lang.Object) (short) 0);
        java.util.Set<java.util.Map.Entry<java.lang.String, java.lang.Object>> strEntrySet48 = jSONObject35.entrySet();
        com.alibaba.fastjson.JSONObject jSONObject50 = new com.alibaba.fastjson.JSONObject(0);
        boolean boolean52 = jSONObject50.equals((java.lang.Object) (byte) 10);
        java.lang.Integer int54 = jSONObject50.getInteger("hi!");
        boolean boolean56 = jSONObject50.getBooleanValue("-9223372036854775808");
        com.alibaba.fastjson.JSONObject jSONObject57 = jSONObject50.clone();
        boolean boolean59 = jSONObject57.getBooleanValue("must >");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj60 = defaultJSONParser4.parseObject((java.util.Map) jSONObject35, (java.lang.Object) jSONObject57);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson.JSONException; message: syntax error, expect {, actual :, pos 1, line 1, column 2:true");
        } catch (com.alibaba.fastjson.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(symbolTable2);
        org.junit.Assert.assertNull(fieldTypeResolver5);
        org.junit.Assert.assertEquals("'" + obj6 + "' != '" + ":true" + "'", obj6, ":true");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(float13);
        org.junit.Assert.assertNull(double16);
        org.junit.Assert.assertNull(timestamp18);
        org.junit.Assert.assertNotNull(strSet19);
        org.junit.Assert.assertNull(double21);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(float28);
        org.junit.Assert.assertNotNull(obj30);
        org.junit.Assert.assertEquals(obj30.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj30), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj30), "{}");
        org.junit.Assert.assertNotNull(jSONObject32);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(float39);
        org.junit.Assert.assertNull(double42);
        org.junit.Assert.assertNull(timestamp44);
        org.junit.Assert.assertNotNull(strSet45);
        org.junit.Assert.assertEquals("'" + obj47 + "' != '" + (short) 0 + "'", obj47, (short) 0);
        org.junit.Assert.assertNotNull(strEntrySet48);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNull(int54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(jSONObject57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
    }

    @Test
    public void test248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test248");
        java.lang.String str1 = com.alibaba.fastjson.util.RyuDouble.toString((double) (byte) 10);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "10.0" + "'", str1, "10.0");
    }

    @Test
    public void test249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test249");
        byte[] byteArray3 = com.alibaba.fastjson.util.IOUtils.decodeBase64("{}", 0, (int) (short) 1);
        char[] charArray6 = new char[] {};
        byte[] byteArray12 = com.alibaba.fastjson.util.IOUtils.decodeBase64("{}", 0, (int) (short) 1);
        int int13 = com.alibaba.fastjson.util.IOUtils.encodeUTF8(charArray6, 3089, 0, byteArray12);
        // The following exception was thrown during execution in test generation
        try {
            int int14 = com.alibaba.fastjson.util.IOUtils.decodeUTF8(byteArray3, 52, 10, charArray6);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 52");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test250");
        com.alibaba.fastjson.JSONObject jSONObject2 = new com.alibaba.fastjson.JSONObject(0);
        boolean boolean4 = jSONObject2.equals((java.lang.Object) (byte) 10);
        java.util.Set<java.util.Map.Entry<java.lang.String, java.lang.Object>> strEntrySet5 = jSONObject2.entrySet();
        short short7 = jSONObject2.getShortValue("UTF-8");
        java.lang.String str9 = jSONObject2.getString("null:");
        java.lang.Class<?> wildcardClass10 = jSONObject2.getClass();
        com.alibaba.fastjson.parser.ParserConfig parserConfig11 = null;
        byte[] byteArray13 = com.alibaba.fastjson.util.IOUtils.specicalFlags_singleQuotes;
        char[] charArray16 = com.alibaba.fastjson.util.IOUtils.CA;
        int int17 = com.alibaba.fastjson.util.IOUtils.decodeUTF8(byteArray13, (int) (byte) 0, (int) (short) 1, charArray16);
        java.nio.charset.Charset charset20 = com.alibaba.fastjson.util.IOUtils.UTF8;
        java.lang.reflect.Type type21 = null;
        com.alibaba.fastjson.parser.ParserConfig parserConfig22 = null;
        com.alibaba.fastjson.parser.deserializer.ParseProcess parseProcess23 = null;
        char[] charArray28 = new char[] { '#', '#', ' ' };
        byte[] byteArray31 = com.alibaba.fastjson.util.IOUtils.decodeBase64(charArray28, 10, (int) (byte) 0);
        com.alibaba.fastjson.serializer.SerializeFilter[] serializeFilterArray33 = new com.alibaba.fastjson.serializer.SerializeFilter[] {};
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature34 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature35 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature36 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature37 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature38 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature[] serializerFeatureArray39 = new com.alibaba.fastjson.serializer.SerializerFeature[] { serializerFeature34, serializerFeature35, serializerFeature36, serializerFeature37, serializerFeature38 };
        byte[] byteArray40 = com.alibaba.fastjson.JSON.toJSONBytes((java.lang.Object) "hi!", serializeFilterArray33, serializerFeatureArray39);
        java.nio.charset.Charset charset43 = com.alibaba.fastjson.util.IOUtils.UTF8;
        java.lang.reflect.Type type44 = null;
        byte[] byteArray51 = new byte[] { (byte) 10, (byte) -1, (byte) 100, (byte) 10, (byte) 10, (byte) 1 };
        java.lang.reflect.Type type52 = null;
        com.alibaba.fastjson.parser.Feature feature53 = null;
        com.alibaba.fastjson.parser.Feature[] featureArray54 = new com.alibaba.fastjson.parser.Feature[] { feature53 };
        java.lang.Comparable<java.lang.String> strComparable55 = com.alibaba.fastjson.JSON.parseObject(byteArray51, type52, featureArray54);
        java.nio.charset.Charset charset56 = com.alibaba.fastjson.JSON.parseObject(byteArray40, 3089, (int) (short) -1, charset43, type44, featureArray54);
        com.alibaba.fastjson.JSONObject jSONObject58 = new com.alibaba.fastjson.JSONObject(0);
        boolean boolean60 = jSONObject58.equals((java.lang.Object) (byte) 10);
        java.util.Set<java.util.Map.Entry<java.lang.String, java.lang.Object>> strEntrySet61 = jSONObject58.entrySet();
        short short63 = jSONObject58.getShortValue("UTF-8");
        java.lang.String str65 = jSONObject58.getString("null:");
        java.lang.Class<?> wildcardClass66 = jSONObject58.getClass();
        com.alibaba.fastjson.parser.ParserConfig parserConfig67 = null;
        com.alibaba.fastjson.parser.deserializer.ParseProcess parseProcess68 = null;
        com.alibaba.fastjson.parser.Feature[] featureArray70 = new com.alibaba.fastjson.parser.Feature[] {};
        java.text.DateFormat dateFormat71 = com.alibaba.fastjson.JSON.parseObject(byteArray31, charset56, (java.lang.reflect.Type) wildcardClass66, parserConfig67, parseProcess68, (int) '4', featureArray70);
        java.util.AbstractCollection<java.lang.String> strCollection72 = com.alibaba.fastjson.JSON.parseObject(byteArray13, 4096, (-1), charset20, type21, parserConfig22, parseProcess23, (int) 'a', featureArray70);
        // The following exception was thrown during execution in test generation
        try {
            boolean[] booleanArray73 = com.alibaba.fastjson.JSON.parseObject("BeanToArray", (java.lang.reflect.Type) wildcardClass10, parserConfig11, (int) (byte) 1, featureArray70);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(strEntrySet5);
        org.junit.Assert.assertTrue("'" + short7 + "' != '" + (short) 0 + "'", short7 == (short) 0);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[4, 4, 4, 4, 4, 4, 4, 4, 1, 1, 1, 4, 1, 1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0]");
        org.junit.Assert.assertNotNull(charArray16);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray16), "\004\000\000\000\000\000\000\000\000\000KLMNOPQRSTUVWXYZabcde0ghijklmnopqrstuvwxyz0123456789+/");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray16), "\004\000\000\000\000\000\000\000\000\000KLMNOPQRSTUVWXYZabcde0ghijklmnopqrstuvwxyz0123456789+/");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray16), "[\004, \000, \000, \000, \000, \000, \000, \000, \000, \000, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z, a, b, c, d, e, 0, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, +, /]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(charset20);
        org.junit.Assert.assertNotNull(charArray28);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray28), "## ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray28), "## ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray28), "[#, #,  ]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertNotNull(serializeFilterArray33);
        org.junit.Assert.assertTrue("'" + serializerFeature34 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature34.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature35 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature35.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature36 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature36.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + serializerFeature37 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature37.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature38 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature38.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertNotNull(serializerFeatureArray39);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[39, 104, 105, 33, 39]");
        org.junit.Assert.assertNotNull(charset43);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[10, -1, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(featureArray54);
        org.junit.Assert.assertNull(strComparable55);
        org.junit.Assert.assertNull(charset56);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(strEntrySet61);
        org.junit.Assert.assertTrue("'" + short63 + "' != '" + (short) 0 + "'", short63 == (short) 0);
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertNotNull(wildcardClass66);
        org.junit.Assert.assertNotNull(featureArray70);
        org.junit.Assert.assertNull(dateFormat71);
        org.junit.Assert.assertNull(strCollection72);
    }

    @Test
    public void test251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test251");
        com.alibaba.fastjson.parser.DefaultJSONParser defaultJSONParser1 = new com.alibaba.fastjson.parser.DefaultJSONParser(":true");
        com.alibaba.fastjson.parser.deserializer.FieldTypeResolver fieldTypeResolver2 = defaultJSONParser1.getFieldTypeResolver();
        java.io.Writer writer3 = null;
        com.alibaba.fastjson.serializer.SerializeWriter serializeWriter5 = new com.alibaba.fastjson.serializer.SerializeWriter(writer3, 10);
        serializeWriter5.writeStringWithDoubleQuote("'WriteTabAsSpecial'", '4');
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature9 = com.alibaba.fastjson.serializer.SerializerFeature.WriteTabAsSpecial;
        com.alibaba.fastjson.serializer.SerializeFilter[] serializeFilterArray11 = new com.alibaba.fastjson.serializer.SerializeFilter[] {};
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature12 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature13 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature14 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature15 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature16 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature[] serializerFeatureArray17 = new com.alibaba.fastjson.serializer.SerializerFeature[] { serializerFeature12, serializerFeature13, serializerFeature14, serializerFeature15, serializerFeature16 };
        byte[] byteArray18 = com.alibaba.fastjson.JSON.toJSONBytes((java.lang.Object) "hi!", serializeFilterArray11, serializerFeatureArray17);
        com.alibaba.fastjson.serializer.SerializeFilter[] serializeFilterArray20 = new com.alibaba.fastjson.serializer.SerializeFilter[] {};
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature21 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature22 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature23 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature24 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature25 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature[] serializerFeatureArray26 = new com.alibaba.fastjson.serializer.SerializerFeature[] { serializerFeature21, serializerFeature22, serializerFeature23, serializerFeature24, serializerFeature25 };
        byte[] byteArray27 = com.alibaba.fastjson.JSON.toJSONBytes((java.lang.Object) "hi!", serializeFilterArray20, serializerFeatureArray26);
        java.lang.String str28 = com.alibaba.fastjson.JSON.toJSONString((java.lang.Object) serializerFeature9, serializeFilterArray11, serializerFeatureArray26);
        com.alibaba.fastjson.serializer.SerializeWriter serializeWriter29 = new com.alibaba.fastjson.serializer.SerializeWriter((java.io.Writer) serializeWriter5, serializerFeatureArray26);
        serializeWriter29.writeFloat((float) (byte) 0, false);
        defaultJSONParser1.handleResovleTask((java.lang.Object) false);
        com.alibaba.fastjson.parser.ParseContext parseContext34 = null;
        com.alibaba.fastjson.parser.ParseContext parseContext37 = defaultJSONParser1.setContext(parseContext34, (java.lang.Object) "{fastjson.serializer_buffer_threshold:{}}", (java.lang.Object) "com.alibaba.fastjson.JSONException: hi!");
        com.alibaba.fastjson.JSONObject jSONObject39 = new com.alibaba.fastjson.JSONObject(0);
        boolean boolean41 = jSONObject39.equals((java.lang.Object) (byte) 10);
        java.lang.Integer int43 = jSONObject39.getInteger("hi!");
        boolean boolean45 = jSONObject39.getBooleanValue(":false");
        byte[] byteArray47 = jSONObject39.getBytes("fastjson.serializer_buffer_threshold");
        java.util.Set<java.util.Map.Entry<java.lang.String, java.lang.Object>> strEntrySet48 = jSONObject39.entrySet();
        com.alibaba.fastjson.serializer.SerializeFilter[] serializeFilterArray52 = new com.alibaba.fastjson.serializer.SerializeFilter[] {};
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature53 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature54 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature55 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature56 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature57 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature[] serializerFeatureArray58 = new com.alibaba.fastjson.serializer.SerializerFeature[] { serializerFeature53, serializerFeature54, serializerFeature55, serializerFeature56, serializerFeature57 };
        byte[] byteArray59 = com.alibaba.fastjson.JSON.toJSONBytes((java.lang.Object) "hi!", serializeFilterArray52, serializerFeatureArray58);
        java.lang.String str60 = com.alibaba.fastjson.JSON.toJSONStringWithDateFormat((java.lang.Object) "Negative initial size:", ", minimumCapacity=", serializerFeatureArray58);
        // The following exception was thrown during execution in test generation
        try {
            defaultJSONParser1.parseArray((java.util.Collection) strEntrySet48, (java.lang.Object) ", minimumCapacity=");
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson.JSONException; message: syntax error, expect [, actual :, pos 0, fieldName , minimumCapacity=");
        } catch (com.alibaba.fastjson.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(fieldTypeResolver2);
        org.junit.Assert.assertTrue("'" + serializerFeature9 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteTabAsSpecial + "'", serializerFeature9.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteTabAsSpecial));
        org.junit.Assert.assertNotNull(serializeFilterArray11);
        org.junit.Assert.assertTrue("'" + serializerFeature12 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature12.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature13 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature13.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature14 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature14.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + serializerFeature15 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature15.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature16 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature16.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertNotNull(serializerFeatureArray17);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[39, 104, 105, 33, 39]");
        org.junit.Assert.assertNotNull(serializeFilterArray20);
        org.junit.Assert.assertTrue("'" + serializerFeature21 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature21.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature22 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature22.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature23 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature23.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + serializerFeature24 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature24.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature25 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature25.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertNotNull(serializerFeatureArray26);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[39, 104, 105, 33, 39]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "'WriteTabAsSpecial'" + "'", str28, "'WriteTabAsSpecial'");
        org.junit.Assert.assertNotNull(parseContext37);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNull(int43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(byteArray47);
        org.junit.Assert.assertNotNull(strEntrySet48);
        org.junit.Assert.assertNotNull(serializeFilterArray52);
        org.junit.Assert.assertTrue("'" + serializerFeature53 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature53.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature54 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature54.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature55 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature55.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + serializerFeature56 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature56.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature57 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature57.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertNotNull(serializerFeatureArray58);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[39, 104, 105, 33, 39]");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "'Negative initial size:'" + "'", str60, "'Negative initial size:'");
    }

    @Test
    public void test252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test252");
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature0 = com.alibaba.fastjson.serializer.SerializerFeature.NotWriteDefaultValue;
        org.junit.Assert.assertTrue("'" + serializerFeature0 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.NotWriteDefaultValue + "'", serializerFeature0.equals(com.alibaba.fastjson.serializer.SerializerFeature.NotWriteDefaultValue));
    }

    @Test
    public void test253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test253");
        java.io.Writer writer0 = null;
        com.alibaba.fastjson.serializer.SerializeWriter serializeWriter2 = new com.alibaba.fastjson.serializer.SerializeWriter(writer0, 10);
        serializeWriter2.write((int) (byte) -1);
        serializeWriter2.expandCapacity((int) (short) 10);
        char[] charArray10 = new char[] { '#', '#', ' ' };
        byte[] byteArray13 = com.alibaba.fastjson.util.IOUtils.decodeBase64(charArray10, 10, (int) (byte) 0);
        serializeWriter2.write(charArray10);
        serializeWriter2.writeFloat(0.0f, false);
        serializeWriter2.writeFieldValueStringWithDoubleQuoteCheck('a', "null:", "hi!");
        boolean boolean23 = serializeWriter2.isEnabled((-1));
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "## ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "## ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[#, #,  ]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test254");
        java.io.Writer writer0 = null;
        com.alibaba.fastjson.serializer.SerializeWriter serializeWriter2 = new com.alibaba.fastjson.serializer.SerializeWriter(writer0, 10);
        serializeWriter2.writeStringWithDoubleQuote("'WriteTabAsSpecial'", '4');
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature6 = com.alibaba.fastjson.serializer.SerializerFeature.WriteTabAsSpecial;
        com.alibaba.fastjson.serializer.SerializeFilter[] serializeFilterArray8 = new com.alibaba.fastjson.serializer.SerializeFilter[] {};
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature9 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature10 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature11 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature12 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature13 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature[] serializerFeatureArray14 = new com.alibaba.fastjson.serializer.SerializerFeature[] { serializerFeature9, serializerFeature10, serializerFeature11, serializerFeature12, serializerFeature13 };
        byte[] byteArray15 = com.alibaba.fastjson.JSON.toJSONBytes((java.lang.Object) "hi!", serializeFilterArray8, serializerFeatureArray14);
        com.alibaba.fastjson.serializer.SerializeFilter[] serializeFilterArray17 = new com.alibaba.fastjson.serializer.SerializeFilter[] {};
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature18 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature19 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature20 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature21 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature22 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature[] serializerFeatureArray23 = new com.alibaba.fastjson.serializer.SerializerFeature[] { serializerFeature18, serializerFeature19, serializerFeature20, serializerFeature21, serializerFeature22 };
        byte[] byteArray24 = com.alibaba.fastjson.JSON.toJSONBytes((java.lang.Object) "hi!", serializeFilterArray17, serializerFeatureArray23);
        java.lang.String str25 = com.alibaba.fastjson.JSON.toJSONString((java.lang.Object) serializerFeature6, serializeFilterArray8, serializerFeatureArray23);
        com.alibaba.fastjson.serializer.SerializeWriter serializeWriter26 = new com.alibaba.fastjson.serializer.SerializeWriter((java.io.Writer) serializeWriter2, serializerFeatureArray23);
        serializeWriter26.writeFloat((float) (byte) 0, false);
        boolean boolean30 = serializeWriter26.isSortField();
        serializeWriter26.writeDouble((double) (short) 0, false);
        org.junit.Assert.assertTrue("'" + serializerFeature6 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteTabAsSpecial + "'", serializerFeature6.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteTabAsSpecial));
        org.junit.Assert.assertNotNull(serializeFilterArray8);
        org.junit.Assert.assertTrue("'" + serializerFeature9 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature9.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature10 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature10.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature11 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature11.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + serializerFeature12 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature12.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature13 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature13.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertNotNull(serializerFeatureArray14);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[39, 104, 105, 33, 39]");
        org.junit.Assert.assertNotNull(serializeFilterArray17);
        org.junit.Assert.assertTrue("'" + serializerFeature18 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature18.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature19 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature19.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature20 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature20.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + serializerFeature21 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature21.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature22 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature22.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertNotNull(serializerFeatureArray23);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[39, 104, 105, 33, 39]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "'WriteTabAsSpecial'" + "'", str25, "'WriteTabAsSpecial'");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test255");
        com.alibaba.fastjson.JSONObject jSONObject1 = new com.alibaba.fastjson.JSONObject(0);
        java.util.Collection<java.lang.Object> objCollection2 = jSONObject1.values();
        com.alibaba.fastjson.JSONObject jSONObject3 = new com.alibaba.fastjson.JSONObject((java.util.Map<java.lang.String, java.lang.Object>) jSONObject1);
        com.alibaba.fastjson.TypeReference typeReference5 = null;
        boolean[] booleanArray6 = jSONObject1.getObject("fastjson.serializer_buffer_threshold", typeReference5);
        byte[] byteArray8 = jSONObject1.getBytes("@type");
        org.junit.Assert.assertNotNull(objCollection2);
        org.junit.Assert.assertNull(booleanArray6);
        org.junit.Assert.assertNull(byteArray8);
    }

    @Test
    public void test256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test256");
        java.io.Writer writer0 = null;
        com.alibaba.fastjson.serializer.SerializeWriter serializeWriter2 = new com.alibaba.fastjson.serializer.SerializeWriter(writer0, 10);
        serializeWriter2.writeStringWithDoubleQuote("'WriteTabAsSpecial'", '4');
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature6 = com.alibaba.fastjson.serializer.SerializerFeature.WriteTabAsSpecial;
        com.alibaba.fastjson.serializer.SerializeFilter[] serializeFilterArray8 = new com.alibaba.fastjson.serializer.SerializeFilter[] {};
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature9 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature10 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature11 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature12 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature13 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature[] serializerFeatureArray14 = new com.alibaba.fastjson.serializer.SerializerFeature[] { serializerFeature9, serializerFeature10, serializerFeature11, serializerFeature12, serializerFeature13 };
        byte[] byteArray15 = com.alibaba.fastjson.JSON.toJSONBytes((java.lang.Object) "hi!", serializeFilterArray8, serializerFeatureArray14);
        com.alibaba.fastjson.serializer.SerializeFilter[] serializeFilterArray17 = new com.alibaba.fastjson.serializer.SerializeFilter[] {};
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature18 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature19 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature20 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature21 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature22 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature[] serializerFeatureArray23 = new com.alibaba.fastjson.serializer.SerializerFeature[] { serializerFeature18, serializerFeature19, serializerFeature20, serializerFeature21, serializerFeature22 };
        byte[] byteArray24 = com.alibaba.fastjson.JSON.toJSONBytes((java.lang.Object) "hi!", serializeFilterArray17, serializerFeatureArray23);
        java.lang.String str25 = com.alibaba.fastjson.JSON.toJSONString((java.lang.Object) serializerFeature6, serializeFilterArray8, serializerFeatureArray23);
        com.alibaba.fastjson.serializer.SerializeWriter serializeWriter26 = new com.alibaba.fastjson.serializer.SerializeWriter((java.io.Writer) serializeWriter2, serializerFeatureArray23);
        java.io.Writer writer27 = null;
        com.alibaba.fastjson.serializer.SerializeWriter serializeWriter29 = new com.alibaba.fastjson.serializer.SerializeWriter(writer27, 10);
        serializeWriter29.write((int) (byte) -1);
        serializeWriter29.expandCapacity((int) (short) 10);
        char[] charArray37 = new char[] { '#', '#', ' ' };
        byte[] byteArray40 = com.alibaba.fastjson.util.IOUtils.decodeBase64(charArray37, 10, (int) (byte) 0);
        serializeWriter29.write(charArray37);
        serializeWriter2.writeStringWithDoubleQuote(charArray37, 'a');
        char[] charArray46 = com.alibaba.fastjson.util.IOUtils.CA;
        com.alibaba.fastjson.util.IOUtils.getChars((long) 0, (int) ' ', charArray46);
        // The following exception was thrown during execution in test generation
        try {
            serializeWriter2.write(charArray46, 0, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + serializerFeature6 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteTabAsSpecial + "'", serializerFeature6.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteTabAsSpecial));
        org.junit.Assert.assertNotNull(serializeFilterArray8);
        org.junit.Assert.assertTrue("'" + serializerFeature9 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature9.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature10 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature10.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature11 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature11.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + serializerFeature12 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature12.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature13 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature13.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertNotNull(serializerFeatureArray14);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[39, 104, 105, 33, 39]");
        org.junit.Assert.assertNotNull(serializeFilterArray17);
        org.junit.Assert.assertTrue("'" + serializerFeature18 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature18.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature19 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature19.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature20 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature20.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + serializerFeature21 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature21.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature22 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature22.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertNotNull(serializerFeatureArray23);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[39, 104, 105, 33, 39]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "'WriteTabAsSpecial'" + "'", str25, "'WriteTabAsSpecial'");
        org.junit.Assert.assertNotNull(charArray37);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray37), "## ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray37), "## ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray37), "[#, #,  ]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[]");
        org.junit.Assert.assertNotNull(charArray46);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray46), "\004\000\000\000\000\000\000\000\000\000KLMNOPQRSTUVWXYZabcde0ghijklmnopqrstuvwxyz0123456789+/");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray46), "\004\000\000\000\000\000\000\000\000\000KLMNOPQRSTUVWXYZabcde0ghijklmnopqrstuvwxyz0123456789+/");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray46), "[\004, \000, \000, \000, \000, \000, \000, \000, \000, \000, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z, a, b, c, d, e, 0, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, +, /]");
    }

    @Test
    public void test257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test257");
        com.alibaba.fastjson.serializer.SerializeFilter[] serializeFilterArray1 = new com.alibaba.fastjson.serializer.SerializeFilter[] {};
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature2 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature3 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature4 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature5 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature6 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature[] serializerFeatureArray7 = new com.alibaba.fastjson.serializer.SerializerFeature[] { serializerFeature2, serializerFeature3, serializerFeature4, serializerFeature5, serializerFeature6 };
        byte[] byteArray8 = com.alibaba.fastjson.JSON.toJSONBytes((java.lang.Object) "hi!", serializeFilterArray1, serializerFeatureArray7);
        com.alibaba.fastjson.serializer.SerializeFilter[] serializeFilterArray12 = new com.alibaba.fastjson.serializer.SerializeFilter[] {};
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature13 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature14 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature15 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature16 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature17 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature[] serializerFeatureArray18 = new com.alibaba.fastjson.serializer.SerializerFeature[] { serializerFeature13, serializerFeature14, serializerFeature15, serializerFeature16, serializerFeature17 };
        byte[] byteArray19 = com.alibaba.fastjson.JSON.toJSONBytes((java.lang.Object) "hi!", serializeFilterArray12, serializerFeatureArray18);
        java.nio.charset.Charset charset22 = com.alibaba.fastjson.util.IOUtils.UTF8;
        java.lang.reflect.Type type23 = null;
        byte[] byteArray30 = new byte[] { (byte) 10, (byte) -1, (byte) 100, (byte) 10, (byte) 10, (byte) 1 };
        java.lang.reflect.Type type31 = null;
        com.alibaba.fastjson.parser.Feature feature32 = null;
        com.alibaba.fastjson.parser.Feature[] featureArray33 = new com.alibaba.fastjson.parser.Feature[] { feature32 };
        java.lang.Comparable<java.lang.String> strComparable34 = com.alibaba.fastjson.JSON.parseObject(byteArray30, type31, featureArray33);
        java.nio.charset.Charset charset35 = com.alibaba.fastjson.JSON.parseObject(byteArray19, 3089, (int) (short) -1, charset22, type23, featureArray33);
        com.alibaba.fastjson.JSONObject jSONObject38 = new com.alibaba.fastjson.JSONObject(0);
        boolean boolean40 = jSONObject38.equals((java.lang.Object) (byte) 10);
        java.util.Set<java.util.Map.Entry<java.lang.String, java.lang.Object>> strEntrySet41 = jSONObject38.entrySet();
        short short43 = jSONObject38.getShortValue("UTF-8");
        java.lang.String str45 = jSONObject38.getString("null:");
        java.lang.Class<?> wildcardClass46 = jSONObject38.getClass();
        com.alibaba.fastjson.parser.Feature[] featureArray47 = new com.alibaba.fastjson.parser.Feature[] {};
        com.alibaba.fastjson.parser.DefaultJSONParser.ResolveTask resolveTask48 = com.alibaba.fastjson.JSON.parseObject("", (java.lang.reflect.Type) wildcardClass46, featureArray47);
        com.alibaba.fastjson.parser.ParserConfig parserConfig49 = null;
        com.alibaba.fastjson.parser.deserializer.ParseProcess parseProcess50 = null;
        com.alibaba.fastjson.parser.Feature feature52 = null;
        com.alibaba.fastjson.parser.Feature[] featureArray53 = new com.alibaba.fastjson.parser.Feature[] { feature52 };
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Comparable<java.lang.String> strComparable54 = com.alibaba.fastjson.JSON.parseObject(byteArray8, (int) (short) 0, (int) ' ', charset22, (java.lang.reflect.Type) wildcardClass46, parserConfig49, parseProcess50, 2, featureArray53);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(serializeFilterArray1);
        org.junit.Assert.assertTrue("'" + serializerFeature2 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature2.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature3 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature3.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature4 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature4.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + serializerFeature5 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature5.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature6 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature6.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertNotNull(serializerFeatureArray7);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[39, 104, 105, 33, 39]");
        org.junit.Assert.assertNotNull(serializeFilterArray12);
        org.junit.Assert.assertTrue("'" + serializerFeature13 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature13.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature14 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature14.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature15 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature15.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + serializerFeature16 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature16.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature17 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature17.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertNotNull(serializerFeatureArray18);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[39, 104, 105, 33, 39]");
        org.junit.Assert.assertNotNull(charset22);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[10, -1, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(featureArray33);
        org.junit.Assert.assertNull(strComparable34);
        org.junit.Assert.assertNull(charset35);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(strEntrySet41);
        org.junit.Assert.assertTrue("'" + short43 + "' != '" + (short) 0 + "'", short43 == (short) 0);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNotNull(wildcardClass46);
        org.junit.Assert.assertNotNull(featureArray47);
        org.junit.Assert.assertNull(resolveTask48);
        org.junit.Assert.assertNotNull(featureArray53);
    }

    @Test
    public void test258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test258");
        com.alibaba.fastjson.JSONObject jSONObject1 = new com.alibaba.fastjson.JSONObject(0);
        java.util.Collection<java.lang.Object> objCollection2 = jSONObject1.values();
        com.alibaba.fastjson.JSONObject jSONObject3 = new com.alibaba.fastjson.JSONObject((java.util.Map<java.lang.String, java.lang.Object>) jSONObject1);
        com.alibaba.fastjson.JSONObject jSONObject6 = new com.alibaba.fastjson.JSONObject(0);
        boolean boolean8 = jSONObject6.equals((java.lang.Object) (byte) 10);
        java.lang.Float float10 = jSONObject6.getFloat("UTF-8");
        jSONObject6.clear();
        java.lang.reflect.Type type13 = null;
        java.util.Collection<java.lang.Object> objCollection14 = jSONObject6.getObject("-9223372036854775808", type13);
        boolean boolean16 = jSONObject6.getBooleanValue("[]");
        com.alibaba.fastjson.JSONObject jSONObject17 = jSONObject1.fluentPut("'WriteTabAsSpecial'", (java.lang.Object) boolean16);
        com.alibaba.fastjson.serializer.SerializeConfig serializeConfig18 = null;
        com.alibaba.fastjson.serializer.SerializeFilter[] serializeFilterArray20 = new com.alibaba.fastjson.serializer.SerializeFilter[] {};
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature21 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature22 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature23 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature24 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature25 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature[] serializerFeatureArray26 = new com.alibaba.fastjson.serializer.SerializerFeature[] { serializerFeature21, serializerFeature22, serializerFeature23, serializerFeature24, serializerFeature25 };
        byte[] byteArray27 = com.alibaba.fastjson.JSON.toJSONBytes((java.lang.Object) "hi!", serializeFilterArray20, serializerFeatureArray26);
        com.alibaba.fastjson.JSONObject jSONObject29 = new com.alibaba.fastjson.JSONObject(0);
        boolean boolean31 = jSONObject29.equals((java.lang.Object) (byte) 10);
        java.util.Set<java.util.Map.Entry<java.lang.String, java.lang.Object>> strEntrySet32 = jSONObject29.entrySet();
        short short34 = jSONObject29.getShortValue("false");
        java.lang.Object obj35 = com.alibaba.fastjson.JSON.toJSON((java.lang.Object) jSONObject29);
        com.alibaba.fastjson.serializer.SerializerFeature[] serializerFeatureArray37 = new com.alibaba.fastjson.serializer.SerializerFeature[] {};
        byte[] byteArray38 = com.alibaba.fastjson.JSON.toJSONBytes((java.lang.Object) 10.0d, serializerFeatureArray37);
        byte[] byteArray39 = com.alibaba.fastjson.JSON.toJSONBytes((java.lang.Object) jSONObject29, serializerFeatureArray37);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str40 = com.alibaba.fastjson.JSON.toJSONString((java.lang.Object) jSONObject17, serializeConfig18, serializeFilterArray20, serializerFeatureArray37);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objCollection2);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(float10);
        org.junit.Assert.assertNull(objCollection14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(jSONObject17);
        org.junit.Assert.assertNotNull(serializeFilterArray20);
        org.junit.Assert.assertTrue("'" + serializerFeature21 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature21.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature22 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature22.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature23 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature23.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + serializerFeature24 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature24.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature25 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature25.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertNotNull(serializerFeatureArray26);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[39, 104, 105, 33, 39]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(strEntrySet32);
        org.junit.Assert.assertTrue("'" + short34 + "' != '" + (short) 0 + "'", short34 == (short) 0);
        org.junit.Assert.assertNotNull(obj35);
        org.junit.Assert.assertEquals(obj35.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj35), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj35), "{}");
        org.junit.Assert.assertNotNull(serializerFeatureArray37);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[49, 48, 46, 48]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[123, 125]");
    }

    @Test
    public void test259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test259");
        com.alibaba.fastjson.parser.DefaultJSONParser defaultJSONParser1 = new com.alibaba.fastjson.parser.DefaultJSONParser(":true");
        java.util.List<com.alibaba.fastjson.parser.deserializer.ExtraTypeProvider> extraTypeProviderList2 = defaultJSONParser1.getExtraTypeProviders();
        com.alibaba.fastjson.parser.deserializer.FieldTypeResolver fieldTypeResolver3 = null;
        defaultJSONParser1.setFieldTypeResolver(fieldTypeResolver3);
        com.alibaba.fastjson.JSONObject jSONObject6 = new com.alibaba.fastjson.JSONObject(0);
        boolean boolean8 = jSONObject6.equals((java.lang.Object) (byte) 10);
        java.util.Set<java.util.Map.Entry<java.lang.String, java.lang.Object>> strEntrySet9 = jSONObject6.entrySet();
        short short11 = jSONObject6.getShortValue("UTF-8");
        java.lang.String str13 = jSONObject6.getString("null:");
        java.lang.Class<?> wildcardClass14 = jSONObject6.getClass();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.InvocationHandler invocationHandler15 = defaultJSONParser1.parseObject((java.lang.reflect.Type) wildcardClass14);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson.JSONException; message: syntax error, expect {, actual :, pos 1, line 1, column 2:true");
        } catch (com.alibaba.fastjson.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(extraTypeProviderList2);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(strEntrySet9);
        org.junit.Assert.assertTrue("'" + short11 + "' != '" + (short) 0 + "'", short11 == (short) 0);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test260");
        java.io.Writer writer0 = null;
        com.alibaba.fastjson.serializer.SerializeWriter serializeWriter2 = new com.alibaba.fastjson.serializer.SerializeWriter(writer0, 10);
        serializeWriter2.write((int) (byte) -1);
        int int5 = serializeWriter2.getBufferLength();
        serializeWriter2.writeFieldValue('a', "-9223372036854775808", (int) (byte) 10);
        serializeWriter2.writeFieldValueStringWithDoubleQuoteCheck('a', "", "''");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 10 + "'", int5 == 10);
    }

    @Test
    public void test261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test261");
        com.alibaba.fastjson.parser.DefaultJSONParser defaultJSONParser1 = new com.alibaba.fastjson.parser.DefaultJSONParser(":true");
        com.alibaba.fastjson.parser.deserializer.FieldTypeResolver fieldTypeResolver2 = defaultJSONParser1.getFieldTypeResolver();
        java.io.Writer writer3 = null;
        com.alibaba.fastjson.serializer.SerializeWriter serializeWriter5 = new com.alibaba.fastjson.serializer.SerializeWriter(writer3, 10);
        serializeWriter5.writeStringWithDoubleQuote("'WriteTabAsSpecial'", '4');
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature9 = com.alibaba.fastjson.serializer.SerializerFeature.WriteTabAsSpecial;
        com.alibaba.fastjson.serializer.SerializeFilter[] serializeFilterArray11 = new com.alibaba.fastjson.serializer.SerializeFilter[] {};
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature12 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature13 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature14 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature15 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature16 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature[] serializerFeatureArray17 = new com.alibaba.fastjson.serializer.SerializerFeature[] { serializerFeature12, serializerFeature13, serializerFeature14, serializerFeature15, serializerFeature16 };
        byte[] byteArray18 = com.alibaba.fastjson.JSON.toJSONBytes((java.lang.Object) "hi!", serializeFilterArray11, serializerFeatureArray17);
        com.alibaba.fastjson.serializer.SerializeFilter[] serializeFilterArray20 = new com.alibaba.fastjson.serializer.SerializeFilter[] {};
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature21 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature22 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature23 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature24 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature25 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature[] serializerFeatureArray26 = new com.alibaba.fastjson.serializer.SerializerFeature[] { serializerFeature21, serializerFeature22, serializerFeature23, serializerFeature24, serializerFeature25 };
        byte[] byteArray27 = com.alibaba.fastjson.JSON.toJSONBytes((java.lang.Object) "hi!", serializeFilterArray20, serializerFeatureArray26);
        java.lang.String str28 = com.alibaba.fastjson.JSON.toJSONString((java.lang.Object) serializerFeature9, serializeFilterArray11, serializerFeatureArray26);
        com.alibaba.fastjson.serializer.SerializeWriter serializeWriter29 = new com.alibaba.fastjson.serializer.SerializeWriter((java.io.Writer) serializeWriter5, serializerFeatureArray26);
        serializeWriter29.writeFloat((float) (byte) 0, false);
        defaultJSONParser1.handleResovleTask((java.lang.Object) false);
        com.alibaba.fastjson.parser.ParseContext parseContext34 = null;
        com.alibaba.fastjson.parser.ParseContext parseContext37 = defaultJSONParser1.setContext(parseContext34, (java.lang.Object) "{fastjson.serializer_buffer_threshold:{}}", (java.lang.Object) "com.alibaba.fastjson.JSONException: hi!");
        com.alibaba.fastjson.parser.DefaultJSONParser.ResolveTask resolveTask39 = new com.alibaba.fastjson.parser.DefaultJSONParser.ResolveTask(parseContext37, "fastjson.serializer_buffer_threshold");
        org.junit.Assert.assertNull(fieldTypeResolver2);
        org.junit.Assert.assertTrue("'" + serializerFeature9 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteTabAsSpecial + "'", serializerFeature9.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteTabAsSpecial));
        org.junit.Assert.assertNotNull(serializeFilterArray11);
        org.junit.Assert.assertTrue("'" + serializerFeature12 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature12.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature13 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature13.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature14 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature14.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + serializerFeature15 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature15.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature16 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature16.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertNotNull(serializerFeatureArray17);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[39, 104, 105, 33, 39]");
        org.junit.Assert.assertNotNull(serializeFilterArray20);
        org.junit.Assert.assertTrue("'" + serializerFeature21 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature21.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature22 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature22.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature23 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature23.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + serializerFeature24 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature24.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature25 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature25.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertNotNull(serializerFeatureArray26);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[39, 104, 105, 33, 39]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "'WriteTabAsSpecial'" + "'", str28, "'WriteTabAsSpecial'");
        org.junit.Assert.assertNotNull(parseContext37);
    }

    @Test
    public void test262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test262");
        char[] charArray0 = new char[] {};
        byte[] byteArray6 = com.alibaba.fastjson.util.IOUtils.decodeBase64("{}", 0, (int) (short) 1);
        int int7 = com.alibaba.fastjson.util.IOUtils.encodeUTF8(charArray0, 3089, 0, byteArray6);
        com.alibaba.fastjson.serializer.SerializeConfig serializeConfig8 = null;
        java.lang.Object obj9 = com.alibaba.fastjson.JSON.toJSON((java.lang.Object) 0, serializeConfig8);
        org.junit.Assert.assertNotNull(charArray0);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray0), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray0), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray0), "[]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertEquals("'" + obj9 + "' != '" + 0 + "'", obj9, 0);
    }

    @Test
    public void test263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test263");
        java.util.Locale locale0 = com.alibaba.fastjson.JSON.defaultLocale;
        com.alibaba.fastjson.JSON.defaultLocale = locale0;
        com.alibaba.fastjson.JSON.defaultLocale = locale0;
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_US");
    }

    @Test
    public void test264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test264");
        java.io.OutputStream outputStream0 = null;
        byte[] byteArray1 = com.alibaba.fastjson.util.IOUtils.specicalFlags_singleQuotes;
        char[] charArray4 = com.alibaba.fastjson.util.IOUtils.CA;
        int int5 = com.alibaba.fastjson.util.IOUtils.decodeUTF8(byteArray1, (int) (byte) 0, (int) (short) 1, charArray4);
        java.nio.charset.Charset charset8 = com.alibaba.fastjson.util.IOUtils.UTF8;
        java.lang.reflect.Type type9 = null;
        com.alibaba.fastjson.parser.ParserConfig parserConfig10 = null;
        com.alibaba.fastjson.parser.deserializer.ParseProcess parseProcess11 = null;
        char[] charArray16 = new char[] { '#', '#', ' ' };
        byte[] byteArray19 = com.alibaba.fastjson.util.IOUtils.decodeBase64(charArray16, 10, (int) (byte) 0);
        com.alibaba.fastjson.serializer.SerializeFilter[] serializeFilterArray21 = new com.alibaba.fastjson.serializer.SerializeFilter[] {};
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature22 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature23 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature24 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature25 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature26 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature[] serializerFeatureArray27 = new com.alibaba.fastjson.serializer.SerializerFeature[] { serializerFeature22, serializerFeature23, serializerFeature24, serializerFeature25, serializerFeature26 };
        byte[] byteArray28 = com.alibaba.fastjson.JSON.toJSONBytes((java.lang.Object) "hi!", serializeFilterArray21, serializerFeatureArray27);
        java.nio.charset.Charset charset31 = com.alibaba.fastjson.util.IOUtils.UTF8;
        java.lang.reflect.Type type32 = null;
        byte[] byteArray39 = new byte[] { (byte) 10, (byte) -1, (byte) 100, (byte) 10, (byte) 10, (byte) 1 };
        java.lang.reflect.Type type40 = null;
        com.alibaba.fastjson.parser.Feature feature41 = null;
        com.alibaba.fastjson.parser.Feature[] featureArray42 = new com.alibaba.fastjson.parser.Feature[] { feature41 };
        java.lang.Comparable<java.lang.String> strComparable43 = com.alibaba.fastjson.JSON.parseObject(byteArray39, type40, featureArray42);
        java.nio.charset.Charset charset44 = com.alibaba.fastjson.JSON.parseObject(byteArray28, 3089, (int) (short) -1, charset31, type32, featureArray42);
        com.alibaba.fastjson.JSONObject jSONObject46 = new com.alibaba.fastjson.JSONObject(0);
        boolean boolean48 = jSONObject46.equals((java.lang.Object) (byte) 10);
        java.util.Set<java.util.Map.Entry<java.lang.String, java.lang.Object>> strEntrySet49 = jSONObject46.entrySet();
        short short51 = jSONObject46.getShortValue("UTF-8");
        java.lang.String str53 = jSONObject46.getString("null:");
        java.lang.Class<?> wildcardClass54 = jSONObject46.getClass();
        com.alibaba.fastjson.parser.ParserConfig parserConfig55 = null;
        com.alibaba.fastjson.parser.deserializer.ParseProcess parseProcess56 = null;
        com.alibaba.fastjson.parser.Feature[] featureArray58 = new com.alibaba.fastjson.parser.Feature[] {};
        java.text.DateFormat dateFormat59 = com.alibaba.fastjson.JSON.parseObject(byteArray19, charset44, (java.lang.reflect.Type) wildcardClass54, parserConfig55, parseProcess56, (int) '4', featureArray58);
        java.util.AbstractCollection<java.lang.String> strCollection60 = com.alibaba.fastjson.JSON.parseObject(byteArray1, 4096, (-1), charset8, type9, parserConfig10, parseProcess11, (int) 'a', featureArray58);
        java.lang.Object obj61 = new java.lang.Object();
        com.alibaba.fastjson.JSONObject jSONObject63 = new com.alibaba.fastjson.JSONObject(0);
        boolean boolean65 = jSONObject63.equals((java.lang.Object) (byte) 10);
        java.lang.Float float67 = jSONObject63.getFloat("UTF-8");
        com.alibaba.fastjson.JSONObject jSONObject68 = new com.alibaba.fastjson.JSONObject((java.util.Map<java.lang.String, java.lang.Object>) jSONObject63);
        java.lang.Double double70 = jSONObject68.getDouble("writer not null");
        java.lang.Long long72 = jSONObject68.getLong("false");
        java.lang.Object obj73 = null;
        com.alibaba.fastjson.serializer.SerializeFilter serializeFilter74 = null;
        com.alibaba.fastjson.JSONObject jSONObject76 = new com.alibaba.fastjson.JSONObject(0);
        boolean boolean78 = jSONObject76.equals((java.lang.Object) (byte) 10);
        java.util.Set<java.util.Map.Entry<java.lang.String, java.lang.Object>> strEntrySet79 = jSONObject76.entrySet();
        com.alibaba.fastjson.serializer.SerializeFilter[] serializeFilterArray82 = new com.alibaba.fastjson.serializer.SerializeFilter[] {};
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature83 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature84 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature85 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature86 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature87 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature[] serializerFeatureArray88 = new com.alibaba.fastjson.serializer.SerializerFeature[] { serializerFeature83, serializerFeature84, serializerFeature85, serializerFeature86, serializerFeature87 };
        byte[] byteArray89 = com.alibaba.fastjson.JSON.toJSONBytes((java.lang.Object) "hi!", serializeFilterArray82, serializerFeatureArray88);
        java.lang.String str90 = com.alibaba.fastjson.JSON.toJSONStringWithDateFormat((java.lang.Object) jSONObject76, "null", serializerFeatureArray88);
        byte[] byteArray91 = com.alibaba.fastjson.JSON.toJSONBytes(obj73, serializeFilter74, serializerFeatureArray88);
        byte[] byteArray92 = com.alibaba.fastjson.JSON.toJSONBytes((java.lang.Object) jSONObject68, serializerFeatureArray88);
        // The following exception was thrown during execution in test generation
        try {
            int int93 = com.alibaba.fastjson.JSON.writeJSONString(outputStream0, charset8, obj61, serializerFeatureArray88);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[4, 4, 4, 4, 4, 4, 4, 4, 1, 1, 1, 4, 1, 1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0]");
        org.junit.Assert.assertNotNull(charArray4);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray4), "\004\000\000\000\000\000\000\000\000\000KLMNOPQRSTUVWXYZabcde0ghijklmnopqrstuvwxyz0123456789+/");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray4), "\004\000\000\000\000\000\000\000\000\000KLMNOPQRSTUVWXYZabcde0ghijklmnopqrstuvwxyz0123456789+/");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray4), "[\004, \000, \000, \000, \000, \000, \000, \000, \000, \000, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z, a, b, c, d, e, 0, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, +, /]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(charset8);
        org.junit.Assert.assertNotNull(charArray16);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray16), "## ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray16), "## ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray16), "[#, #,  ]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertNotNull(serializeFilterArray21);
        org.junit.Assert.assertTrue("'" + serializerFeature22 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature22.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature23 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature23.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature24 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature24.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + serializerFeature25 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature25.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature26 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature26.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertNotNull(serializerFeatureArray27);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[39, 104, 105, 33, 39]");
        org.junit.Assert.assertNotNull(charset31);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[10, -1, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(featureArray42);
        org.junit.Assert.assertNull(strComparable43);
        org.junit.Assert.assertNull(charset44);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(strEntrySet49);
        org.junit.Assert.assertTrue("'" + short51 + "' != '" + (short) 0 + "'", short51 == (short) 0);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(featureArray58);
        org.junit.Assert.assertNull(dateFormat59);
        org.junit.Assert.assertNull(strCollection60);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNull(float67);
        org.junit.Assert.assertNull(double70);
        org.junit.Assert.assertNull(long72);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(strEntrySet79);
        org.junit.Assert.assertNotNull(serializeFilterArray82);
        org.junit.Assert.assertTrue("'" + serializerFeature83 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature83.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature84 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature84.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature85 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature85.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + serializerFeature86 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature86.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature87 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature87.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertNotNull(serializerFeatureArray88);
        org.junit.Assert.assertNotNull(byteArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray89), "[39, 104, 105, 33, 39]");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "{}" + "'", str90, "{}");
        org.junit.Assert.assertNotNull(byteArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray91), "[110, 117, 108, 108]");
        org.junit.Assert.assertNotNull(byteArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray92), "[123, 125]");
    }

    @Test
    public void test265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test265");
        com.alibaba.fastjson.parser.DefaultJSONParser defaultJSONParser1 = new com.alibaba.fastjson.parser.DefaultJSONParser(":true");
        com.alibaba.fastjson.parser.ParseContext parseContext2 = null;
        defaultJSONParser1.setContext(parseContext2);
        com.alibaba.fastjson.JSONObject jSONObject5 = new com.alibaba.fastjson.JSONObject(0);
        boolean boolean7 = jSONObject5.equals((java.lang.Object) (byte) 10);
        java.util.Set<java.util.Map.Entry<java.lang.String, java.lang.Object>> strEntrySet8 = jSONObject5.entrySet();
        short short10 = jSONObject5.getShortValue("UTF-8");
        java.lang.String str12 = jSONObject5.getString("null:");
        java.lang.Class<?> wildcardClass13 = jSONObject5.getClass();
        com.alibaba.fastjson.JSONObject jSONObject15 = new com.alibaba.fastjson.JSONObject(0);
        boolean boolean17 = jSONObject15.equals((java.lang.Object) (byte) 10);
        java.lang.Integer int19 = jSONObject15.getInteger("hi!");
        boolean boolean21 = jSONObject15.getBooleanValue(":false");
        java.util.Collection<java.lang.Object> objCollection22 = jSONObject15.values();
        com.alibaba.fastjson.JSONObject jSONObject24 = new com.alibaba.fastjson.JSONObject(0);
        boolean boolean26 = jSONObject24.equals((java.lang.Object) (byte) 10);
        java.lang.Float float28 = jSONObject24.getFloat("UTF-8");
        com.alibaba.fastjson.JSONObject jSONObject29 = new com.alibaba.fastjson.JSONObject((java.util.Map<java.lang.String, java.lang.Object>) jSONObject24);
        java.lang.Double double31 = jSONObject24.getDouble("\"\"");
        java.sql.Timestamp timestamp33 = jSONObject24.getTimestamp("Negative initial size:");
        java.util.Set<java.lang.String> strSet34 = jSONObject24.keySet();
        java.lang.Double double36 = jSONObject24.getDouble(":false");
        com.alibaba.fastjson.JSONObject jSONObject39 = new com.alibaba.fastjson.JSONObject(0);
        boolean boolean41 = jSONObject39.equals((java.lang.Object) (byte) 10);
        java.lang.Float float43 = jSONObject39.getFloat("UTF-8");
        com.alibaba.fastjson.parser.ParserConfig parserConfig44 = null;
        java.lang.Object obj45 = com.alibaba.fastjson.JSON.toJSON((java.lang.Object) jSONObject39, parserConfig44);
        com.alibaba.fastjson.JSONObject jSONObject47 = jSONObject39.fluentRemove((java.lang.Object) 1.0d);
        java.lang.Object obj48 = jSONObject24.putIfAbsent("fastjson.serializer_buffer_threshold", (java.lang.Object) jSONObject39);
        com.alibaba.fastjson.JSONObject jSONObject50 = new com.alibaba.fastjson.JSONObject(0);
        boolean boolean52 = jSONObject50.equals((java.lang.Object) (byte) 10);
        java.lang.Float float54 = jSONObject50.getFloat("UTF-8");
        com.alibaba.fastjson.JSONObject jSONObject55 = new com.alibaba.fastjson.JSONObject((java.util.Map<java.lang.String, java.lang.Object>) jSONObject50);
        java.lang.Double double57 = jSONObject50.getDouble("\"\"");
        java.sql.Timestamp timestamp59 = jSONObject50.getTimestamp("Negative initial size:");
        java.util.Set<java.lang.String> strSet60 = jSONObject50.keySet();
        java.lang.Object obj62 = jSONObject39.getOrDefault((java.lang.Object) jSONObject50, (java.lang.Object) (short) 0);
        java.util.Set<java.util.Map.Entry<java.lang.String, java.lang.Object>> strEntrySet63 = jSONObject50.entrySet();
        // The following exception was thrown during execution in test generation
        try {
            defaultJSONParser1.parseArray((java.lang.reflect.Type) wildcardClass13, (java.util.Collection) objCollection22, (java.lang.Object) strEntrySet63);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson.JSONException; message: field [] expect '[', but :, pos 1, line 1, column 2:true");
        } catch (com.alibaba.fastjson.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(strEntrySet8);
        org.junit.Assert.assertTrue("'" + short10 + "' != '" + (short) 0 + "'", short10 == (short) 0);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(int19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(objCollection22);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(float28);
        org.junit.Assert.assertNull(double31);
        org.junit.Assert.assertNull(timestamp33);
        org.junit.Assert.assertNotNull(strSet34);
        org.junit.Assert.assertNull(double36);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNull(float43);
        org.junit.Assert.assertNotNull(obj45);
        org.junit.Assert.assertEquals(obj45.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj45), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj45), "{}");
        org.junit.Assert.assertNotNull(jSONObject47);
        org.junit.Assert.assertNull(obj48);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNull(float54);
        org.junit.Assert.assertNull(double57);
        org.junit.Assert.assertNull(timestamp59);
        org.junit.Assert.assertNotNull(strSet60);
        org.junit.Assert.assertEquals("'" + obj62 + "' != '" + (short) 0 + "'", obj62, (short) 0);
        org.junit.Assert.assertNotNull(strEntrySet63);
    }

    @Test
    public void test266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test266");
        java.io.Writer writer0 = null;
        com.alibaba.fastjson.serializer.SerializeWriter serializeWriter2 = new com.alibaba.fastjson.serializer.SerializeWriter(writer0, 10);
        serializeWriter2.write((int) (byte) -1);
        java.lang.String[] strArray35 = new java.lang.String[] { ":true", "1.2.76", "serialize exceeded MAX_OUTPUT_LENGTH=", "-2147483648", ", minimumCapacity=", "\"-9223372036854775808\"", "@type", "\"\"", "null:", "null:", "1.2.76", "Negative initial size:", ":true", "-9223372036854775808", "fastjson.serializer_buffer_threshold", "fastjson.compatibleWithFieldName", "'WriteMapNullValue'", "1.2.76", "UTF-8", "fastjson.compatibleWithJavaBean", "1.2.76", "Negative initial size:", "1.2.76", "\"-9223372036854775808\"", "''", "@type", "fastjson.serializer_buffer_threshold", "0.0", "1.2.76", ":false" };
        java.util.ArrayList<java.lang.String> strList36 = new java.util.ArrayList<java.lang.String>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList36, strArray35);
        serializeWriter2.write((java.util.List<java.lang.String>) strList36);
        serializeWriter2.writeLongAndChar((long) 'a', '#');
        com.alibaba.fastjson.serializer.SerializeFilter[] serializeFilterArray46 = new com.alibaba.fastjson.serializer.SerializeFilter[] {};
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature47 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature48 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature49 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature50 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature51 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature[] serializerFeatureArray52 = new com.alibaba.fastjson.serializer.SerializerFeature[] { serializerFeature47, serializerFeature48, serializerFeature49, serializerFeature50, serializerFeature51 };
        byte[] byteArray53 = com.alibaba.fastjson.JSON.toJSONBytes((java.lang.Object) "hi!", serializeFilterArray46, serializerFeatureArray52);
        java.lang.String str54 = com.alibaba.fastjson.JSON.toJSONStringWithDateFormat((java.lang.Object) "Negative initial size:", ", minimumCapacity=", serializerFeatureArray52);
        com.alibaba.fastjson.serializer.SerializeWriter serializeWriter55 = new com.alibaba.fastjson.serializer.SerializeWriter((java.io.Writer) serializeWriter2, (int) (short) 10, serializerFeatureArray52);
        com.alibaba.fastjson.JSONObject jSONObject59 = new com.alibaba.fastjson.JSONObject(0);
        boolean boolean61 = jSONObject59.equals((java.lang.Object) (byte) 10);
        java.lang.Float float63 = jSONObject59.getFloat("UTF-8");
        com.alibaba.fastjson.JSONObject jSONObject64 = new com.alibaba.fastjson.JSONObject((java.util.Map<java.lang.String, java.lang.Object>) jSONObject59);
        java.lang.Double double66 = jSONObject64.getDouble("writer not null");
        java.lang.Long long68 = jSONObject64.getLong("false");
        java.lang.Object obj69 = null;
        com.alibaba.fastjson.serializer.SerializeFilter serializeFilter70 = null;
        com.alibaba.fastjson.JSONObject jSONObject72 = new com.alibaba.fastjson.JSONObject(0);
        boolean boolean74 = jSONObject72.equals((java.lang.Object) (byte) 10);
        java.util.Set<java.util.Map.Entry<java.lang.String, java.lang.Object>> strEntrySet75 = jSONObject72.entrySet();
        com.alibaba.fastjson.serializer.SerializeFilter[] serializeFilterArray78 = new com.alibaba.fastjson.serializer.SerializeFilter[] {};
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature79 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature80 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature81 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature82 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature83 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature[] serializerFeatureArray84 = new com.alibaba.fastjson.serializer.SerializerFeature[] { serializerFeature79, serializerFeature80, serializerFeature81, serializerFeature82, serializerFeature83 };
        byte[] byteArray85 = com.alibaba.fastjson.JSON.toJSONBytes((java.lang.Object) "hi!", serializeFilterArray78, serializerFeatureArray84);
        java.lang.String str86 = com.alibaba.fastjson.JSON.toJSONStringWithDateFormat((java.lang.Object) jSONObject72, "null", serializerFeatureArray84);
        byte[] byteArray87 = com.alibaba.fastjson.JSON.toJSONBytes(obj69, serializeFilter70, serializerFeatureArray84);
        byte[] byteArray88 = com.alibaba.fastjson.JSON.toJSONBytes((java.lang.Object) jSONObject64, serializerFeatureArray84);
        com.alibaba.fastjson.JSON.writeJSONString((java.io.Writer) serializeWriter2, (java.lang.Object) 10.0d, (-1), serializerFeatureArray84);
        com.alibaba.fastjson.serializer.SerializeWriter serializeWriter91 = serializeWriter2.append('4');
        boolean boolean93 = serializeWriter2.isEnabled((int) (byte) 10);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(serializeFilterArray46);
        org.junit.Assert.assertTrue("'" + serializerFeature47 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature47.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature48 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature48.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature49 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature49.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + serializerFeature50 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature50.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature51 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature51.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertNotNull(serializerFeatureArray52);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[39, 104, 105, 33, 39]");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "'Negative initial size:'" + "'", str54, "'Negative initial size:'");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNull(float63);
        org.junit.Assert.assertNull(double66);
        org.junit.Assert.assertNull(long68);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(strEntrySet75);
        org.junit.Assert.assertNotNull(serializeFilterArray78);
        org.junit.Assert.assertTrue("'" + serializerFeature79 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature79.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature80 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature80.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature81 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature81.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + serializerFeature82 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature82.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature83 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature83.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertNotNull(serializerFeatureArray84);
        org.junit.Assert.assertNotNull(byteArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray85), "[39, 104, 105, 33, 39]");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "{}" + "'", str86, "{}");
        org.junit.Assert.assertNotNull(byteArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray87), "[110, 117, 108, 108]");
        org.junit.Assert.assertNotNull(byteArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray88), "[123, 125]");
        org.junit.Assert.assertNotNull(serializeWriter91);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
    }

    @Test
    public void test267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test267");
        com.alibaba.fastjson.serializer.SerializeConfig serializeConfig1 = null;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature2 = com.alibaba.fastjson.serializer.SerializerFeature.WriteTabAsSpecial;
        com.alibaba.fastjson.serializer.SerializeFilter[] serializeFilterArray4 = new com.alibaba.fastjson.serializer.SerializeFilter[] {};
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature5 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature6 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature7 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature8 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature9 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature[] serializerFeatureArray10 = new com.alibaba.fastjson.serializer.SerializerFeature[] { serializerFeature5, serializerFeature6, serializerFeature7, serializerFeature8, serializerFeature9 };
        byte[] byteArray11 = com.alibaba.fastjson.JSON.toJSONBytes((java.lang.Object) "hi!", serializeFilterArray4, serializerFeatureArray10);
        com.alibaba.fastjson.serializer.SerializeFilter[] serializeFilterArray13 = new com.alibaba.fastjson.serializer.SerializeFilter[] {};
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature14 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature15 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature16 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature17 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature18 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature[] serializerFeatureArray19 = new com.alibaba.fastjson.serializer.SerializerFeature[] { serializerFeature14, serializerFeature15, serializerFeature16, serializerFeature17, serializerFeature18 };
        byte[] byteArray20 = com.alibaba.fastjson.JSON.toJSONBytes((java.lang.Object) "hi!", serializeFilterArray13, serializerFeatureArray19);
        java.lang.String str21 = com.alibaba.fastjson.JSON.toJSONString((java.lang.Object) serializerFeature2, serializeFilterArray4, serializerFeatureArray19);
        java.lang.Object obj24 = null;
        com.alibaba.fastjson.serializer.SerializeConfig serializeConfig25 = null;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature27 = com.alibaba.fastjson.serializer.SerializerFeature.WriteTabAsSpecial;
        com.alibaba.fastjson.serializer.SerializeFilter[] serializeFilterArray29 = new com.alibaba.fastjson.serializer.SerializeFilter[] {};
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature30 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature31 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature32 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature33 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature34 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature[] serializerFeatureArray35 = new com.alibaba.fastjson.serializer.SerializerFeature[] { serializerFeature30, serializerFeature31, serializerFeature32, serializerFeature33, serializerFeature34 };
        byte[] byteArray36 = com.alibaba.fastjson.JSON.toJSONBytes((java.lang.Object) "hi!", serializeFilterArray29, serializerFeatureArray35);
        com.alibaba.fastjson.serializer.SerializeFilter[] serializeFilterArray38 = new com.alibaba.fastjson.serializer.SerializeFilter[] {};
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature39 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature40 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature41 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature42 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature43 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature[] serializerFeatureArray44 = new com.alibaba.fastjson.serializer.SerializerFeature[] { serializerFeature39, serializerFeature40, serializerFeature41, serializerFeature42, serializerFeature43 };
        byte[] byteArray45 = com.alibaba.fastjson.JSON.toJSONBytes((java.lang.Object) "hi!", serializeFilterArray38, serializerFeatureArray44);
        java.lang.String str46 = com.alibaba.fastjson.JSON.toJSONString((java.lang.Object) serializerFeature27, serializeFilterArray29, serializerFeatureArray44);
        byte[] byteArray47 = com.alibaba.fastjson.JSON.toJSONBytes(obj24, serializeConfig25, (int) (byte) -1, serializerFeatureArray44);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str48 = com.alibaba.fastjson.JSON.toJSONString((java.lang.Object) "1.0", serializeConfig1, serializeFilterArray4, "false", (int) (short) 10, serializerFeatureArray44);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + serializerFeature2 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteTabAsSpecial + "'", serializerFeature2.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteTabAsSpecial));
        org.junit.Assert.assertNotNull(serializeFilterArray4);
        org.junit.Assert.assertTrue("'" + serializerFeature5 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature5.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature6 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature6.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature7 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature7.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + serializerFeature8 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature8.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature9 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature9.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertNotNull(serializerFeatureArray10);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[39, 104, 105, 33, 39]");
        org.junit.Assert.assertNotNull(serializeFilterArray13);
        org.junit.Assert.assertTrue("'" + serializerFeature14 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature14.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature15 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature15.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature16 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature16.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + serializerFeature17 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature17.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature18 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature18.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertNotNull(serializerFeatureArray19);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[39, 104, 105, 33, 39]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "'WriteTabAsSpecial'" + "'", str21, "'WriteTabAsSpecial'");
        org.junit.Assert.assertTrue("'" + serializerFeature27 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteTabAsSpecial + "'", serializerFeature27.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteTabAsSpecial));
        org.junit.Assert.assertNotNull(serializeFilterArray29);
        org.junit.Assert.assertTrue("'" + serializerFeature30 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature30.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature31 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature31.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature32 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature32.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + serializerFeature33 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature33.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature34 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature34.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertNotNull(serializerFeatureArray35);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[39, 104, 105, 33, 39]");
        org.junit.Assert.assertNotNull(serializeFilterArray38);
        org.junit.Assert.assertTrue("'" + serializerFeature39 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature39.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature40 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature40.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature41 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature41.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + serializerFeature42 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature42.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature43 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature43.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertNotNull(serializerFeatureArray44);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[39, 104, 105, 33, 39]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "'WriteTabAsSpecial'" + "'", str46, "'WriteTabAsSpecial'");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[110, 117, 108, 108]");
    }

    @Test
    public void test268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test268");
        com.alibaba.fastjson.JSONObject jSONObject2 = new com.alibaba.fastjson.JSONObject(0);
        boolean boolean4 = jSONObject2.equals((java.lang.Object) (byte) 10);
        java.util.Set<java.util.Map.Entry<java.lang.String, java.lang.Object>> strEntrySet5 = jSONObject2.entrySet();
        short short7 = jSONObject2.getShortValue("UTF-8");
        java.lang.String str9 = jSONObject2.getString("null:");
        java.lang.Class<?> wildcardClass10 = jSONObject2.getClass();
        com.alibaba.fastjson.JSONObject jSONObject12 = new com.alibaba.fastjson.JSONObject(0);
        boolean boolean14 = jSONObject12.equals((java.lang.Object) (byte) 10);
        java.util.Set<java.util.Map.Entry<java.lang.String, java.lang.Object>> strEntrySet15 = jSONObject12.entrySet();
        short short17 = jSONObject12.getShortValue("UTF-8");
        java.lang.String str19 = jSONObject12.getString("null:");
        java.lang.Class<?> wildcardClass20 = jSONObject12.getClass();
        java.lang.reflect.Type[] typeArray21 = new java.lang.reflect.Type[] { wildcardClass10, wildcardClass20 };
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.Object> objList22 = com.alibaba.fastjson.JSON.parseArray("com.alibaba.fastjson.JSONException: hi!", typeArray21);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson.JSONException; message: syntax error : error");
        } catch (com.alibaba.fastjson.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(strEntrySet5);
        org.junit.Assert.assertTrue("'" + short7 + "' != '" + (short) 0 + "'", short7 == (short) 0);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(strEntrySet15);
        org.junit.Assert.assertTrue("'" + short17 + "' != '" + (short) 0 + "'", short17 == (short) 0);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertNotNull(typeArray21);
    }

    @Test
    public void test269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test269");
        com.alibaba.fastjson.JSONObject jSONObject1 = new com.alibaba.fastjson.JSONObject(0);
        boolean boolean3 = jSONObject1.equals((java.lang.Object) (byte) 10);
        java.lang.Float float5 = jSONObject1.getFloat("UTF-8");
        com.alibaba.fastjson.JSONObject jSONObject6 = new com.alibaba.fastjson.JSONObject((java.util.Map<java.lang.String, java.lang.Object>) jSONObject1);
        java.lang.Double double8 = jSONObject1.getDouble("\"\"");
        java.math.BigDecimal bigDecimal10 = jSONObject1.getBigDecimal("false");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(float5);
        org.junit.Assert.assertNull(double8);
        org.junit.Assert.assertNull(bigDecimal10);
    }

    @Test
    public void test270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test270");
        java.io.OutputStream outputStream0 = null;
        java.nio.charset.Charset charset1 = com.alibaba.fastjson.util.IOUtils.UTF8;
        com.alibaba.fastjson.JSONObject jSONObject3 = new com.alibaba.fastjson.JSONObject(0);
        boolean boolean5 = jSONObject3.equals((java.lang.Object) (byte) 10);
        java.lang.Float float7 = jSONObject3.getFloat("UTF-8");
        com.alibaba.fastjson.JSONObject jSONObject8 = new com.alibaba.fastjson.JSONObject((java.util.Map<java.lang.String, java.lang.Object>) jSONObject3);
        com.alibaba.fastjson.JSONObject jSONObject9 = jSONObject8.fluentClear();
        com.alibaba.fastjson.serializer.SerializeConfig serializeConfig10 = null;
        java.lang.Object obj11 = null;
        com.alibaba.fastjson.serializer.SerializeConfig serializeConfig12 = null;
        com.alibaba.fastjson.serializer.SerializeFilter[] serializeFilterArray13 = new com.alibaba.fastjson.serializer.SerializeFilter[] {};
        com.alibaba.fastjson.serializer.SerializeFilter[] serializeFilterArray17 = new com.alibaba.fastjson.serializer.SerializeFilter[] {};
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature18 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature19 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature20 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature21 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature22 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature[] serializerFeatureArray23 = new com.alibaba.fastjson.serializer.SerializerFeature[] { serializerFeature18, serializerFeature19, serializerFeature20, serializerFeature21, serializerFeature22 };
        byte[] byteArray24 = com.alibaba.fastjson.JSON.toJSONBytes((java.lang.Object) "hi!", serializeFilterArray17, serializerFeatureArray23);
        java.lang.String str25 = com.alibaba.fastjson.JSON.toJSONString(obj11, serializeConfig12, serializeFilterArray13, "\uffffa", (int) '#', serializerFeatureArray23);
        java.io.Writer writer28 = null;
        com.alibaba.fastjson.serializer.SerializeWriter serializeWriter30 = new com.alibaba.fastjson.serializer.SerializeWriter(writer28, 10);
        serializeWriter30.write((int) (byte) -1);
        java.lang.String[] strArray63 = new java.lang.String[] { ":true", "1.2.76", "serialize exceeded MAX_OUTPUT_LENGTH=", "-2147483648", ", minimumCapacity=", "\"-9223372036854775808\"", "@type", "\"\"", "null:", "null:", "1.2.76", "Negative initial size:", ":true", "-9223372036854775808", "fastjson.serializer_buffer_threshold", "fastjson.compatibleWithFieldName", "'WriteMapNullValue'", "1.2.76", "UTF-8", "fastjson.compatibleWithJavaBean", "1.2.76", "Negative initial size:", "1.2.76", "\"-9223372036854775808\"", "''", "@type", "fastjson.serializer_buffer_threshold", "0.0", "1.2.76", ":false" };
        java.util.ArrayList<java.lang.String> strList64 = new java.util.ArrayList<java.lang.String>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList64, strArray63);
        serializeWriter30.write((java.util.List<java.lang.String>) strList64);
        serializeWriter30.writeLongAndChar((long) 'a', '#');
        com.alibaba.fastjson.serializer.SerializeFilter[] serializeFilterArray74 = new com.alibaba.fastjson.serializer.SerializeFilter[] {};
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature75 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature76 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature77 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature78 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature79 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature[] serializerFeatureArray80 = new com.alibaba.fastjson.serializer.SerializerFeature[] { serializerFeature75, serializerFeature76, serializerFeature77, serializerFeature78, serializerFeature79 };
        byte[] byteArray81 = com.alibaba.fastjson.JSON.toJSONBytes((java.lang.Object) "hi!", serializeFilterArray74, serializerFeatureArray80);
        java.lang.String str82 = com.alibaba.fastjson.JSON.toJSONStringWithDateFormat((java.lang.Object) "Negative initial size:", ", minimumCapacity=", serializerFeatureArray80);
        com.alibaba.fastjson.serializer.SerializeWriter serializeWriter83 = new com.alibaba.fastjson.serializer.SerializeWriter((java.io.Writer) serializeWriter30, (int) (short) 10, serializerFeatureArray80);
        // The following exception was thrown during execution in test generation
        try {
            int int84 = com.alibaba.fastjson.JSON.writeJSONString(outputStream0, charset1, (java.lang.Object) jSONObject8, serializeConfig10, serializeFilterArray13, "\"\"", (int) (short) 10, serializerFeatureArray80);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(float7);
        org.junit.Assert.assertNotNull(jSONObject9);
        org.junit.Assert.assertNotNull(serializeFilterArray13);
        org.junit.Assert.assertNotNull(serializeFilterArray17);
        org.junit.Assert.assertTrue("'" + serializerFeature18 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature18.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature19 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature19.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature20 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature20.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + serializerFeature21 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature21.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature22 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature22.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertNotNull(serializerFeatureArray23);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[39, 104, 105, 33, 39]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "null" + "'", str25, "null");
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(serializeFilterArray74);
        org.junit.Assert.assertTrue("'" + serializerFeature75 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature75.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature76 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature76.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature77 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature77.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + serializerFeature78 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature78.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature79 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature79.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertNotNull(serializerFeatureArray80);
        org.junit.Assert.assertNotNull(byteArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray81), "[39, 104, 105, 33, 39]");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "'Negative initial size:'" + "'", str82, "'Negative initial size:'");
    }

    @Test
    public void test271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test271");
        com.alibaba.fastjson.serializer.SerializeWriter serializeWriter1 = new com.alibaba.fastjson.serializer.SerializeWriter((int) (short) 1);
    }

    @Test
    public void test272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test272");
        java.io.Writer writer2 = null;
        com.alibaba.fastjson.serializer.SerializeWriter serializeWriter4 = new com.alibaba.fastjson.serializer.SerializeWriter(writer2, 10);
        serializeWriter4.write((int) (byte) -1);
        serializeWriter4.expandCapacity((int) (short) 10);
        java.io.Writer writer9 = null;
        com.alibaba.fastjson.serializer.SerializeWriter serializeWriter11 = new com.alibaba.fastjson.serializer.SerializeWriter(writer9, 10);
        serializeWriter11.write((int) (byte) -1);
        serializeWriter11.expandCapacity((int) (short) 10);
        char[] charArray19 = new char[] { '#', '#', ' ' };
        byte[] byteArray22 = com.alibaba.fastjson.util.IOUtils.decodeBase64(charArray19, 10, (int) (byte) 0);
        serializeWriter11.write(charArray19);
        serializeWriter4.writeString(charArray19);
        // The following exception was thrown during execution in test generation
        try {
            com.alibaba.fastjson.util.IOUtils.getChars((byte) 1, (int) (short) 100, charArray19);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 99");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray19);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray19), "## ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray19), "## ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray19), "[#, #,  ]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
    }

    @Test
    public void test273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test273");
        com.alibaba.fastjson.JSONObject jSONObject1 = new com.alibaba.fastjson.JSONObject(0);
        boolean boolean3 = jSONObject1.equals((java.lang.Object) (byte) 10);
        java.lang.Float float5 = jSONObject1.getFloat("UTF-8");
        com.alibaba.fastjson.parser.ParserConfig parserConfig6 = null;
        java.lang.Object obj7 = com.alibaba.fastjson.JSON.toJSON((java.lang.Object) jSONObject1, parserConfig6);
        java.lang.reflect.Method method9 = null;
        com.alibaba.fastjson.serializer.SerializerFeature[] serializerFeatureArray11 = new com.alibaba.fastjson.serializer.SerializerFeature[] {};
        byte[] byteArray12 = com.alibaba.fastjson.JSON.toJSONBytes((java.lang.Object) 10.0d, serializerFeatureArray11);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj13 = jSONObject1.invoke((java.lang.Object) (-1), method9, (java.lang.Object[]) serializerFeatureArray11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(float5);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "{}");
        org.junit.Assert.assertNotNull(serializerFeatureArray11);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[49, 48, 46, 48]");
    }

    @Test
    public void test274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test274");
        com.alibaba.fastjson.JSONObject jSONObject1 = new com.alibaba.fastjson.JSONObject(0);
        boolean boolean3 = jSONObject1.equals((java.lang.Object) (byte) 10);
        java.util.Set<java.util.Map.Entry<java.lang.String, java.lang.Object>> strEntrySet4 = jSONObject1.entrySet();
        short short6 = jSONObject1.getShortValue("false");
        float float8 = jSONObject1.getFloatValue("must >");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(strEntrySet4);
        org.junit.Assert.assertTrue("'" + short6 + "' != '" + (short) 0 + "'", short6 == (short) 0);
        org.junit.Assert.assertTrue("'" + float8 + "' != '" + 0.0f + "'", float8 == 0.0f);
    }

    @Test
    public void test275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test275");
        boolean boolean1 = com.alibaba.fastjson.JSON.isValidArray("null:");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test276");
        java.io.OutputStream outputStream0 = null;
        byte[] byteArray1 = com.alibaba.fastjson.util.IOUtils.specicalFlags_singleQuotes;
        char[] charArray4 = com.alibaba.fastjson.util.IOUtils.CA;
        int int5 = com.alibaba.fastjson.util.IOUtils.decodeUTF8(byteArray1, (int) (byte) 0, (int) (short) 1, charArray4);
        java.nio.charset.Charset charset8 = com.alibaba.fastjson.util.IOUtils.UTF8;
        java.lang.reflect.Type type9 = null;
        com.alibaba.fastjson.parser.ParserConfig parserConfig10 = null;
        com.alibaba.fastjson.parser.deserializer.ParseProcess parseProcess11 = null;
        char[] charArray16 = new char[] { '#', '#', ' ' };
        byte[] byteArray19 = com.alibaba.fastjson.util.IOUtils.decodeBase64(charArray16, 10, (int) (byte) 0);
        com.alibaba.fastjson.serializer.SerializeFilter[] serializeFilterArray21 = new com.alibaba.fastjson.serializer.SerializeFilter[] {};
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature22 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature23 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature24 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature25 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature26 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature[] serializerFeatureArray27 = new com.alibaba.fastjson.serializer.SerializerFeature[] { serializerFeature22, serializerFeature23, serializerFeature24, serializerFeature25, serializerFeature26 };
        byte[] byteArray28 = com.alibaba.fastjson.JSON.toJSONBytes((java.lang.Object) "hi!", serializeFilterArray21, serializerFeatureArray27);
        java.nio.charset.Charset charset31 = com.alibaba.fastjson.util.IOUtils.UTF8;
        java.lang.reflect.Type type32 = null;
        byte[] byteArray39 = new byte[] { (byte) 10, (byte) -1, (byte) 100, (byte) 10, (byte) 10, (byte) 1 };
        java.lang.reflect.Type type40 = null;
        com.alibaba.fastjson.parser.Feature feature41 = null;
        com.alibaba.fastjson.parser.Feature[] featureArray42 = new com.alibaba.fastjson.parser.Feature[] { feature41 };
        java.lang.Comparable<java.lang.String> strComparable43 = com.alibaba.fastjson.JSON.parseObject(byteArray39, type40, featureArray42);
        java.nio.charset.Charset charset44 = com.alibaba.fastjson.JSON.parseObject(byteArray28, 3089, (int) (short) -1, charset31, type32, featureArray42);
        com.alibaba.fastjson.JSONObject jSONObject46 = new com.alibaba.fastjson.JSONObject(0);
        boolean boolean48 = jSONObject46.equals((java.lang.Object) (byte) 10);
        java.util.Set<java.util.Map.Entry<java.lang.String, java.lang.Object>> strEntrySet49 = jSONObject46.entrySet();
        short short51 = jSONObject46.getShortValue("UTF-8");
        java.lang.String str53 = jSONObject46.getString("null:");
        java.lang.Class<?> wildcardClass54 = jSONObject46.getClass();
        com.alibaba.fastjson.parser.ParserConfig parserConfig55 = null;
        com.alibaba.fastjson.parser.deserializer.ParseProcess parseProcess56 = null;
        com.alibaba.fastjson.parser.Feature[] featureArray58 = new com.alibaba.fastjson.parser.Feature[] {};
        java.text.DateFormat dateFormat59 = com.alibaba.fastjson.JSON.parseObject(byteArray19, charset44, (java.lang.reflect.Type) wildcardClass54, parserConfig55, parseProcess56, (int) '4', featureArray58);
        java.util.AbstractCollection<java.lang.String> strCollection60 = com.alibaba.fastjson.JSON.parseObject(byteArray1, 4096, (-1), charset8, type9, parserConfig10, parseProcess11, (int) 'a', featureArray58);
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature61 = com.alibaba.fastjson.serializer.SerializerFeature.SortField;
        com.alibaba.fastjson.JSONObject jSONObject63 = new com.alibaba.fastjson.JSONObject(0);
        boolean boolean65 = jSONObject63.equals((java.lang.Object) (byte) 10);
        java.util.Set<java.util.Map.Entry<java.lang.String, java.lang.Object>> strEntrySet66 = jSONObject63.entrySet();
        short short68 = jSONObject63.getShortValue("false");
        java.lang.Object obj69 = com.alibaba.fastjson.JSON.toJSON((java.lang.Object) jSONObject63);
        com.alibaba.fastjson.serializer.SerializerFeature[] serializerFeatureArray71 = new com.alibaba.fastjson.serializer.SerializerFeature[] {};
        byte[] byteArray72 = com.alibaba.fastjson.JSON.toJSONBytes((java.lang.Object) 10.0d, serializerFeatureArray71);
        byte[] byteArray73 = com.alibaba.fastjson.JSON.toJSONBytes((java.lang.Object) jSONObject63, serializerFeatureArray71);
        // The following exception was thrown during execution in test generation
        try {
            int int74 = com.alibaba.fastjson.JSON.writeJSONString(outputStream0, charset8, (java.lang.Object) serializerFeature61, serializerFeatureArray71);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[4, 4, 4, 4, 4, 4, 4, 4, 1, 1, 1, 4, 1, 1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0]");
        org.junit.Assert.assertNotNull(charArray4);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray4), "\004\000\000\000\000\000\000\000\000\000KLMNOPQRSTUVWXYZabcde0ghijklmnopqrstuvwxyz0123456789+/");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray4), "\004\000\000\000\000\000\000\000\000\000KLMNOPQRSTUVWXYZabcde0ghijklmnopqrstuvwxyz0123456789+/");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray4), "[\004, \000, \000, \000, \000, \000, \000, \000, \000, \000, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z, a, b, c, d, e, 0, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, +, /]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(charset8);
        org.junit.Assert.assertNotNull(charArray16);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray16), "## ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray16), "## ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray16), "[#, #,  ]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertNotNull(serializeFilterArray21);
        org.junit.Assert.assertTrue("'" + serializerFeature22 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature22.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature23 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature23.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature24 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature24.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + serializerFeature25 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature25.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature26 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature26.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertNotNull(serializerFeatureArray27);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[39, 104, 105, 33, 39]");
        org.junit.Assert.assertNotNull(charset31);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[10, -1, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(featureArray42);
        org.junit.Assert.assertNull(strComparable43);
        org.junit.Assert.assertNull(charset44);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(strEntrySet49);
        org.junit.Assert.assertTrue("'" + short51 + "' != '" + (short) 0 + "'", short51 == (short) 0);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(featureArray58);
        org.junit.Assert.assertNull(dateFormat59);
        org.junit.Assert.assertNull(strCollection60);
        org.junit.Assert.assertTrue("'" + serializerFeature61 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.SortField + "'", serializerFeature61.equals(com.alibaba.fastjson.serializer.SerializerFeature.SortField));
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(strEntrySet66);
        org.junit.Assert.assertTrue("'" + short68 + "' != '" + (short) 0 + "'", short68 == (short) 0);
        org.junit.Assert.assertNotNull(obj69);
        org.junit.Assert.assertEquals(obj69.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj69), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj69), "{}");
        org.junit.Assert.assertNotNull(serializerFeatureArray71);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[49, 48, 46, 48]");
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[123, 125]");
    }

    @Test
    public void test277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test277");
        java.io.Writer writer0 = null;
        com.alibaba.fastjson.serializer.SerializeWriter serializeWriter2 = new com.alibaba.fastjson.serializer.SerializeWriter(writer0, 10);
        serializeWriter2.write((int) (byte) -1);
        serializeWriter2.expandCapacity((int) (short) 10);
        char[] charArray10 = new char[] { '#', '#', ' ' };
        byte[] byteArray13 = com.alibaba.fastjson.util.IOUtils.decodeBase64(charArray10, 10, (int) (byte) 0);
        serializeWriter2.write(charArray10);
        com.alibaba.fastjson.serializer.SerializeConfig serializeConfig15 = null;
        com.alibaba.fastjson.JSONObject jSONObject17 = new com.alibaba.fastjson.JSONObject(0);
        boolean boolean19 = jSONObject17.equals((java.lang.Object) (byte) 10);
        java.lang.Float float21 = jSONObject17.getFloat("UTF-8");
        com.alibaba.fastjson.JSONObject jSONObject22 = new com.alibaba.fastjson.JSONObject((java.util.Map<java.lang.String, java.lang.Object>) jSONObject17);
        java.lang.Double double24 = jSONObject22.getDouble("writer not null");
        java.lang.Long long26 = jSONObject22.getLong("false");
        java.lang.Object obj27 = null;
        com.alibaba.fastjson.serializer.SerializeFilter serializeFilter28 = null;
        com.alibaba.fastjson.JSONObject jSONObject30 = new com.alibaba.fastjson.JSONObject(0);
        boolean boolean32 = jSONObject30.equals((java.lang.Object) (byte) 10);
        java.util.Set<java.util.Map.Entry<java.lang.String, java.lang.Object>> strEntrySet33 = jSONObject30.entrySet();
        com.alibaba.fastjson.serializer.SerializeFilter[] serializeFilterArray36 = new com.alibaba.fastjson.serializer.SerializeFilter[] {};
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature37 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature38 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature39 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature40 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature41 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature[] serializerFeatureArray42 = new com.alibaba.fastjson.serializer.SerializerFeature[] { serializerFeature37, serializerFeature38, serializerFeature39, serializerFeature40, serializerFeature41 };
        byte[] byteArray43 = com.alibaba.fastjson.JSON.toJSONBytes((java.lang.Object) "hi!", serializeFilterArray36, serializerFeatureArray42);
        java.lang.String str44 = com.alibaba.fastjson.JSON.toJSONStringWithDateFormat((java.lang.Object) jSONObject30, "null", serializerFeatureArray42);
        byte[] byteArray45 = com.alibaba.fastjson.JSON.toJSONBytes(obj27, serializeFilter28, serializerFeatureArray42);
        byte[] byteArray46 = com.alibaba.fastjson.JSON.toJSONBytes((java.lang.Object) jSONObject22, serializerFeatureArray42);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray47 = com.alibaba.fastjson.JSON.toJSONBytes((java.lang.Object) serializeWriter2, serializeConfig15, serializerFeatureArray42);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "## ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "## ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[#, #,  ]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(float21);
        org.junit.Assert.assertNull(double24);
        org.junit.Assert.assertNull(long26);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(strEntrySet33);
        org.junit.Assert.assertNotNull(serializeFilterArray36);
        org.junit.Assert.assertTrue("'" + serializerFeature37 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature37.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature38 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature38.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature39 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature39.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + serializerFeature40 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature40.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature41 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature41.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertNotNull(serializerFeatureArray42);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[39, 104, 105, 33, 39]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "{}" + "'", str44, "{}");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[110, 117, 108, 108]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[123, 125]");
    }

    @Test
    public void test278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test278");
        java.io.Writer writer0 = null;
        com.alibaba.fastjson.serializer.SerializeWriter serializeWriter2 = new com.alibaba.fastjson.serializer.SerializeWriter(writer0, 10);
        serializeWriter2.writeStringWithDoubleQuote("'WriteTabAsSpecial'", '4');
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature6 = com.alibaba.fastjson.serializer.SerializerFeature.WriteTabAsSpecial;
        com.alibaba.fastjson.serializer.SerializeFilter[] serializeFilterArray8 = new com.alibaba.fastjson.serializer.SerializeFilter[] {};
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature9 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature10 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature11 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature12 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature13 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature[] serializerFeatureArray14 = new com.alibaba.fastjson.serializer.SerializerFeature[] { serializerFeature9, serializerFeature10, serializerFeature11, serializerFeature12, serializerFeature13 };
        byte[] byteArray15 = com.alibaba.fastjson.JSON.toJSONBytes((java.lang.Object) "hi!", serializeFilterArray8, serializerFeatureArray14);
        com.alibaba.fastjson.serializer.SerializeFilter[] serializeFilterArray17 = new com.alibaba.fastjson.serializer.SerializeFilter[] {};
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature18 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature19 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature20 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature21 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature22 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature[] serializerFeatureArray23 = new com.alibaba.fastjson.serializer.SerializerFeature[] { serializerFeature18, serializerFeature19, serializerFeature20, serializerFeature21, serializerFeature22 };
        byte[] byteArray24 = com.alibaba.fastjson.JSON.toJSONBytes((java.lang.Object) "hi!", serializeFilterArray17, serializerFeatureArray23);
        java.lang.String str25 = com.alibaba.fastjson.JSON.toJSONString((java.lang.Object) serializerFeature6, serializeFilterArray8, serializerFeatureArray23);
        com.alibaba.fastjson.serializer.SerializeWriter serializeWriter26 = new com.alibaba.fastjson.serializer.SerializeWriter((java.io.Writer) serializeWriter2, serializerFeatureArray23);
        char[] charArray27 = null;
        // The following exception was thrown during execution in test generation
        try {
            serializeWriter2.write(charArray27, 0, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + serializerFeature6 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteTabAsSpecial + "'", serializerFeature6.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteTabAsSpecial));
        org.junit.Assert.assertNotNull(serializeFilterArray8);
        org.junit.Assert.assertTrue("'" + serializerFeature9 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature9.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature10 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature10.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature11 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature11.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + serializerFeature12 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature12.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature13 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature13.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertNotNull(serializerFeatureArray14);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[39, 104, 105, 33, 39]");
        org.junit.Assert.assertNotNull(serializeFilterArray17);
        org.junit.Assert.assertTrue("'" + serializerFeature18 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature18.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature19 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature19.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature20 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature20.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + serializerFeature21 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature21.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature22 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature22.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertNotNull(serializerFeatureArray23);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[39, 104, 105, 33, 39]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "'WriteTabAsSpecial'" + "'", str25, "'WriteTabAsSpecial'");
    }

    @Test
    public void test279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test279");
        java.io.Writer writer0 = null;
        com.alibaba.fastjson.serializer.SerializeWriter serializeWriter2 = new com.alibaba.fastjson.serializer.SerializeWriter(writer0, 10);
        serializeWriter2.writeStringWithDoubleQuote("'WriteTabAsSpecial'", '4');
        serializeWriter2.write(true);
        serializeWriter2.writeFieldValue(' ', "'bnVsb\004=='", 0.0d);
        com.alibaba.fastjson.serializer.SerializeConfig serializeConfig12 = null;
        com.alibaba.fastjson.serializer.SerializeFilter[] serializeFilterArray14 = new com.alibaba.fastjson.serializer.SerializeFilter[] {};
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature15 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature16 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature17 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature18 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature19 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature[] serializerFeatureArray20 = new com.alibaba.fastjson.serializer.SerializerFeature[] { serializerFeature15, serializerFeature16, serializerFeature17, serializerFeature18, serializerFeature19 };
        byte[] byteArray21 = com.alibaba.fastjson.JSON.toJSONBytes((java.lang.Object) "hi!", serializeFilterArray14, serializerFeatureArray20);
        java.lang.Object obj24 = null;
        com.alibaba.fastjson.serializer.SerializeConfig serializeConfig25 = null;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature27 = com.alibaba.fastjson.serializer.SerializerFeature.WriteTabAsSpecial;
        com.alibaba.fastjson.serializer.SerializeFilter[] serializeFilterArray29 = new com.alibaba.fastjson.serializer.SerializeFilter[] {};
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature30 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature31 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature32 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature33 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature34 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature[] serializerFeatureArray35 = new com.alibaba.fastjson.serializer.SerializerFeature[] { serializerFeature30, serializerFeature31, serializerFeature32, serializerFeature33, serializerFeature34 };
        byte[] byteArray36 = com.alibaba.fastjson.JSON.toJSONBytes((java.lang.Object) "hi!", serializeFilterArray29, serializerFeatureArray35);
        com.alibaba.fastjson.serializer.SerializeFilter[] serializeFilterArray38 = new com.alibaba.fastjson.serializer.SerializeFilter[] {};
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature39 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature40 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature41 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature42 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature43 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature[] serializerFeatureArray44 = new com.alibaba.fastjson.serializer.SerializerFeature[] { serializerFeature39, serializerFeature40, serializerFeature41, serializerFeature42, serializerFeature43 };
        byte[] byteArray45 = com.alibaba.fastjson.JSON.toJSONBytes((java.lang.Object) "hi!", serializeFilterArray38, serializerFeatureArray44);
        java.lang.String str46 = com.alibaba.fastjson.JSON.toJSONString((java.lang.Object) serializerFeature27, serializeFilterArray29, serializerFeatureArray44);
        byte[] byteArray47 = com.alibaba.fastjson.JSON.toJSONBytes(obj24, serializeConfig25, (int) (byte) -1, serializerFeatureArray44);
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature48 = com.alibaba.fastjson.serializer.SerializerFeature.WriteTabAsSpecial;
        com.alibaba.fastjson.serializer.SerializeFilter[] serializeFilterArray50 = new com.alibaba.fastjson.serializer.SerializeFilter[] {};
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature51 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature52 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature53 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature54 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature55 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature[] serializerFeatureArray56 = new com.alibaba.fastjson.serializer.SerializerFeature[] { serializerFeature51, serializerFeature52, serializerFeature53, serializerFeature54, serializerFeature55 };
        byte[] byteArray57 = com.alibaba.fastjson.JSON.toJSONBytes((java.lang.Object) "hi!", serializeFilterArray50, serializerFeatureArray56);
        com.alibaba.fastjson.serializer.SerializeFilter[] serializeFilterArray59 = new com.alibaba.fastjson.serializer.SerializeFilter[] {};
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature60 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature61 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature62 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature63 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature64 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature[] serializerFeatureArray65 = new com.alibaba.fastjson.serializer.SerializerFeature[] { serializerFeature60, serializerFeature61, serializerFeature62, serializerFeature63, serializerFeature64 };
        byte[] byteArray66 = com.alibaba.fastjson.JSON.toJSONBytes((java.lang.Object) "hi!", serializeFilterArray59, serializerFeatureArray65);
        java.lang.String str67 = com.alibaba.fastjson.JSON.toJSONString((java.lang.Object) serializerFeature48, serializeFilterArray50, serializerFeatureArray65);
        java.lang.String str68 = com.alibaba.fastjson.JSON.toJSONString((java.lang.Object) byteArray47, serializerFeatureArray65);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray69 = com.alibaba.fastjson.JSON.toJSONBytes((java.lang.Object) "'bnVsb\004=='", serializeConfig12, serializeFilterArray14, "writer not null", 52, serializerFeatureArray65);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(serializeFilterArray14);
        org.junit.Assert.assertTrue("'" + serializerFeature15 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature15.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature16 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature16.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature17 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature17.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + serializerFeature18 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature18.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature19 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature19.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertNotNull(serializerFeatureArray20);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[39, 104, 105, 33, 39]");
        org.junit.Assert.assertTrue("'" + serializerFeature27 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteTabAsSpecial + "'", serializerFeature27.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteTabAsSpecial));
        org.junit.Assert.assertNotNull(serializeFilterArray29);
        org.junit.Assert.assertTrue("'" + serializerFeature30 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature30.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature31 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature31.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature32 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature32.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + serializerFeature33 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature33.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature34 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature34.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertNotNull(serializerFeatureArray35);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[39, 104, 105, 33, 39]");
        org.junit.Assert.assertNotNull(serializeFilterArray38);
        org.junit.Assert.assertTrue("'" + serializerFeature39 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature39.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature40 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature40.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature41 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature41.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + serializerFeature42 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature42.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature43 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature43.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertNotNull(serializerFeatureArray44);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[39, 104, 105, 33, 39]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "'WriteTabAsSpecial'" + "'", str46, "'WriteTabAsSpecial'");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[110, 117, 108, 108]");
        org.junit.Assert.assertTrue("'" + serializerFeature48 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteTabAsSpecial + "'", serializerFeature48.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteTabAsSpecial));
        org.junit.Assert.assertNotNull(serializeFilterArray50);
        org.junit.Assert.assertTrue("'" + serializerFeature51 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature51.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature52 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature52.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature53 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature53.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + serializerFeature54 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature54.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature55 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature55.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertNotNull(serializerFeatureArray56);
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[39, 104, 105, 33, 39]");
        org.junit.Assert.assertNotNull(serializeFilterArray59);
        org.junit.Assert.assertTrue("'" + serializerFeature60 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature60.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature61 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature61.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature62 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature62.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + serializerFeature63 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature63.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature64 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature64.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertNotNull(serializerFeatureArray65);
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[39, 104, 105, 33, 39]");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "'WriteTabAsSpecial'" + "'", str67, "'WriteTabAsSpecial'");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "'bnVsb\004=='" + "'", str68, "'bnVsb\004=='");
    }

    @Test
    public void test280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test280");
        com.alibaba.fastjson.parser.DefaultJSONParser defaultJSONParser1 = new com.alibaba.fastjson.parser.DefaultJSONParser(":true");
        com.alibaba.fastjson.parser.SymbolTable symbolTable2 = defaultJSONParser1.symbolTable;
        com.alibaba.fastjson.JSONObject jSONObject4 = new com.alibaba.fastjson.JSONObject(0);
        boolean boolean6 = jSONObject4.equals((java.lang.Object) (byte) 10);
        java.util.Set<java.util.Map.Entry<java.lang.String, java.lang.Object>> strEntrySet7 = jSONObject4.entrySet();
        short short9 = jSONObject4.getShortValue("false");
        com.alibaba.fastjson.JSONObject jSONObject10 = new com.alibaba.fastjson.JSONObject((java.util.Map<java.lang.String, java.lang.Object>) jSONObject4);
        java.io.Writer writer11 = null;
        com.alibaba.fastjson.serializer.SerializeWriter serializeWriter13 = new com.alibaba.fastjson.serializer.SerializeWriter(writer11, 10);
        serializeWriter13.writeStringWithDoubleQuote("'WriteTabAsSpecial'", '4');
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature17 = com.alibaba.fastjson.serializer.SerializerFeature.WriteTabAsSpecial;
        com.alibaba.fastjson.serializer.SerializeFilter[] serializeFilterArray19 = new com.alibaba.fastjson.serializer.SerializeFilter[] {};
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature20 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature21 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature22 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature23 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature24 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature[] serializerFeatureArray25 = new com.alibaba.fastjson.serializer.SerializerFeature[] { serializerFeature20, serializerFeature21, serializerFeature22, serializerFeature23, serializerFeature24 };
        byte[] byteArray26 = com.alibaba.fastjson.JSON.toJSONBytes((java.lang.Object) "hi!", serializeFilterArray19, serializerFeatureArray25);
        com.alibaba.fastjson.serializer.SerializeFilter[] serializeFilterArray28 = new com.alibaba.fastjson.serializer.SerializeFilter[] {};
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature29 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature30 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature31 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature32 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature33 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature[] serializerFeatureArray34 = new com.alibaba.fastjson.serializer.SerializerFeature[] { serializerFeature29, serializerFeature30, serializerFeature31, serializerFeature32, serializerFeature33 };
        byte[] byteArray35 = com.alibaba.fastjson.JSON.toJSONBytes((java.lang.Object) "hi!", serializeFilterArray28, serializerFeatureArray34);
        java.lang.String str36 = com.alibaba.fastjson.JSON.toJSONString((java.lang.Object) serializerFeature17, serializeFilterArray19, serializerFeatureArray34);
        com.alibaba.fastjson.serializer.SerializeWriter serializeWriter37 = new com.alibaba.fastjson.serializer.SerializeWriter((java.io.Writer) serializeWriter13, serializerFeatureArray34);
        serializeWriter37.writeFloat((float) (byte) 0, false);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj41 = defaultJSONParser1.parseObject((java.util.Map) jSONObject10, (java.lang.Object) serializeWriter37);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson.JSONException; message: syntax error, expect {, actual :, pos 1, line 1, column 2:true");
        } catch (com.alibaba.fastjson.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(symbolTable2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strEntrySet7);
        org.junit.Assert.assertTrue("'" + short9 + "' != '" + (short) 0 + "'", short9 == (short) 0);
        org.junit.Assert.assertTrue("'" + serializerFeature17 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteTabAsSpecial + "'", serializerFeature17.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteTabAsSpecial));
        org.junit.Assert.assertNotNull(serializeFilterArray19);
        org.junit.Assert.assertTrue("'" + serializerFeature20 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature20.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature21 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature21.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature22 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature22.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + serializerFeature23 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature23.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature24 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature24.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertNotNull(serializerFeatureArray25);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[39, 104, 105, 33, 39]");
        org.junit.Assert.assertNotNull(serializeFilterArray28);
        org.junit.Assert.assertTrue("'" + serializerFeature29 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature29.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature30 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature30.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature31 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature31.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + serializerFeature32 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature32.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature33 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature33.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertNotNull(serializerFeatureArray34);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[39, 104, 105, 33, 39]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "'WriteTabAsSpecial'" + "'", str36, "'WriteTabAsSpecial'");
    }

    @Test
    public void test281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test281");
        byte[] byteArray2 = com.alibaba.fastjson.util.IOUtils.specicalFlags_singleQuotes;
        char[] charArray5 = com.alibaba.fastjson.util.IOUtils.CA;
        int int6 = com.alibaba.fastjson.util.IOUtils.decodeUTF8(byteArray2, (int) (byte) 0, (int) (short) 1, charArray5);
        // The following exception was thrown during execution in test generation
        try {
            com.alibaba.fastjson.util.IOUtils.getChars((int) (byte) -1, (int) 'a', charArray5);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 96");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[4, 4, 4, 4, 4, 4, 4, 4, 1, 1, 1, 4, 1, 1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0]");
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "\004\000\000\000\000\000\000\000\000\000KLMNOPQRSTUVWXYZabcde0ghijklmnopqrstuvwxyz0123456789+/");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "\004\000\000\000\000\000\000\000\000\000KLMNOPQRSTUVWXYZabcde0ghijklmnopqrstuvwxyz0123456789+/");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[\004, \000, \000, \000, \000, \000, \000, \000, \000, \000, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z, a, b, c, d, e, 0, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, +, /]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
    }

    @Test
    public void test282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test282");
        java.io.Writer writer0 = null;
        com.alibaba.fastjson.serializer.SerializeWriter serializeWriter2 = new com.alibaba.fastjson.serializer.SerializeWriter(writer0, 10);
        serializeWriter2.write((int) (byte) -1);
        java.lang.String[] strArray35 = new java.lang.String[] { ":true", "1.2.76", "serialize exceeded MAX_OUTPUT_LENGTH=", "-2147483648", ", minimumCapacity=", "\"-9223372036854775808\"", "@type", "\"\"", "null:", "null:", "1.2.76", "Negative initial size:", ":true", "-9223372036854775808", "fastjson.serializer_buffer_threshold", "fastjson.compatibleWithFieldName", "'WriteMapNullValue'", "1.2.76", "UTF-8", "fastjson.compatibleWithJavaBean", "1.2.76", "Negative initial size:", "1.2.76", "\"-9223372036854775808\"", "''", "@type", "fastjson.serializer_buffer_threshold", "0.0", "1.2.76", ":false" };
        java.util.ArrayList<java.lang.String> strList36 = new java.util.ArrayList<java.lang.String>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList36, strArray35);
        serializeWriter2.write((java.util.List<java.lang.String>) strList36);
        serializeWriter2.writeLongAndChar((long) (short) 0, '#');
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
    }

    @Test
    public void test283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test283");
        com.alibaba.fastjson.parser.DefaultJSONParser defaultJSONParser1 = new com.alibaba.fastjson.parser.DefaultJSONParser(":true");
        com.alibaba.fastjson.parser.SymbolTable symbolTable2 = defaultJSONParser1.symbolTable;
        defaultJSONParser1.resolveStatus = (byte) -1;
        com.alibaba.fastjson.parser.DefaultJSONParser defaultJSONParser6 = new com.alibaba.fastjson.parser.DefaultJSONParser(":true");
        com.alibaba.fastjson.parser.deserializer.FieldTypeResolver fieldTypeResolver7 = defaultJSONParser6.getFieldTypeResolver();
        java.io.Writer writer8 = null;
        com.alibaba.fastjson.serializer.SerializeWriter serializeWriter10 = new com.alibaba.fastjson.serializer.SerializeWriter(writer8, 10);
        serializeWriter10.writeStringWithDoubleQuote("'WriteTabAsSpecial'", '4');
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature14 = com.alibaba.fastjson.serializer.SerializerFeature.WriteTabAsSpecial;
        com.alibaba.fastjson.serializer.SerializeFilter[] serializeFilterArray16 = new com.alibaba.fastjson.serializer.SerializeFilter[] {};
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature17 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature18 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature19 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature20 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature21 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature[] serializerFeatureArray22 = new com.alibaba.fastjson.serializer.SerializerFeature[] { serializerFeature17, serializerFeature18, serializerFeature19, serializerFeature20, serializerFeature21 };
        byte[] byteArray23 = com.alibaba.fastjson.JSON.toJSONBytes((java.lang.Object) "hi!", serializeFilterArray16, serializerFeatureArray22);
        com.alibaba.fastjson.serializer.SerializeFilter[] serializeFilterArray25 = new com.alibaba.fastjson.serializer.SerializeFilter[] {};
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature26 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature27 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature28 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature29 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature30 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature[] serializerFeatureArray31 = new com.alibaba.fastjson.serializer.SerializerFeature[] { serializerFeature26, serializerFeature27, serializerFeature28, serializerFeature29, serializerFeature30 };
        byte[] byteArray32 = com.alibaba.fastjson.JSON.toJSONBytes((java.lang.Object) "hi!", serializeFilterArray25, serializerFeatureArray31);
        java.lang.String str33 = com.alibaba.fastjson.JSON.toJSONString((java.lang.Object) serializerFeature14, serializeFilterArray16, serializerFeatureArray31);
        com.alibaba.fastjson.serializer.SerializeWriter serializeWriter34 = new com.alibaba.fastjson.serializer.SerializeWriter((java.io.Writer) serializeWriter10, serializerFeatureArray31);
        serializeWriter34.writeFloat((float) (byte) 0, false);
        defaultJSONParser6.handleResovleTask((java.lang.Object) false);
        com.alibaba.fastjson.parser.ParseContext parseContext39 = null;
        com.alibaba.fastjson.parser.ParseContext parseContext42 = defaultJSONParser6.setContext(parseContext39, (java.lang.Object) "{fastjson.serializer_buffer_threshold:{}}", (java.lang.Object) "com.alibaba.fastjson.JSONException: hi!");
        defaultJSONParser1.setContext(parseContext39);
        org.junit.Assert.assertNotNull(symbolTable2);
        org.junit.Assert.assertNull(fieldTypeResolver7);
        org.junit.Assert.assertTrue("'" + serializerFeature14 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteTabAsSpecial + "'", serializerFeature14.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteTabAsSpecial));
        org.junit.Assert.assertNotNull(serializeFilterArray16);
        org.junit.Assert.assertTrue("'" + serializerFeature17 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature17.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature18 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature18.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature19 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature19.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + serializerFeature20 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature20.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature21 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature21.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertNotNull(serializerFeatureArray22);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[39, 104, 105, 33, 39]");
        org.junit.Assert.assertNotNull(serializeFilterArray25);
        org.junit.Assert.assertTrue("'" + serializerFeature26 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature26.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature27 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature27.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature28 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature28.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + serializerFeature29 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature29.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature30 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature30.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertNotNull(serializerFeatureArray31);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[39, 104, 105, 33, 39]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "'WriteTabAsSpecial'" + "'", str33, "'WriteTabAsSpecial'");
        org.junit.Assert.assertNotNull(parseContext42);
    }

    @Test
    public void test284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test284");
        java.io.Writer writer0 = null;
        com.alibaba.fastjson.serializer.SerializeWriter serializeWriter2 = new com.alibaba.fastjson.serializer.SerializeWriter(writer0, 10);
        serializeWriter2.write((int) (byte) -1);
        java.lang.String[] strArray35 = new java.lang.String[] { ":true", "1.2.76", "serialize exceeded MAX_OUTPUT_LENGTH=", "-2147483648", ", minimumCapacity=", "\"-9223372036854775808\"", "@type", "\"\"", "null:", "null:", "1.2.76", "Negative initial size:", ":true", "-9223372036854775808", "fastjson.serializer_buffer_threshold", "fastjson.compatibleWithFieldName", "'WriteMapNullValue'", "1.2.76", "UTF-8", "fastjson.compatibleWithJavaBean", "1.2.76", "Negative initial size:", "1.2.76", "\"-9223372036854775808\"", "''", "@type", "fastjson.serializer_buffer_threshold", "0.0", "1.2.76", ":false" };
        java.util.ArrayList<java.lang.String> strList36 = new java.util.ArrayList<java.lang.String>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList36, strArray35);
        serializeWriter2.write((java.util.List<java.lang.String>) strList36);
        serializeWriter2.writeLongAndChar((long) 'a', '#');
        com.alibaba.fastjson.serializer.SerializeFilter[] serializeFilterArray46 = new com.alibaba.fastjson.serializer.SerializeFilter[] {};
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature47 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature48 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature49 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature50 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature51 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature[] serializerFeatureArray52 = new com.alibaba.fastjson.serializer.SerializerFeature[] { serializerFeature47, serializerFeature48, serializerFeature49, serializerFeature50, serializerFeature51 };
        byte[] byteArray53 = com.alibaba.fastjson.JSON.toJSONBytes((java.lang.Object) "hi!", serializeFilterArray46, serializerFeatureArray52);
        java.lang.String str54 = com.alibaba.fastjson.JSON.toJSONStringWithDateFormat((java.lang.Object) "Negative initial size:", ", minimumCapacity=", serializerFeatureArray52);
        com.alibaba.fastjson.serializer.SerializeWriter serializeWriter55 = new com.alibaba.fastjson.serializer.SerializeWriter((java.io.Writer) serializeWriter2, (int) (short) 10, serializerFeatureArray52);
        serializeWriter55.write(":true");
        serializeWriter55.write("'WriteMapNullValue'");
        com.alibaba.fastjson.serializer.SerializeWriter serializeWriter61 = new com.alibaba.fastjson.serializer.SerializeWriter((java.io.Writer) serializeWriter55, 10);
        com.alibaba.fastjson.serializer.SerializeConfig serializeConfig62 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj63 = com.alibaba.fastjson.JSON.toJSON((java.lang.Object) serializeWriter61, serializeConfig62);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(serializeFilterArray46);
        org.junit.Assert.assertTrue("'" + serializerFeature47 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature47.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature48 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature48.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature49 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature49.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + serializerFeature50 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature50.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature51 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature51.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertNotNull(serializerFeatureArray52);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[39, 104, 105, 33, 39]");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "'Negative initial size:'" + "'", str54, "'Negative initial size:'");
    }

    @Test
    public void test285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test285");
        java.io.InputStream inputStream0 = null;
        java.nio.charset.Charset charset1 = com.alibaba.fastjson.util.IOUtils.UTF8;
        java.lang.reflect.Type type2 = null;
        com.alibaba.fastjson.parser.ParserConfig parserConfig3 = null;
        com.alibaba.fastjson.parser.deserializer.ParseProcess parseProcess4 = null;
        com.alibaba.fastjson.parser.Feature feature6 = null;
        com.alibaba.fastjson.parser.Feature[] featureArray7 = new com.alibaba.fastjson.parser.Feature[] { feature6 };
        // The following exception was thrown during execution in test generation
        try {
            com.alibaba.fastjson.JSONException jSONException8 = com.alibaba.fastjson.JSON.parseObject(inputStream0, charset1, type2, parserConfig3, parseProcess4, (int) '#', featureArray7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertNotNull(featureArray7);
    }

    @Test
    public void test286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test286");
        com.alibaba.fastjson.parser.DefaultJSONParser defaultJSONParser1 = new com.alibaba.fastjson.parser.DefaultJSONParser(":true");
        java.util.List<com.alibaba.fastjson.parser.deserializer.ExtraTypeProvider> extraTypeProviderList2 = defaultJSONParser1.getExtraTypeProviders();
        com.alibaba.fastjson.parser.deserializer.FieldTypeResolver fieldTypeResolver3 = null;
        defaultJSONParser1.setFieldTypeResolver(fieldTypeResolver3);
        com.alibaba.fastjson.parser.DefaultJSONParser defaultJSONParser6 = new com.alibaba.fastjson.parser.DefaultJSONParser(":true");
        com.alibaba.fastjson.parser.deserializer.FieldTypeResolver fieldTypeResolver7 = defaultJSONParser6.getFieldTypeResolver();
        java.io.Writer writer8 = null;
        com.alibaba.fastjson.serializer.SerializeWriter serializeWriter10 = new com.alibaba.fastjson.serializer.SerializeWriter(writer8, 10);
        serializeWriter10.writeStringWithDoubleQuote("'WriteTabAsSpecial'", '4');
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature14 = com.alibaba.fastjson.serializer.SerializerFeature.WriteTabAsSpecial;
        com.alibaba.fastjson.serializer.SerializeFilter[] serializeFilterArray16 = new com.alibaba.fastjson.serializer.SerializeFilter[] {};
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature17 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature18 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature19 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature20 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature21 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature[] serializerFeatureArray22 = new com.alibaba.fastjson.serializer.SerializerFeature[] { serializerFeature17, serializerFeature18, serializerFeature19, serializerFeature20, serializerFeature21 };
        byte[] byteArray23 = com.alibaba.fastjson.JSON.toJSONBytes((java.lang.Object) "hi!", serializeFilterArray16, serializerFeatureArray22);
        com.alibaba.fastjson.serializer.SerializeFilter[] serializeFilterArray25 = new com.alibaba.fastjson.serializer.SerializeFilter[] {};
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature26 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature27 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature28 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature29 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature30 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature[] serializerFeatureArray31 = new com.alibaba.fastjson.serializer.SerializerFeature[] { serializerFeature26, serializerFeature27, serializerFeature28, serializerFeature29, serializerFeature30 };
        byte[] byteArray32 = com.alibaba.fastjson.JSON.toJSONBytes((java.lang.Object) "hi!", serializeFilterArray25, serializerFeatureArray31);
        java.lang.String str33 = com.alibaba.fastjson.JSON.toJSONString((java.lang.Object) serializerFeature14, serializeFilterArray16, serializerFeatureArray31);
        com.alibaba.fastjson.serializer.SerializeWriter serializeWriter34 = new com.alibaba.fastjson.serializer.SerializeWriter((java.io.Writer) serializeWriter10, serializerFeatureArray31);
        serializeWriter34.writeFloat((float) (byte) 0, false);
        defaultJSONParser6.handleResovleTask((java.lang.Object) false);
        com.alibaba.fastjson.parser.ParseContext parseContext39 = null;
        com.alibaba.fastjson.parser.ParseContext parseContext42 = defaultJSONParser6.setContext(parseContext39, (java.lang.Object) "{fastjson.serializer_buffer_threshold:{}}", (java.lang.Object) "com.alibaba.fastjson.JSONException: hi!");
        com.alibaba.fastjson.parser.DefaultJSONParser.ResolveTask resolveTask44 = new com.alibaba.fastjson.parser.DefaultJSONParser.ResolveTask(parseContext42, "fastjson.compatibleWithJavaBean");
        defaultJSONParser1.addResolveTask(resolveTask44);
        org.junit.Assert.assertNotNull(extraTypeProviderList2);
        org.junit.Assert.assertNull(fieldTypeResolver7);
        org.junit.Assert.assertTrue("'" + serializerFeature14 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteTabAsSpecial + "'", serializerFeature14.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteTabAsSpecial));
        org.junit.Assert.assertNotNull(serializeFilterArray16);
        org.junit.Assert.assertTrue("'" + serializerFeature17 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature17.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature18 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature18.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature19 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature19.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + serializerFeature20 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature20.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature21 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature21.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertNotNull(serializerFeatureArray22);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[39, 104, 105, 33, 39]");
        org.junit.Assert.assertNotNull(serializeFilterArray25);
        org.junit.Assert.assertTrue("'" + serializerFeature26 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature26.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature27 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature27.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature28 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature28.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + serializerFeature29 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature29.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature30 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature30.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertNotNull(serializerFeatureArray31);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[39, 104, 105, 33, 39]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "'WriteTabAsSpecial'" + "'", str33, "'WriteTabAsSpecial'");
        org.junit.Assert.assertNotNull(parseContext42);
    }

    @Test
    public void test287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test287");
        // The following exception was thrown during execution in test generation
        try {
            com.alibaba.fastjson.JSONObject jSONObject1 = com.alibaba.fastjson.JSON.parseObject("hi!");
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson.JSONException; message: syntax error, pos 1, line 1, column 2hi!");
        } catch (com.alibaba.fastjson.JSONException e) {
            // Expected exception.
        }
    }

    @Test
    public void test288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test288");
        java.io.InputStream inputStream0 = null;
        java.nio.charset.Charset charset1 = com.alibaba.fastjson.util.IOUtils.UTF8;
        com.alibaba.fastjson.JSONObject jSONObject3 = new com.alibaba.fastjson.JSONObject(0);
        boolean boolean5 = jSONObject3.equals((java.lang.Object) (byte) 10);
        java.util.Set<java.util.Map.Entry<java.lang.String, java.lang.Object>> strEntrySet6 = jSONObject3.entrySet();
        short short8 = jSONObject3.getShortValue("UTF-8");
        java.lang.String str10 = jSONObject3.getString("null:");
        java.lang.Class<?> wildcardClass11 = jSONObject3.getClass();
        com.alibaba.fastjson.parser.ParserConfig parserConfig12 = null;
        com.alibaba.fastjson.parser.Feature feature13 = null;
        com.alibaba.fastjson.parser.Feature[] featureArray14 = new com.alibaba.fastjson.parser.Feature[] { feature13 };
        // The following exception was thrown during execution in test generation
        try {
            java.util.Properties properties15 = com.alibaba.fastjson.JSON.parseObject(inputStream0, charset1, (java.lang.reflect.Type) wildcardClass11, parserConfig12, featureArray14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(strEntrySet6);
        org.junit.Assert.assertTrue("'" + short8 + "' != '" + (short) 0 + "'", short8 == (short) 0);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(wildcardClass11);
        org.junit.Assert.assertNotNull(featureArray14);
    }

    @Test
    public void test289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test289");
        com.alibaba.fastjson.util.IOUtils iOUtils0 = new com.alibaba.fastjson.util.IOUtils();
    }

    @Test
    public void test290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test290");
        com.alibaba.fastjson.JSONObject jSONObject1 = new com.alibaba.fastjson.JSONObject(0);
        java.util.Collection<java.lang.Object> objCollection2 = jSONObject1.values();
        java.util.Set<java.lang.String> strSet3 = jSONObject1.keySet();
        com.alibaba.fastjson.serializer.SerializeConfig serializeConfig4 = null;
        java.lang.Object obj5 = null;
        com.alibaba.fastjson.serializer.SerializeConfig serializeConfig6 = null;
        com.alibaba.fastjson.serializer.SerializeFilter[] serializeFilterArray7 = new com.alibaba.fastjson.serializer.SerializeFilter[] {};
        com.alibaba.fastjson.serializer.SerializeFilter[] serializeFilterArray11 = new com.alibaba.fastjson.serializer.SerializeFilter[] {};
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature12 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature13 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature14 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature15 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature16 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature[] serializerFeatureArray17 = new com.alibaba.fastjson.serializer.SerializerFeature[] { serializerFeature12, serializerFeature13, serializerFeature14, serializerFeature15, serializerFeature16 };
        byte[] byteArray18 = com.alibaba.fastjson.JSON.toJSONBytes((java.lang.Object) "hi!", serializeFilterArray11, serializerFeatureArray17);
        java.lang.String str19 = com.alibaba.fastjson.JSON.toJSONString(obj5, serializeConfig6, serializeFilterArray7, "\uffffa", (int) '#', serializerFeatureArray17);
        java.io.Writer writer21 = null;
        com.alibaba.fastjson.serializer.SerializeWriter serializeWriter23 = new com.alibaba.fastjson.serializer.SerializeWriter(writer21, 10);
        serializeWriter23.writeStringWithDoubleQuote("'WriteTabAsSpecial'", '4');
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature27 = com.alibaba.fastjson.serializer.SerializerFeature.WriteTabAsSpecial;
        com.alibaba.fastjson.serializer.SerializeFilter[] serializeFilterArray29 = new com.alibaba.fastjson.serializer.SerializeFilter[] {};
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature30 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature31 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature32 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature33 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature34 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature[] serializerFeatureArray35 = new com.alibaba.fastjson.serializer.SerializerFeature[] { serializerFeature30, serializerFeature31, serializerFeature32, serializerFeature33, serializerFeature34 };
        byte[] byteArray36 = com.alibaba.fastjson.JSON.toJSONBytes((java.lang.Object) "hi!", serializeFilterArray29, serializerFeatureArray35);
        com.alibaba.fastjson.serializer.SerializeFilter[] serializeFilterArray38 = new com.alibaba.fastjson.serializer.SerializeFilter[] {};
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature39 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature40 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature41 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature42 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature43 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature[] serializerFeatureArray44 = new com.alibaba.fastjson.serializer.SerializerFeature[] { serializerFeature39, serializerFeature40, serializerFeature41, serializerFeature42, serializerFeature43 };
        byte[] byteArray45 = com.alibaba.fastjson.JSON.toJSONBytes((java.lang.Object) "hi!", serializeFilterArray38, serializerFeatureArray44);
        java.lang.String str46 = com.alibaba.fastjson.JSON.toJSONString((java.lang.Object) serializerFeature27, serializeFilterArray29, serializerFeatureArray44);
        com.alibaba.fastjson.serializer.SerializeWriter serializeWriter47 = new com.alibaba.fastjson.serializer.SerializeWriter((java.io.Writer) serializeWriter23, serializerFeatureArray44);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray48 = com.alibaba.fastjson.JSON.toJSONBytes((java.lang.Object) jSONObject1, serializeConfig4, serializeFilterArray7, 10, serializerFeatureArray44);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objCollection2);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(serializeFilterArray7);
        org.junit.Assert.assertNotNull(serializeFilterArray11);
        org.junit.Assert.assertTrue("'" + serializerFeature12 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature12.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature13 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature13.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature14 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature14.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + serializerFeature15 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature15.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature16 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature16.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertNotNull(serializerFeatureArray17);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[39, 104, 105, 33, 39]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "null" + "'", str19, "null");
        org.junit.Assert.assertTrue("'" + serializerFeature27 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteTabAsSpecial + "'", serializerFeature27.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteTabAsSpecial));
        org.junit.Assert.assertNotNull(serializeFilterArray29);
        org.junit.Assert.assertTrue("'" + serializerFeature30 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature30.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature31 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature31.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature32 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature32.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + serializerFeature33 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature33.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature34 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature34.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertNotNull(serializerFeatureArray35);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[39, 104, 105, 33, 39]");
        org.junit.Assert.assertNotNull(serializeFilterArray38);
        org.junit.Assert.assertTrue("'" + serializerFeature39 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature39.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature40 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature40.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature41 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature41.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + serializerFeature42 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature42.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature43 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature43.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertNotNull(serializerFeatureArray44);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[39, 104, 105, 33, 39]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "'WriteTabAsSpecial'" + "'", str46, "'WriteTabAsSpecial'");
    }

    @Test
    public void test291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test291");
        com.alibaba.fastjson.JSONObject jSONObject1 = new com.alibaba.fastjson.JSONObject(0);
        java.util.Collection<java.lang.Object> objCollection2 = jSONObject1.values();
        com.alibaba.fastjson.JSONObject jSONObject3 = new com.alibaba.fastjson.JSONObject((java.util.Map<java.lang.String, java.lang.Object>) jSONObject1);
        com.alibaba.fastjson.TypeReference typeReference5 = null;
        boolean[] booleanArray6 = jSONObject1.getObject("fastjson.serializer_buffer_threshold", typeReference5);
        java.io.Writer writer7 = null;
        com.alibaba.fastjson.serializer.SerializeWriter serializeWriter9 = new com.alibaba.fastjson.serializer.SerializeWriter(writer7, 10);
        serializeWriter9.write((int) (byte) -1);
        serializeWriter9.expandCapacity((int) (short) 10);
        java.lang.Object obj14 = null;
        com.alibaba.fastjson.serializer.SerializeConfig serializeConfig15 = null;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature17 = com.alibaba.fastjson.serializer.SerializerFeature.WriteTabAsSpecial;
        com.alibaba.fastjson.serializer.SerializeFilter[] serializeFilterArray19 = new com.alibaba.fastjson.serializer.SerializeFilter[] {};
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature20 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature21 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature22 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature23 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature24 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature[] serializerFeatureArray25 = new com.alibaba.fastjson.serializer.SerializerFeature[] { serializerFeature20, serializerFeature21, serializerFeature22, serializerFeature23, serializerFeature24 };
        byte[] byteArray26 = com.alibaba.fastjson.JSON.toJSONBytes((java.lang.Object) "hi!", serializeFilterArray19, serializerFeatureArray25);
        com.alibaba.fastjson.serializer.SerializeFilter[] serializeFilterArray28 = new com.alibaba.fastjson.serializer.SerializeFilter[] {};
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature29 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature30 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature31 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature32 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature33 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature[] serializerFeatureArray34 = new com.alibaba.fastjson.serializer.SerializerFeature[] { serializerFeature29, serializerFeature30, serializerFeature31, serializerFeature32, serializerFeature33 };
        byte[] byteArray35 = com.alibaba.fastjson.JSON.toJSONBytes((java.lang.Object) "hi!", serializeFilterArray28, serializerFeatureArray34);
        java.lang.String str36 = com.alibaba.fastjson.JSON.toJSONString((java.lang.Object) serializerFeature17, serializeFilterArray19, serializerFeatureArray34);
        byte[] byteArray37 = com.alibaba.fastjson.JSON.toJSONBytes(obj14, serializeConfig15, (int) (byte) -1, serializerFeatureArray34);
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature38 = com.alibaba.fastjson.serializer.SerializerFeature.WriteTabAsSpecial;
        com.alibaba.fastjson.serializer.SerializeFilter[] serializeFilterArray40 = new com.alibaba.fastjson.serializer.SerializeFilter[] {};
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature41 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature42 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature43 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature44 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature45 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature[] serializerFeatureArray46 = new com.alibaba.fastjson.serializer.SerializerFeature[] { serializerFeature41, serializerFeature42, serializerFeature43, serializerFeature44, serializerFeature45 };
        byte[] byteArray47 = com.alibaba.fastjson.JSON.toJSONBytes((java.lang.Object) "hi!", serializeFilterArray40, serializerFeatureArray46);
        com.alibaba.fastjson.serializer.SerializeFilter[] serializeFilterArray49 = new com.alibaba.fastjson.serializer.SerializeFilter[] {};
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature50 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature51 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature52 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature53 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature54 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature[] serializerFeatureArray55 = new com.alibaba.fastjson.serializer.SerializerFeature[] { serializerFeature50, serializerFeature51, serializerFeature52, serializerFeature53, serializerFeature54 };
        byte[] byteArray56 = com.alibaba.fastjson.JSON.toJSONBytes((java.lang.Object) "hi!", serializeFilterArray49, serializerFeatureArray55);
        java.lang.String str57 = com.alibaba.fastjson.JSON.toJSONString((java.lang.Object) serializerFeature38, serializeFilterArray40, serializerFeatureArray55);
        java.lang.String str58 = com.alibaba.fastjson.JSON.toJSONString((java.lang.Object) byteArray37, serializerFeatureArray55);
        byte[] byteArray59 = com.alibaba.fastjson.JSON.toJSONBytes((java.lang.Object) (short) 10, serializerFeatureArray55);
        java.lang.String str60 = jSONObject1.toString(serializerFeatureArray55);
        org.junit.Assert.assertNotNull(objCollection2);
        org.junit.Assert.assertNull(booleanArray6);
        org.junit.Assert.assertTrue("'" + serializerFeature17 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteTabAsSpecial + "'", serializerFeature17.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteTabAsSpecial));
        org.junit.Assert.assertNotNull(serializeFilterArray19);
        org.junit.Assert.assertTrue("'" + serializerFeature20 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature20.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature21 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature21.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature22 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature22.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + serializerFeature23 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature23.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature24 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature24.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertNotNull(serializerFeatureArray25);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[39, 104, 105, 33, 39]");
        org.junit.Assert.assertNotNull(serializeFilterArray28);
        org.junit.Assert.assertTrue("'" + serializerFeature29 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature29.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature30 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature30.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature31 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature31.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + serializerFeature32 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature32.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature33 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature33.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertNotNull(serializerFeatureArray34);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[39, 104, 105, 33, 39]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "'WriteTabAsSpecial'" + "'", str36, "'WriteTabAsSpecial'");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[110, 117, 108, 108]");
        org.junit.Assert.assertTrue("'" + serializerFeature38 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteTabAsSpecial + "'", serializerFeature38.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteTabAsSpecial));
        org.junit.Assert.assertNotNull(serializeFilterArray40);
        org.junit.Assert.assertTrue("'" + serializerFeature41 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature41.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature42 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature42.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature43 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature43.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + serializerFeature44 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature44.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature45 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature45.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertNotNull(serializerFeatureArray46);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[39, 104, 105, 33, 39]");
        org.junit.Assert.assertNotNull(serializeFilterArray49);
        org.junit.Assert.assertTrue("'" + serializerFeature50 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature50.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature51 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature51.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature52 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature52.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + serializerFeature53 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature53.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature54 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature54.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertNotNull(serializerFeatureArray55);
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[39, 104, 105, 33, 39]");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "'WriteTabAsSpecial'" + "'", str57, "'WriteTabAsSpecial'");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "'bnVsb\004=='" + "'", str58, "'bnVsb\004=='");
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[49, 48]");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "{}" + "'", str60, "{}");
    }

    @Test
    public void test292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test292");
        java.lang.String str0 = com.alibaba.fastjson.util.IOUtils.FASTJSON_PROPERTIES;
        org.junit.Assert.assertEquals("'" + str0 + "' != '" + "fastjson.properties" + "'", str0, "fastjson.properties");
    }

    @Test
    public void test293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test293");
        com.alibaba.fastjson.serializer.SerializeWriter serializeWriter0 = new com.alibaba.fastjson.serializer.SerializeWriter();
        serializeWriter0.writeLong((long) 1);
    }

    @Test
    public void test294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test294");
        com.alibaba.fastjson.JSONObject jSONObject1 = new com.alibaba.fastjson.JSONObject(0);
        boolean boolean3 = jSONObject1.equals((java.lang.Object) (byte) 10);
        java.lang.Float float5 = jSONObject1.getFloat("UTF-8");
        com.alibaba.fastjson.JSONObject jSONObject6 = new com.alibaba.fastjson.JSONObject((java.util.Map<java.lang.String, java.lang.Object>) jSONObject1);
        java.lang.Double double8 = jSONObject1.getDouble("\"\"");
        java.sql.Timestamp timestamp10 = jSONObject1.getTimestamp("Negative initial size:");
        java.util.Set<java.lang.String> strSet11 = jSONObject1.keySet();
        java.lang.Double double13 = jSONObject1.getDouble(":false");
        com.alibaba.fastjson.JSONArray jSONArray15 = jSONObject1.getJSONArray("BeanToArray");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(float5);
        org.junit.Assert.assertNull(double8);
        org.junit.Assert.assertNull(timestamp10);
        org.junit.Assert.assertNotNull(strSet11);
        org.junit.Assert.assertNull(double13);
        org.junit.Assert.assertNull(jSONArray15);
    }

    @Test
    public void test295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test295");
        java.io.Writer writer0 = null;
        com.alibaba.fastjson.serializer.SerializeWriter serializeWriter2 = new com.alibaba.fastjson.serializer.SerializeWriter(writer0, 10);
        // The following exception was thrown during execution in test generation
        try {
            com.alibaba.fastjson.serializer.SerializeWriter serializeWriter6 = serializeWriter2.append((java.lang.CharSequence) "hi!", (int) (short) 0, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: 32");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test296");
        com.alibaba.fastjson.parser.ParseContext parseContext0 = null;
        com.alibaba.fastjson.parser.DefaultJSONParser.ResolveTask resolveTask2 = new com.alibaba.fastjson.parser.DefaultJSONParser.ResolveTask(parseContext0, "null");
        java.lang.String str3 = resolveTask2.referenceValue;
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "null" + "'", str3, "null");
    }

    @Test
    public void test297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test297");
        java.io.Writer writer0 = null;
        com.alibaba.fastjson.serializer.SerializeWriter serializeWriter2 = new com.alibaba.fastjson.serializer.SerializeWriter(writer0, 10);
        serializeWriter2.write((int) (byte) -1);
        int int5 = serializeWriter2.getBufferLength();
        serializeWriter2.writeFieldValue('4', "hi!", "1.0");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 10 + "'", int5 == 10);
    }

    @Test
    public void test298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test298");
        com.alibaba.fastjson.parser.ParserConfig parserConfig1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj3 = com.alibaba.fastjson.JSON.parse("UTF-8", parserConfig1, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test299");
        java.io.Writer writer0 = null;
        com.alibaba.fastjson.serializer.SerializeWriter serializeWriter2 = new com.alibaba.fastjson.serializer.SerializeWriter(writer0, 10);
        serializeWriter2.write((int) (byte) -1);
        int int5 = serializeWriter2.getBufferLength();
        serializeWriter2.writeFieldValue('a', "-9223372036854775808", (int) (byte) 10);
        serializeWriter2.writeFieldValue('4', "fastjson.compatibleWithFieldName", '4');
        java.math.BigDecimal bigDecimal16 = null;
        serializeWriter2.writeFieldValue('a', "{}", bigDecimal16);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 10 + "'", int5 == 10);
    }

    @Test
    public void test300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test300");
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature0 = com.alibaba.fastjson.serializer.SerializerFeature.WriteNullBooleanAsFalse;
        org.junit.Assert.assertTrue("'" + serializerFeature0 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteNullBooleanAsFalse + "'", serializerFeature0.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteNullBooleanAsFalse));
    }

    @Test
    public void test301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test301");
        com.alibaba.fastjson.parser.DefaultJSONParser defaultJSONParser1 = new com.alibaba.fastjson.parser.DefaultJSONParser(":true");
        com.alibaba.fastjson.parser.SymbolTable symbolTable2 = defaultJSONParser1.symbolTable;
        defaultJSONParser1.resolveStatus = (byte) -1;
        int int5 = defaultJSONParser1.getResolveStatus();
        org.junit.Assert.assertNotNull(symbolTable2);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
    }

    @Test
    public void test302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test302");
        char[] charArray0 = com.alibaba.fastjson.util.IOUtils.replaceChars;
        com.alibaba.fastjson.serializer.SerializeFilter[] serializeFilterArray4 = new com.alibaba.fastjson.serializer.SerializeFilter[] {};
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature5 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature6 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature7 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature8 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature9 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature[] serializerFeatureArray10 = new com.alibaba.fastjson.serializer.SerializerFeature[] { serializerFeature5, serializerFeature6, serializerFeature7, serializerFeature8, serializerFeature9 };
        byte[] byteArray11 = com.alibaba.fastjson.JSON.toJSONBytes((java.lang.Object) "hi!", serializeFilterArray4, serializerFeatureArray10);
        // The following exception was thrown during execution in test generation
        try {
            int int12 = com.alibaba.fastjson.util.IOUtils.encodeUTF8(charArray0, 4096, 2, byteArray11);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 4096");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray0);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray0), "01234567btnvfr\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\"\000\000\000\000'\000\000\000\000\000\000\000/\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\\");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray0), "01234567btnvfr\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\"\000\000\000\000'\000\000\000\000\000\000\000/\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\\");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray0), "[0, 1, 2, 3, 4, 5, 6, 7, b, t, n, v, f, r, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \", \000, \000, \000, \000, ', \000, \000, \000, \000, \000, \000, \000, /, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \\]");
        org.junit.Assert.assertNotNull(serializeFilterArray4);
        org.junit.Assert.assertTrue("'" + serializerFeature5 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature5.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature6 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature6.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature7 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature7.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + serializerFeature8 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature8.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature9 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature9.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertNotNull(serializerFeatureArray10);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[39, 104, 105, 33, 39]");
    }

    @Test
    public void test303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test303");
        com.alibaba.fastjson.parser.ParseContext parseContext0 = null;
        com.alibaba.fastjson.parser.DefaultJSONParser.ResolveTask resolveTask2 = new com.alibaba.fastjson.parser.DefaultJSONParser.ResolveTask(parseContext0, "null");
        com.alibaba.fastjson.parser.ParseContext parseContext3 = resolveTask2.ownerContext;
        com.alibaba.fastjson.parser.ParseContext parseContext4 = resolveTask2.ownerContext;
        org.junit.Assert.assertNull(parseContext3);
        org.junit.Assert.assertNull(parseContext4);
    }

    @Test
    public void test304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test304");
        char[] charArray0 = new char[] {};
        byte[] byteArray6 = com.alibaba.fastjson.util.IOUtils.decodeBase64("{}", 0, (int) (short) 1);
        int int7 = com.alibaba.fastjson.util.IOUtils.encodeUTF8(charArray0, 3089, 0, byteArray6);
        java.nio.charset.CharsetDecoder charsetDecoder10 = null;
        com.alibaba.fastjson.serializer.SerializeFilter[] serializeFilterArray12 = new com.alibaba.fastjson.serializer.SerializeFilter[] {};
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature13 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature14 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature15 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature16 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature17 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature[] serializerFeatureArray18 = new com.alibaba.fastjson.serializer.SerializerFeature[] { serializerFeature13, serializerFeature14, serializerFeature15, serializerFeature16, serializerFeature17 };
        byte[] byteArray19 = com.alibaba.fastjson.JSON.toJSONBytes((java.lang.Object) "hi!", serializeFilterArray12, serializerFeatureArray18);
        java.nio.charset.Charset charset22 = com.alibaba.fastjson.util.IOUtils.UTF8;
        java.lang.reflect.Type type23 = null;
        byte[] byteArray30 = new byte[] { (byte) 10, (byte) -1, (byte) 100, (byte) 10, (byte) 10, (byte) 1 };
        java.lang.reflect.Type type31 = null;
        com.alibaba.fastjson.parser.Feature feature32 = null;
        com.alibaba.fastjson.parser.Feature[] featureArray33 = new com.alibaba.fastjson.parser.Feature[] { feature32 };
        java.lang.Comparable<java.lang.String> strComparable34 = com.alibaba.fastjson.JSON.parseObject(byteArray30, type31, featureArray33);
        java.nio.charset.Charset charset35 = com.alibaba.fastjson.JSON.parseObject(byteArray19, 3089, (int) (short) -1, charset22, type23, featureArray33);
        com.alibaba.fastjson.serializer.SerializerFeature[] serializerFeatureArray37 = new com.alibaba.fastjson.serializer.SerializerFeature[] {};
        byte[] byteArray38 = com.alibaba.fastjson.JSON.toJSONBytes((java.lang.Object) 10.0d, serializerFeatureArray37);
        byte[] byteArray39 = com.alibaba.fastjson.JSON.toJSONBytes((java.lang.Object) featureArray33, serializerFeatureArray37);
        java.lang.Object obj40 = com.alibaba.fastjson.JSON.parse(byteArray6, (int) (byte) 100, (int) ' ', charsetDecoder10, featureArray33);
        org.junit.Assert.assertNotNull(charArray0);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray0), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray0), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray0), "[]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(serializeFilterArray12);
        org.junit.Assert.assertTrue("'" + serializerFeature13 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature13.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature14 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature14.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature15 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature15.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + serializerFeature16 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature16.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature17 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature17.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertNotNull(serializerFeatureArray18);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[39, 104, 105, 33, 39]");
        org.junit.Assert.assertNotNull(charset22);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[10, -1, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(featureArray33);
        org.junit.Assert.assertNull(strComparable34);
        org.junit.Assert.assertNull(charset35);
        org.junit.Assert.assertNotNull(serializerFeatureArray37);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[49, 48, 46, 48]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[91, 110, 117, 108, 108, 93]");
        org.junit.Assert.assertNull(obj40);
    }

    @Test
    public void test305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test305");
        com.alibaba.fastjson.parser.DefaultJSONParser defaultJSONParser1 = new com.alibaba.fastjson.parser.DefaultJSONParser(":true");
        com.alibaba.fastjson.parser.SymbolTable symbolTable2 = defaultJSONParser1.symbolTable;
        com.alibaba.fastjson.parser.DefaultJSONParser defaultJSONParser4 = new com.alibaba.fastjson.parser.DefaultJSONParser(":true");
        com.alibaba.fastjson.parser.deserializer.FieldTypeResolver fieldTypeResolver5 = defaultJSONParser4.getFieldTypeResolver();
        java.lang.Object obj6 = defaultJSONParser4.input;
        com.alibaba.fastjson.JSON.handleResovleTask(defaultJSONParser1, defaultJSONParser4);
        java.lang.Object obj9 = defaultJSONParser4.getObject("1.0");
        com.alibaba.fastjson.JSONObject jSONObject11 = new com.alibaba.fastjson.JSONObject(0);
        java.util.Collection<java.lang.Object> objCollection12 = jSONObject11.values();
        // The following exception was thrown during execution in test generation
        try {
            defaultJSONParser4.parseArray((java.util.Collection) objCollection12);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson.JSONException; message: syntax error, expect [, actual :, pos 0, fieldName null");
        } catch (com.alibaba.fastjson.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(symbolTable2);
        org.junit.Assert.assertNull(fieldTypeResolver5);
        org.junit.Assert.assertEquals("'" + obj6 + "' != '" + ":true" + "'", obj6, ":true");
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNotNull(objCollection12);
    }

    @Test
    public void test306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test306");
        com.alibaba.fastjson.JSONObject jSONObject1 = new com.alibaba.fastjson.JSONObject(0);
        boolean boolean3 = jSONObject1.equals((java.lang.Object) (byte) 10);
        java.util.Set<java.util.Map.Entry<java.lang.String, java.lang.Object>> strEntrySet4 = jSONObject1.entrySet();
        short short6 = jSONObject1.getShortValue("false");
        java.lang.Object obj7 = com.alibaba.fastjson.JSON.toJSON((java.lang.Object) jSONObject1);
        com.alibaba.fastjson.serializer.SerializerFeature[] serializerFeatureArray9 = new com.alibaba.fastjson.serializer.SerializerFeature[] {};
        byte[] byteArray10 = com.alibaba.fastjson.JSON.toJSONBytes((java.lang.Object) 10.0d, serializerFeatureArray9);
        byte[] byteArray11 = com.alibaba.fastjson.JSON.toJSONBytes((java.lang.Object) jSONObject1, serializerFeatureArray9);
        java.nio.charset.Charset charset14 = com.alibaba.fastjson.util.IOUtils.UTF8;
        com.alibaba.fastjson.JSONObject jSONObject16 = new com.alibaba.fastjson.JSONObject(0);
        boolean boolean18 = jSONObject16.equals((java.lang.Object) (byte) 10);
        java.util.Set<java.util.Map.Entry<java.lang.String, java.lang.Object>> strEntrySet19 = jSONObject16.entrySet();
        short short21 = jSONObject16.getShortValue("UTF-8");
        java.lang.String str23 = jSONObject16.getString("null:");
        java.lang.Class<?> wildcardClass24 = jSONObject16.getClass();
        com.alibaba.fastjson.serializer.SerializeFilter[] serializeFilterArray26 = new com.alibaba.fastjson.serializer.SerializeFilter[] {};
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature27 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature28 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature29 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature30 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature31 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature[] serializerFeatureArray32 = new com.alibaba.fastjson.serializer.SerializerFeature[] { serializerFeature27, serializerFeature28, serializerFeature29, serializerFeature30, serializerFeature31 };
        byte[] byteArray33 = com.alibaba.fastjson.JSON.toJSONBytes((java.lang.Object) "hi!", serializeFilterArray26, serializerFeatureArray32);
        java.nio.charset.Charset charset36 = com.alibaba.fastjson.util.IOUtils.UTF8;
        java.lang.reflect.Type type37 = null;
        byte[] byteArray44 = new byte[] { (byte) 10, (byte) -1, (byte) 100, (byte) 10, (byte) 10, (byte) 1 };
        java.lang.reflect.Type type45 = null;
        com.alibaba.fastjson.parser.Feature feature46 = null;
        com.alibaba.fastjson.parser.Feature[] featureArray47 = new com.alibaba.fastjson.parser.Feature[] { feature46 };
        java.lang.Comparable<java.lang.String> strComparable48 = com.alibaba.fastjson.JSON.parseObject(byteArray44, type45, featureArray47);
        java.nio.charset.Charset charset49 = com.alibaba.fastjson.JSON.parseObject(byteArray33, 3089, (int) (short) -1, charset36, type37, featureArray47);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Appendable appendable50 = com.alibaba.fastjson.JSON.parseObject(byteArray11, 10, (int) (byte) 100, charset14, (java.lang.reflect.Type) wildcardClass24, featureArray47);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(strEntrySet4);
        org.junit.Assert.assertTrue("'" + short6 + "' != '" + (short) 0 + "'", short6 == (short) 0);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "{}");
        org.junit.Assert.assertNotNull(serializerFeatureArray9);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[49, 48, 46, 48]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[123, 125]");
        org.junit.Assert.assertNotNull(charset14);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(strEntrySet19);
        org.junit.Assert.assertTrue("'" + short21 + "' != '" + (short) 0 + "'", short21 == (short) 0);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(serializeFilterArray26);
        org.junit.Assert.assertTrue("'" + serializerFeature27 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature27.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature28 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature28.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature29 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature29.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + serializerFeature30 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature30.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature31 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature31.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertNotNull(serializerFeatureArray32);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[39, 104, 105, 33, 39]");
        org.junit.Assert.assertNotNull(charset36);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[10, -1, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(featureArray47);
        org.junit.Assert.assertNull(strComparable48);
        org.junit.Assert.assertNull(charset49);
    }

    @Test
    public void test307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test307");
        char[] charArray2 = new char[] {};
        byte[] byteArray8 = com.alibaba.fastjson.util.IOUtils.decodeBase64("{}", 0, (int) (short) 1);
        int int9 = com.alibaba.fastjson.util.IOUtils.encodeUTF8(charArray2, 3089, 0, byteArray8);
        // The following exception was thrown during execution in test generation
        try {
            com.alibaba.fastjson.util.IOUtils.getChars((long) (byte) 0, (-1), charArray2);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray2);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray2), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray2), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test308");
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature0 = com.alibaba.fastjson.serializer.SerializerFeature.WriteTabAsSpecial;
        com.alibaba.fastjson.serializer.SerializeFilter[] serializeFilterArray2 = new com.alibaba.fastjson.serializer.SerializeFilter[] {};
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature3 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature4 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature5 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature6 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature7 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature[] serializerFeatureArray8 = new com.alibaba.fastjson.serializer.SerializerFeature[] { serializerFeature3, serializerFeature4, serializerFeature5, serializerFeature6, serializerFeature7 };
        byte[] byteArray9 = com.alibaba.fastjson.JSON.toJSONBytes((java.lang.Object) "hi!", serializeFilterArray2, serializerFeatureArray8);
        com.alibaba.fastjson.serializer.SerializeFilter[] serializeFilterArray11 = new com.alibaba.fastjson.serializer.SerializeFilter[] {};
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature12 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature13 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature14 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature15 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature16 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature[] serializerFeatureArray17 = new com.alibaba.fastjson.serializer.SerializerFeature[] { serializerFeature12, serializerFeature13, serializerFeature14, serializerFeature15, serializerFeature16 };
        byte[] byteArray18 = com.alibaba.fastjson.JSON.toJSONBytes((java.lang.Object) "hi!", serializeFilterArray11, serializerFeatureArray17);
        java.lang.String str19 = com.alibaba.fastjson.JSON.toJSONString((java.lang.Object) serializerFeature0, serializeFilterArray2, serializerFeatureArray17);
        com.alibaba.fastjson.serializer.SerializeConfig serializeConfig20 = null;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature21 = com.alibaba.fastjson.serializer.SerializerFeature.WriteTabAsSpecial;
        com.alibaba.fastjson.serializer.SerializeFilter[] serializeFilterArray23 = new com.alibaba.fastjson.serializer.SerializeFilter[] {};
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature24 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature25 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature26 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature27 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature28 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature[] serializerFeatureArray29 = new com.alibaba.fastjson.serializer.SerializerFeature[] { serializerFeature24, serializerFeature25, serializerFeature26, serializerFeature27, serializerFeature28 };
        byte[] byteArray30 = com.alibaba.fastjson.JSON.toJSONBytes((java.lang.Object) "hi!", serializeFilterArray23, serializerFeatureArray29);
        com.alibaba.fastjson.serializer.SerializeFilter[] serializeFilterArray32 = new com.alibaba.fastjson.serializer.SerializeFilter[] {};
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature33 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature34 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature35 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature36 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature37 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature[] serializerFeatureArray38 = new com.alibaba.fastjson.serializer.SerializerFeature[] { serializerFeature33, serializerFeature34, serializerFeature35, serializerFeature36, serializerFeature37 };
        byte[] byteArray39 = com.alibaba.fastjson.JSON.toJSONBytes((java.lang.Object) "hi!", serializeFilterArray32, serializerFeatureArray38);
        java.lang.String str40 = com.alibaba.fastjson.JSON.toJSONString((java.lang.Object) serializerFeature21, serializeFilterArray23, serializerFeatureArray38);
        com.alibaba.fastjson.serializer.SerializeFilter[] serializeFilterArray43 = new com.alibaba.fastjson.serializer.SerializeFilter[] {};
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature44 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature45 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature46 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature47 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature48 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature[] serializerFeatureArray49 = new com.alibaba.fastjson.serializer.SerializerFeature[] { serializerFeature44, serializerFeature45, serializerFeature46, serializerFeature47, serializerFeature48 };
        byte[] byteArray50 = com.alibaba.fastjson.JSON.toJSONBytes((java.lang.Object) "hi!", serializeFilterArray43, serializerFeatureArray49);
        java.nio.charset.Charset charset53 = com.alibaba.fastjson.util.IOUtils.UTF8;
        java.lang.reflect.Type type54 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) -1, (byte) 100, (byte) 10, (byte) 10, (byte) 1 };
        java.lang.reflect.Type type62 = null;
        com.alibaba.fastjson.parser.Feature feature63 = null;
        com.alibaba.fastjson.parser.Feature[] featureArray64 = new com.alibaba.fastjson.parser.Feature[] { feature63 };
        java.lang.Comparable<java.lang.String> strComparable65 = com.alibaba.fastjson.JSON.parseObject(byteArray61, type62, featureArray64);
        java.nio.charset.Charset charset66 = com.alibaba.fastjson.JSON.parseObject(byteArray50, 3089, (int) (short) -1, charset53, type54, featureArray64);
        com.alibaba.fastjson.serializer.SerializerFeature[] serializerFeatureArray68 = new com.alibaba.fastjson.serializer.SerializerFeature[] {};
        byte[] byteArray69 = com.alibaba.fastjson.JSON.toJSONBytes((java.lang.Object) 10.0d, serializerFeatureArray68);
        byte[] byteArray70 = com.alibaba.fastjson.JSON.toJSONBytes((java.lang.Object) featureArray64, serializerFeatureArray68);
        com.alibaba.fastjson.serializer.SerializeWriter serializeWriter71 = new com.alibaba.fastjson.serializer.SerializeWriter(serializerFeatureArray68);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray72 = com.alibaba.fastjson.JSON.toJSONBytes((java.lang.Object) str19, serializeConfig20, serializeFilterArray23, 2, serializerFeatureArray68);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + serializerFeature0 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteTabAsSpecial + "'", serializerFeature0.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteTabAsSpecial));
        org.junit.Assert.assertNotNull(serializeFilterArray2);
        org.junit.Assert.assertTrue("'" + serializerFeature3 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature3.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature4 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature4.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature5 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature5.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + serializerFeature6 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature6.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature7 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature7.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertNotNull(serializerFeatureArray8);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[39, 104, 105, 33, 39]");
        org.junit.Assert.assertNotNull(serializeFilterArray11);
        org.junit.Assert.assertTrue("'" + serializerFeature12 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature12.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature13 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature13.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature14 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature14.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + serializerFeature15 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature15.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature16 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature16.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertNotNull(serializerFeatureArray17);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[39, 104, 105, 33, 39]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "'WriteTabAsSpecial'" + "'", str19, "'WriteTabAsSpecial'");
        org.junit.Assert.assertTrue("'" + serializerFeature21 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteTabAsSpecial + "'", serializerFeature21.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteTabAsSpecial));
        org.junit.Assert.assertNotNull(serializeFilterArray23);
        org.junit.Assert.assertTrue("'" + serializerFeature24 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature24.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature25 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature25.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature26 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature26.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + serializerFeature27 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature27.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature28 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature28.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertNotNull(serializerFeatureArray29);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[39, 104, 105, 33, 39]");
        org.junit.Assert.assertNotNull(serializeFilterArray32);
        org.junit.Assert.assertTrue("'" + serializerFeature33 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature33.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature34 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature34.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature35 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature35.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + serializerFeature36 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature36.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature37 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature37.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertNotNull(serializerFeatureArray38);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[39, 104, 105, 33, 39]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "'WriteTabAsSpecial'" + "'", str40, "'WriteTabAsSpecial'");
        org.junit.Assert.assertNotNull(serializeFilterArray43);
        org.junit.Assert.assertTrue("'" + serializerFeature44 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature44.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature45 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature45.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature46 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature46.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + serializerFeature47 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature47.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature48 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature48.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertNotNull(serializerFeatureArray49);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[39, 104, 105, 33, 39]");
        org.junit.Assert.assertNotNull(charset53);
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, -1, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(featureArray64);
        org.junit.Assert.assertNull(strComparable65);
        org.junit.Assert.assertNull(charset66);
        org.junit.Assert.assertNotNull(serializerFeatureArray68);
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[49, 48, 46, 48]");
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[91, 110, 117, 108, 108, 93]");
    }

    @Test
    public void test309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test309");
        com.alibaba.fastjson.JSONObject jSONObject1 = new com.alibaba.fastjson.JSONObject(0);
        java.util.Collection<java.lang.Object> objCollection2 = jSONObject1.values();
        com.alibaba.fastjson.JSONObject jSONObject3 = new com.alibaba.fastjson.JSONObject((java.util.Map<java.lang.String, java.lang.Object>) jSONObject1);
        com.alibaba.fastjson.TypeReference typeReference5 = null;
        boolean[] booleanArray6 = jSONObject1.getObject("fastjson.serializer_buffer_threshold", typeReference5);
        short short8 = jSONObject1.getShortValue("{fastjson.serializer_buffer_threshold:{}}");
        org.junit.Assert.assertNotNull(objCollection2);
        org.junit.Assert.assertNull(booleanArray6);
        org.junit.Assert.assertTrue("'" + short8 + "' != '" + (short) 0 + "'", short8 == (short) 0);
    }

    @Test
    public void test310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test310");
        com.alibaba.fastjson.parser.ParserConfig parserConfig1 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.alibaba.fastjson.parser.DefaultJSONParser defaultJSONParser2 = new com.alibaba.fastjson.parser.DefaultJSONParser("1.0", parserConfig1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test311");
        com.alibaba.fastjson.JSON.DEFAULT_GENERATE_FEATURE = (byte) 100;
    }

    @Test
    public void test312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test312");
        byte[] byteArray0 = com.alibaba.fastjson.util.IOUtils.specicalFlags_singleQuotes;
        java.nio.charset.CharsetDecoder charsetDecoder3 = null;
        byte[] byteArray4 = com.alibaba.fastjson.util.IOUtils.specicalFlags_singleQuotes;
        char[] charArray7 = com.alibaba.fastjson.util.IOUtils.CA;
        int int8 = com.alibaba.fastjson.util.IOUtils.decodeUTF8(byteArray4, (int) (byte) 0, (int) (short) 1, charArray7);
        java.nio.charset.Charset charset11 = com.alibaba.fastjson.util.IOUtils.UTF8;
        java.lang.reflect.Type type12 = null;
        com.alibaba.fastjson.parser.ParserConfig parserConfig13 = null;
        com.alibaba.fastjson.parser.deserializer.ParseProcess parseProcess14 = null;
        char[] charArray19 = new char[] { '#', '#', ' ' };
        byte[] byteArray22 = com.alibaba.fastjson.util.IOUtils.decodeBase64(charArray19, 10, (int) (byte) 0);
        com.alibaba.fastjson.serializer.SerializeFilter[] serializeFilterArray24 = new com.alibaba.fastjson.serializer.SerializeFilter[] {};
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature25 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature26 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature27 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature28 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature29 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature[] serializerFeatureArray30 = new com.alibaba.fastjson.serializer.SerializerFeature[] { serializerFeature25, serializerFeature26, serializerFeature27, serializerFeature28, serializerFeature29 };
        byte[] byteArray31 = com.alibaba.fastjson.JSON.toJSONBytes((java.lang.Object) "hi!", serializeFilterArray24, serializerFeatureArray30);
        java.nio.charset.Charset charset34 = com.alibaba.fastjson.util.IOUtils.UTF8;
        java.lang.reflect.Type type35 = null;
        byte[] byteArray42 = new byte[] { (byte) 10, (byte) -1, (byte) 100, (byte) 10, (byte) 10, (byte) 1 };
        java.lang.reflect.Type type43 = null;
        com.alibaba.fastjson.parser.Feature feature44 = null;
        com.alibaba.fastjson.parser.Feature[] featureArray45 = new com.alibaba.fastjson.parser.Feature[] { feature44 };
        java.lang.Comparable<java.lang.String> strComparable46 = com.alibaba.fastjson.JSON.parseObject(byteArray42, type43, featureArray45);
        java.nio.charset.Charset charset47 = com.alibaba.fastjson.JSON.parseObject(byteArray31, 3089, (int) (short) -1, charset34, type35, featureArray45);
        com.alibaba.fastjson.JSONObject jSONObject49 = new com.alibaba.fastjson.JSONObject(0);
        boolean boolean51 = jSONObject49.equals((java.lang.Object) (byte) 10);
        java.util.Set<java.util.Map.Entry<java.lang.String, java.lang.Object>> strEntrySet52 = jSONObject49.entrySet();
        short short54 = jSONObject49.getShortValue("UTF-8");
        java.lang.String str56 = jSONObject49.getString("null:");
        java.lang.Class<?> wildcardClass57 = jSONObject49.getClass();
        com.alibaba.fastjson.parser.ParserConfig parserConfig58 = null;
        com.alibaba.fastjson.parser.deserializer.ParseProcess parseProcess59 = null;
        com.alibaba.fastjson.parser.Feature[] featureArray61 = new com.alibaba.fastjson.parser.Feature[] {};
        java.text.DateFormat dateFormat62 = com.alibaba.fastjson.JSON.parseObject(byteArray22, charset47, (java.lang.reflect.Type) wildcardClass57, parserConfig58, parseProcess59, (int) '4', featureArray61);
        java.util.AbstractCollection<java.lang.String> strCollection63 = com.alibaba.fastjson.JSON.parseObject(byteArray4, 4096, (-1), charset11, type12, parserConfig13, parseProcess14, (int) 'a', featureArray61);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj64 = com.alibaba.fastjson.JSON.parse(byteArray0, (int) ' ', (int) (short) 100, charsetDecoder3, featureArray61);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray0), "[4, 4, 4, 4, 4, 4, 4, 4, 1, 1, 1, 4, 1, 1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[4, 4, 4, 4, 4, 4, 4, 4, 1, 1, 1, 4, 1, 1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0]");
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "\004\000\000\000\000\000\000\000\000\000KLMNOPQRSTUVWXYZabcde0ghijklmnopqrstuvwxyz0123456789+/");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "\004\000\000\000\000\000\000\000\000\000KLMNOPQRSTUVWXYZabcde0ghijklmnopqrstuvwxyz0123456789+/");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[\004, \000, \000, \000, \000, \000, \000, \000, \000, \000, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z, a, b, c, d, e, 0, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, +, /]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(charset11);
        org.junit.Assert.assertNotNull(charArray19);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray19), "## ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray19), "## ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray19), "[#, #,  ]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertNotNull(serializeFilterArray24);
        org.junit.Assert.assertTrue("'" + serializerFeature25 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature25.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature26 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature26.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature27 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature27.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + serializerFeature28 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature28.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature29 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature29.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertNotNull(serializerFeatureArray30);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[34, 104, 105, 33, 34]");
        org.junit.Assert.assertNotNull(charset34);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[10, -1, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(featureArray45);
        org.junit.Assert.assertNull(strComparable46);
        org.junit.Assert.assertNull(charset47);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(strEntrySet52);
        org.junit.Assert.assertTrue("'" + short54 + "' != '" + (short) 0 + "'", short54 == (short) 0);
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertNotNull(wildcardClass57);
        org.junit.Assert.assertNotNull(featureArray61);
        org.junit.Assert.assertNull(dateFormat62);
        org.junit.Assert.assertNull(strCollection63);
    }

    @Test
    public void test313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test313");
        com.alibaba.fastjson.parser.DefaultJSONParser defaultJSONParser1 = new com.alibaba.fastjson.parser.DefaultJSONParser(":true");
        com.alibaba.fastjson.parser.SymbolTable symbolTable2 = defaultJSONParser1.symbolTable;
        com.alibaba.fastjson.parser.DefaultJSONParser defaultJSONParser4 = new com.alibaba.fastjson.parser.DefaultJSONParser(":true");
        com.alibaba.fastjson.parser.deserializer.FieldTypeResolver fieldTypeResolver5 = defaultJSONParser4.getFieldTypeResolver();
        java.lang.Object obj6 = defaultJSONParser4.input;
        com.alibaba.fastjson.JSON.handleResovleTask(defaultJSONParser1, defaultJSONParser4);
        java.lang.Object obj9 = defaultJSONParser4.getObject("1.0");
        com.alibaba.fastjson.parser.DefaultJSONParser defaultJSONParser11 = new com.alibaba.fastjson.parser.DefaultJSONParser(":true");
        com.alibaba.fastjson.parser.SymbolTable symbolTable12 = defaultJSONParser11.symbolTable;
        java.lang.String str13 = defaultJSONParser11.getDateFomartPattern();
        com.alibaba.fastjson.parser.ParseContext parseContext14 = null;
        com.alibaba.fastjson.parser.DefaultJSONParser.ResolveTask resolveTask16 = new com.alibaba.fastjson.parser.DefaultJSONParser.ResolveTask(parseContext14, "null");
        com.alibaba.fastjson.parser.ParseContext parseContext17 = resolveTask16.context;
        defaultJSONParser11.addResolveTask(resolveTask16);
        defaultJSONParser4.addResolveTask(resolveTask16);
        org.junit.Assert.assertNotNull(symbolTable2);
        org.junit.Assert.assertNull(fieldTypeResolver5);
        org.junit.Assert.assertEquals("'" + obj6 + "' != '" + ":true" + "'", obj6, ":true");
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNotNull(symbolTable12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Negative initial size:" + "'", str13, "Negative initial size:");
        org.junit.Assert.assertNull(parseContext17);
    }

    @Test
    public void test314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test314");
        com.alibaba.fastjson.JSONException jSONException2 = new com.alibaba.fastjson.JSONException("hi!");
        com.alibaba.fastjson.JSONException jSONException3 = new com.alibaba.fastjson.JSONException("", (java.lang.Throwable) jSONException2);
        java.lang.Throwable[] throwableArray4 = jSONException2.getSuppressed();
        com.alibaba.fastjson.JSONException jSONException7 = new com.alibaba.fastjson.JSONException("hi!");
        com.alibaba.fastjson.JSONException jSONException8 = new com.alibaba.fastjson.JSONException("", (java.lang.Throwable) jSONException7);
        jSONException2.addSuppressed((java.lang.Throwable) jSONException7);
        org.junit.Assert.assertNotNull(throwableArray4);
    }

    @Test
    public void test315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test315");
        // The following exception was thrown during execution in test generation
        try {
            com.alibaba.fastjson.JSONObject jSONObject2 = new com.alibaba.fastjson.JSONObject((int) (short) -1, true);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal initial capacity: -1");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test316");
        java.io.Writer writer0 = null;
        com.alibaba.fastjson.serializer.SerializeWriter serializeWriter2 = new com.alibaba.fastjson.serializer.SerializeWriter(writer0, 10);
        serializeWriter2.write((int) (byte) -1);
        com.alibaba.fastjson.serializer.SerializeWriter serializeWriter6 = serializeWriter2.append('a');
        java.io.OutputStream outputStream7 = null;
        java.nio.charset.Charset charset8 = com.alibaba.fastjson.util.IOUtils.UTF8;
        // The following exception was thrown during execution in test generation
        try {
            serializeWriter2.writeTo(outputStream7, charset8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(serializeWriter6);
        org.junit.Assert.assertNotNull(charset8);
    }

    @Test
    public void test317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test317");
        byte[] byteArray0 = null;
        java.nio.charset.CharsetDecoder charsetDecoder3 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj5 = com.alibaba.fastjson.JSON.parse(byteArray0, (int) (short) 10, (int) ' ', charsetDecoder3, 3089);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test318");
        com.alibaba.fastjson.JSONObject jSONObject1 = new com.alibaba.fastjson.JSONObject(0);
        boolean boolean3 = jSONObject1.equals((java.lang.Object) (byte) 10);
        java.lang.Float float5 = jSONObject1.getFloat("UTF-8");
        com.alibaba.fastjson.parser.ParserConfig parserConfig6 = null;
        java.lang.Object obj7 = com.alibaba.fastjson.JSON.toJSON((java.lang.Object) jSONObject1, parserConfig6);
        com.alibaba.fastjson.JSONObject jSONObject9 = jSONObject1.fluentRemove((java.lang.Object) 1.0d);
        boolean boolean11 = jSONObject9.containsKey((java.lang.Object) 2);
        java.lang.Byte byte13 = jSONObject9.getByte("fastjson.compatibleWithJavaBean");
        com.alibaba.fastjson.parser.ParserConfig parserConfig14 = null;
        java.lang.Object obj15 = com.alibaba.fastjson.JSON.toJSON((java.lang.Object) "fastjson.compatibleWithJavaBean", parserConfig14);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(float5);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "{}");
        org.junit.Assert.assertNotNull(jSONObject9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(byte13);
        org.junit.Assert.assertEquals("'" + obj15 + "' != '" + "fastjson.compatibleWithJavaBean" + "'", obj15, "fastjson.compatibleWithJavaBean");
    }

    @Test
    public void test319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test319");
        com.alibaba.fastjson.JSONObject jSONObject1 = new com.alibaba.fastjson.JSONObject(0);
        boolean boolean3 = jSONObject1.equals((java.lang.Object) (byte) 10);
        java.lang.Integer int5 = jSONObject1.getInteger("hi!");
        boolean boolean7 = jSONObject1.getBooleanValue("-9223372036854775808");
        com.alibaba.fastjson.JSONObject jSONObject8 = jSONObject1.clone();
        com.alibaba.fastjson.JSONObject jSONObject10 = new com.alibaba.fastjson.JSONObject(0);
        boolean boolean12 = jSONObject10.equals((java.lang.Object) (byte) 10);
        java.lang.Integer int14 = jSONObject10.getInteger("hi!");
        java.math.BigDecimal bigDecimal16 = jSONObject10.getBigDecimal("true");
        java.lang.Boolean boolean18 = jSONObject10.getBoolean("'WriteMapNullValue'");
        java.sql.Date date20 = jSONObject10.getSqlDate(", minimumCapacity=");
        java.lang.Class<?> wildcardClass21 = jSONObject10.getClass();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.CharSequence charSequence22 = jSONObject1.toJavaObject((java.lang.reflect.Type) wildcardClass21);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Cannot cast com.alibaba.fastjson.JSONObject to java.lang.CharSequence");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(int5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSONObject8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(int14);
        org.junit.Assert.assertNull(bigDecimal16);
        org.junit.Assert.assertNull(boolean18);
        org.junit.Assert.assertNull(date20);
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test320");
        com.alibaba.fastjson.parser.DefaultJSONParser defaultJSONParser1 = new com.alibaba.fastjson.parser.DefaultJSONParser(":true");
        com.alibaba.fastjson.parser.deserializer.FieldTypeResolver fieldTypeResolver2 = defaultJSONParser1.getFieldTypeResolver();
        java.io.Writer writer3 = null;
        com.alibaba.fastjson.serializer.SerializeWriter serializeWriter5 = new com.alibaba.fastjson.serializer.SerializeWriter(writer3, 10);
        serializeWriter5.writeStringWithDoubleQuote("'WriteTabAsSpecial'", '4');
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature9 = com.alibaba.fastjson.serializer.SerializerFeature.WriteTabAsSpecial;
        com.alibaba.fastjson.serializer.SerializeFilter[] serializeFilterArray11 = new com.alibaba.fastjson.serializer.SerializeFilter[] {};
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature12 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature13 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature14 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature15 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature16 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature[] serializerFeatureArray17 = new com.alibaba.fastjson.serializer.SerializerFeature[] { serializerFeature12, serializerFeature13, serializerFeature14, serializerFeature15, serializerFeature16 };
        byte[] byteArray18 = com.alibaba.fastjson.JSON.toJSONBytes((java.lang.Object) "hi!", serializeFilterArray11, serializerFeatureArray17);
        com.alibaba.fastjson.serializer.SerializeFilter[] serializeFilterArray20 = new com.alibaba.fastjson.serializer.SerializeFilter[] {};
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature21 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature22 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature23 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature24 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature25 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature[] serializerFeatureArray26 = new com.alibaba.fastjson.serializer.SerializerFeature[] { serializerFeature21, serializerFeature22, serializerFeature23, serializerFeature24, serializerFeature25 };
        byte[] byteArray27 = com.alibaba.fastjson.JSON.toJSONBytes((java.lang.Object) "hi!", serializeFilterArray20, serializerFeatureArray26);
        java.lang.String str28 = com.alibaba.fastjson.JSON.toJSONString((java.lang.Object) serializerFeature9, serializeFilterArray11, serializerFeatureArray26);
        com.alibaba.fastjson.serializer.SerializeWriter serializeWriter29 = new com.alibaba.fastjson.serializer.SerializeWriter((java.io.Writer) serializeWriter5, serializerFeatureArray26);
        serializeWriter29.writeFloat((float) (byte) 0, false);
        defaultJSONParser1.handleResovleTask((java.lang.Object) false);
        com.alibaba.fastjson.parser.ParseContext parseContext34 = null;
        com.alibaba.fastjson.parser.ParseContext parseContext37 = defaultJSONParser1.setContext(parseContext34, (java.lang.Object) "{fastjson.serializer_buffer_threshold:{}}", (java.lang.Object) "com.alibaba.fastjson.JSONException: hi!");
        com.alibaba.fastjson.parser.DefaultJSONParser.ResolveTask resolveTask39 = new com.alibaba.fastjson.parser.DefaultJSONParser.ResolveTask(parseContext37, "fastjson.compatibleWithJavaBean");
        com.alibaba.fastjson.parser.DefaultJSONParser.ResolveTask resolveTask41 = new com.alibaba.fastjson.parser.DefaultJSONParser.ResolveTask(parseContext37, "{}");
        org.junit.Assert.assertNull(fieldTypeResolver2);
        org.junit.Assert.assertTrue("'" + serializerFeature9 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteTabAsSpecial + "'", serializerFeature9.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteTabAsSpecial));
        org.junit.Assert.assertNotNull(serializeFilterArray11);
        org.junit.Assert.assertTrue("'" + serializerFeature12 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature12.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature13 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature13.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature14 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature14.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + serializerFeature15 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature15.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature16 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature16.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertNotNull(serializerFeatureArray17);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[34, 104, 105, 33, 34]");
        org.junit.Assert.assertNotNull(serializeFilterArray20);
        org.junit.Assert.assertTrue("'" + serializerFeature21 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature21.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature22 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature22.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature23 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature23.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + serializerFeature24 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature24.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature25 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature25.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertNotNull(serializerFeatureArray26);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[34, 104, 105, 33, 34]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "\"WriteTabAsSpecial\"" + "'", str28, "\"WriteTabAsSpecial\"");
        org.junit.Assert.assertNotNull(parseContext37);
    }

    @Test
    public void test321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test321");
        com.alibaba.fastjson.JSONObject jSONObject1 = new com.alibaba.fastjson.JSONObject(0);
        boolean boolean3 = jSONObject1.equals((java.lang.Object) (byte) 10);
        java.lang.Float float5 = jSONObject1.getFloat("UTF-8");
        com.alibaba.fastjson.JSONObject jSONObject6 = new com.alibaba.fastjson.JSONObject((java.util.Map<java.lang.String, java.lang.Object>) jSONObject1);
        java.lang.Double double8 = jSONObject6.getDouble("writer not null");
        java.lang.Long long10 = jSONObject6.getLong("false");
        java.lang.Object obj11 = null;
        com.alibaba.fastjson.serializer.SerializeFilter serializeFilter12 = null;
        com.alibaba.fastjson.JSONObject jSONObject14 = new com.alibaba.fastjson.JSONObject(0);
        boolean boolean16 = jSONObject14.equals((java.lang.Object) (byte) 10);
        java.util.Set<java.util.Map.Entry<java.lang.String, java.lang.Object>> strEntrySet17 = jSONObject14.entrySet();
        com.alibaba.fastjson.serializer.SerializeFilter[] serializeFilterArray20 = new com.alibaba.fastjson.serializer.SerializeFilter[] {};
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature21 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature22 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature23 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature24 = com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString;
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature25 = com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure;
        com.alibaba.fastjson.serializer.SerializerFeature[] serializerFeatureArray26 = new com.alibaba.fastjson.serializer.SerializerFeature[] { serializerFeature21, serializerFeature22, serializerFeature23, serializerFeature24, serializerFeature25 };
        byte[] byteArray27 = com.alibaba.fastjson.JSON.toJSONBytes((java.lang.Object) "hi!", serializeFilterArray20, serializerFeatureArray26);
        java.lang.String str28 = com.alibaba.fastjson.JSON.toJSONStringWithDateFormat((java.lang.Object) jSONObject14, "null", serializerFeatureArray26);
        byte[] byteArray29 = com.alibaba.fastjson.JSON.toJSONBytes(obj11, serializeFilter12, serializerFeatureArray26);
        byte[] byteArray30 = com.alibaba.fastjson.JSON.toJSONBytes((java.lang.Object) jSONObject6, serializerFeatureArray26);
        java.sql.Date date32 = jSONObject6.getSqlDate("\"-9223372036854775808\"");
        com.alibaba.fastjson.JSONObject jSONObject35 = new com.alibaba.fastjson.JSONObject(0);
        java.util.Collection<java.lang.Object> objCollection36 = jSONObject35.values();
        com.alibaba.fastjson.JSONObject jSONObject37 = new com.alibaba.fastjson.JSONObject((java.util.Map<java.lang.String, java.lang.Object>) jSONObject35);
        com.alibaba.fastjson.JSONObject jSONObject39 = new com.alibaba.fastjson.JSONObject(0);
        boolean boolean41 = jSONObject39.equals((java.lang.Object) (byte) 10);
        java.util.Set<java.util.Map.Entry<java.lang.String, java.lang.Object>> strEntrySet42 = jSONObject39.entrySet();
        short short44 = jSONObject39.getShortValue("false");
        java.lang.Object obj45 = com.alibaba.fastjson.JSON.toJSON((java.lang.Object) jSONObject39);
        com.alibaba.fastjson.serializer.SerializerFeature[] serializerFeatureArray47 = new com.alibaba.fastjson.serializer.SerializerFeature[] {};
        byte[] byteArray48 = com.alibaba.fastjson.JSON.toJSONBytes((java.lang.Object) 10.0d, serializerFeatureArray47);
        byte[] byteArray49 = com.alibaba.fastjson.JSON.toJSONBytes((java.lang.Object) jSONObject39, serializerFeatureArray47);
        java.lang.String str50 = jSONObject35.toString(serializerFeatureArray47);
        java.lang.Object obj51 = jSONObject6.replace("", (java.lang.Object) serializerFeatureArray47);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(float5);
        org.junit.Assert.assertNull(double8);
        org.junit.Assert.assertNull(long10);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strEntrySet17);
        org.junit.Assert.assertNotNull(serializeFilterArray20);
        org.junit.Assert.assertTrue("'" + serializerFeature21 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature21.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature22 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature22.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature23 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature23.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + serializerFeature24 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString + "'", serializerFeature24.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + serializerFeature25 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure + "'", serializerFeature25.equals(com.alibaba.fastjson.serializer.SerializerFeature.BrowserSecure));
        org.junit.Assert.assertNotNull(serializerFeatureArray26);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[34, 104, 105, 33, 34]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "{}" + "'", str28, "{}");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[110, 117, 108, 108]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[123, 125]");
        org.junit.Assert.assertNull(date32);
        org.junit.Assert.assertNotNull(objCollection36);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(strEntrySet42);
        org.junit.Assert.assertTrue("'" + short44 + "' != '" + (short) 0 + "'", short44 == (short) 0);
        org.junit.Assert.assertNotNull(obj45);
        org.junit.Assert.assertEquals(obj45.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj45), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj45), "{}");
        org.junit.Assert.assertNotNull(serializerFeatureArray47);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[49, 48, 46, 48]");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[123, 125]");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "{}" + "'", str50, "{}");
        org.junit.Assert.assertNull(obj51);
    }

    @Test
    public void test322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test322");
        com.alibaba.fastjson.JSONException jSONException2 = new com.alibaba.fastjson.JSONException("hi!");
        com.alibaba.fastjson.JSONException jSONException3 = new com.alibaba.fastjson.JSONException("", (java.lang.Throwable) jSONException2);
        com.alibaba.fastjson.JSONException jSONException5 = new com.alibaba.fastjson.JSONException("\"'WriteTabAsSpecial'\"4");
        jSONException3.addSuppressed((java.lang.Throwable) jSONException5);
    }

    @Test
    public void test323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test323");
        java.io.Writer writer0 = null;
        com.alibaba.fastjson.serializer.SerializeWriter serializeWriter2 = new com.alibaba.fastjson.serializer.SerializeWriter(writer0, 10);
        serializeWriter2.write((int) (byte) -1);
        com.alibaba.fastjson.serializer.SerializerFeature serializerFeature7 = com.alibaba.fastjson.serializer.SerializerFeature.WriteMapNullValue;
        serializeWriter2.writeFieldValue(' ', "must >", (java.lang.Enum<com.alibaba.fastjson.serializer.SerializerFeature>) serializerFeature7);
        com.alibaba.fastjson.serializer.SerializeConfig serializeConfig9 = null;
        com.alibaba.fastjson.JSONObject jSONObject11 = new com.alibaba.fastjson.JSONObject(0);
        boolean boolean13 = jSONObject11.equals((java.lang.Object) (byte) 10);
        java.util.Set<java.util.Map.Entry<java.lang.String, java.lang.Object>> strEntrySet14 = jSONObject11.entrySet();
        short short16 = jSONObject11.getShortValue("false");
        java.lang.Object obj17 = com.alibaba.fastjson.JSON.toJSON((java.lang.Object) jSONObject11);
        com.alibaba.fastjson.serializer.SerializerFeature[] serializerFeatureArray19 = new com.alibaba.fastjson.serializer.SerializerFeature[] {};
        byte[] byteArray20 = com.alibaba.fastjson.JSON.toJSONBytes((java.lang.Object) 10.0d, serializerFeatureArray19);
        byte[] byteArray21 = com.alibaba.fastjson.JSON.toJSONBytes((java.lang.Object) jSONObject11, serializerFeatureArray19);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray22 = com.alibaba.fastjson.JSON.toJSONBytes((java.lang.Object) serializerFeature7, serializeConfig9, serializerFeatureArray19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + serializerFeature7 + "' != '" + com.alibaba.fastjson.serializer.SerializerFeature.WriteMapNullValue + "'", serializerFeature7.equals(com.alibaba.fastjson.serializer.SerializerFeature.WriteMapNullValue));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(strEntrySet14);
        org.junit.Assert.assertTrue("'" + short16 + "' != '" + (short) 0 + "'", short16 == (short) 0);
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertEquals(obj17.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj17), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj17), "{}");
        org.junit.Assert.assertNotNull(serializerFeatureArray19);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[49, 48, 46, 48]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[123, 125]");
    }

    @Test
    public void test324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test324");
        com.alibaba.fastjson.parser.DefaultJSONParser defaultJSONParser1 = new com.alibaba.fastjson.parser.DefaultJSONParser(":true");
        com.alibaba.fastjson.parser.SymbolTable symbolTable2 = defaultJSONParser1.symbolTable;
        com.alibaba.fastjson.parser.DefaultJSONParser defaultJSONParser4 = new com.alibaba.fastjson.parser.DefaultJSONParser(":true");
        com.alibaba.fastjson.parser.deserializer.FieldTypeResolver fieldTypeResolver5 = defaultJSONParser4.getFieldTypeResolver();
        java.lang.Object obj6 = defaultJSONParser4.input;
        com.alibaba.fastjson.JSON.handleResovleTask(defaultJSONParser1, defaultJSONParser4);
        com.alibaba.fastjson.parser.deserializer.FieldTypeResolver fieldTypeResolver8 = defaultJSONParser4.getFieldTypeResolver();
        java.lang.String str9 = defaultJSONParser4.getDateFomartPattern();
        org.junit.Assert.assertNotNull(symbolTable2);
        org.junit.Assert.assertNull(fieldTypeResolver5);
        org.junit.Assert.assertEquals("'" + obj6 + "' != '" + ":true" + "'", obj6, ":true");
        org.junit.Assert.assertNull(fieldTypeResolver8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Negative initial size:" + "'", str9, "Negative initial size:");
    }

    @Test
    public void test325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test325");
        com.alibaba.fastjson.parser.ParseContext parseContext0 = null;
        com.alibaba.fastjson.parser.DefaultJSONParser.ResolveTask resolveTask2 = new com.alibaba.fastjson.parser.DefaultJSONParser.ResolveTask(parseContext0, "null");
        com.alibaba.fastjson.parser.deserializer.FieldDeserializer fieldDeserializer3 = null;
        resolveTask2.fieldDeserializer = fieldDeserializer3;
        com.alibaba.fastjson.parser.ParseContext parseContext5 = resolveTask2.ownerContext;
        com.alibaba.fastjson.parser.deserializer.FieldDeserializer fieldDeserializer6 = resolveTask2.fieldDeserializer;
        org.junit.Assert.assertNull(parseContext5);
        org.junit.Assert.assertNull(fieldDeserializer6);
    }
}
